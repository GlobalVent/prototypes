
/Volumes/ct-ng/covid-19/github/prototypes/photonjamsim/target/1.5.2/photon/photonjamsim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000015a4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a15c0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  080a15c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000180  20000068  20000068  00030068  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a162c  080a162c  0002162c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a1654  080a1654  00021654  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000a36e0  00000000  00000000  00021658  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000e514  00000000  00000000  000c4d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000105ad  00000000  00000000  000d324c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001b68  00000000  00000000  000e37f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002e68  00000000  00000000  000e5361  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00023572  00000000  00000000  000e81c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00020858  00000000  00000000  0010b73b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b40fc  00000000  00000000  0012bf93  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bf08  00000000  00000000  001e0090  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 f8df 	bl	80a11f0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 f8ff 	bl	80a123c <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a15c4 	.word	0x080a15c4
 80a004c:	20000068 	.word	0x20000068
 80a0050:	20000068 	.word	0x20000068
 80a0054:	200001e8 	.word	0x200001e8
 80a0058:	200001e8 	.word	0x200001e8

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fe69 	bl	80a0d34 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a1580 	.word	0x080a1580
 80a0084:	080a15b4 	.word	0x080a15b4

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b814 	b.w	80a00b4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f839 	bl	80a0104 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 be0f 	b.w	80a0cb8 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 ba51 	b.w	80a0540 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 ba57 	b.w	80a0550 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <setup>:


int counter = 0;


void setup() {
 80a00b4:	b510      	push	{r4, lr}
	Serial.begin(9600);			// debugger no workee we need to do this the old fashion way...
 80a00b6:	f000 fd19 	bl	80a0aec <_Z16_fetch_usbserialv>
 80a00ba:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00be:	f000 fd09 	bl	80a0ad4 <_ZN9USBSerial5beginEl>
	i2cSlaveCtl = new I2cSlaveCtl(I2C_RPI_SDL, I2C_RPI_SDA);
 80a00c2:	2048      	movs	r0, #72	; 0x48
 80a00c4:	f7ff ffe9 	bl	80a009a <_Znwj>
 80a00c8:	4604      	mov	r4, r0
 80a00ca:	b118      	cbz	r0, 80a00d4 <setup+0x20>
 80a00cc:	2205      	movs	r2, #5
 80a00ce:	2104      	movs	r1, #4
 80a00d0:	f000 f820 	bl	80a0114 <_ZN11I2cSlaveCtlC1Eii>
 80a00d4:	4b08      	ldr	r3, [pc, #32]	; (80a00f8 <setup+0x44>)
	photonConfig = new I2cPhotonJamsimConfig(I2C_PHOTON_CONFIG_ADDR);
 80a00d6:	2018      	movs	r0, #24
int counter = 0;


void setup() {
	Serial.begin(9600);			// debugger no workee we need to do this the old fashion way...
	i2cSlaveCtl = new I2cSlaveCtl(I2C_RPI_SDL, I2C_RPI_SDA);
 80a00d8:	601c      	str	r4, [r3, #0]
	photonConfig = new I2cPhotonJamsimConfig(I2C_PHOTON_CONFIG_ADDR);
 80a00da:	f7ff ffde 	bl	80a009a <_Znwj>
 80a00de:	b140      	cbz	r0, 80a00f2 <setup+0x3e>
     * 
     * @param devAddr -- device address for this device.
     */
    I2cSlaveDevice(unsigned devAddr) :
        _devAddr(devAddr),
        _byteCount(0) {};
 80a00e0:	2306      	movs	r3, #6
 80a00e2:	6043      	str	r3, [r0, #4]
 80a00e4:	2300      	movs	r3, #0
 80a00e6:	6083      	str	r3, [r0, #8]
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80a00e8:	60c3      	str	r3, [r0, #12]
 80a00ea:	6103      	str	r3, [r0, #16]
 80a00ec:	6143      	str	r3, [r0, #20]
     * @brief Construct a new I2cSlaveDevice object
     * 
     * @param devAddr -- device address for this device.
     */
    I2cPhotonJamsimConfig(unsigned devAddr) :
        I2cSlaveDevice(devAddr) {};
 80a00ee:	4b03      	ldr	r3, [pc, #12]	; (80a00fc <setup+0x48>)
 80a00f0:	6003      	str	r3, [r0, #0]
 80a00f2:	4b03      	ldr	r3, [pc, #12]	; (80a0100 <setup+0x4c>)
 80a00f4:	6018      	str	r0, [r3, #0]
 80a00f6:	bd10      	pop	{r4, pc}
 80a00f8:	2000006c 	.word	0x2000006c
 80a00fc:	080a12d8 	.word	0x080a12d8
 80a0100:	20000070 	.word	0x20000070

080a0104 <loop>:

}	


void loop() {
	i2cSlaveCtl->sampleIO();
 80a0104:	4b01      	ldr	r3, [pc, #4]	; (80a010c <loop+0x8>)
 80a0106:	6818      	ldr	r0, [r3, #0]
 80a0108:	f000 b830 	b.w	80a016c <_ZN11I2cSlaveCtl8sampleIOEv>
 80a010c:	2000006c 	.word	0x2000006c

080a0110 <_GLOBAL__sub_I_i2cSlaveCtl>:
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0110:	f000 b8c8 	b.w	80a02a4 <HAL_Pin_Map>

080a0114 <_ZN11I2cSlaveCtlC1Eii>:

#include "Particle.h"
#include "I2cSlaveCtl.h"


I2cSlaveCtl::I2cSlaveCtl(int sdlGpio, int sdaGpio) :
 80a0114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0118:	4688      	mov	r8, r1
 80a011a:	4604      	mov	r4, r0
 80a011c:	4617      	mov	r7, r2
    _sdlGpio(sdlGpio),
    _sdaGpio(sdaGpio),
    _i2cLastSample(0x3),
    _i2cState(0),
    _read(false) 
 80a011e:	4b12      	ldr	r3, [pc, #72]	; (80a0168 <_ZN11I2cSlaveCtlC1Eii+0x54>)
      _M_data(pointer __p)
      { _M_dataplus._M_p = __p; }

      void
      _M_length(size_type __length)
      { _M_string_length = __length; }
 80a0120:	2500      	movs	r5, #0
 80a0122:	e880 0108 	stmia.w	r0, {r3, r8}
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
 80a0126:	f100 0628 	add.w	r6, r0, #40	; 0x28

      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 80a012a:	f100 0314 	add.w	r3, r0, #20
 80a012e:	60a2      	str	r2, [r4, #8]
 80a0130:	4629      	mov	r1, r5
 80a0132:	2210      	movs	r2, #16

      // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
      struct _Alloc_hider : allocator_type // TODO check __is_final
      {
	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
	: allocator_type(__a), _M_p(__dat) { }
 80a0134:	60c3      	str	r3, [r0, #12]
      _M_data(pointer __p)
      { _M_dataplus._M_p = __p; }

      void
      _M_length(size_type __length)
      { _M_string_length = __length; }
 80a0136:	6105      	str	r5, [r0, #16]
      typedef streamoff         off_type;
      typedef mbstate_t         state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
      { __c1 = __c2; }
 80a0138:	7505      	strb	r5, [r0, #20]
 80a013a:	4630      	mov	r0, r6
 80a013c:	f001 f87e 	bl	80a123c <memset>
 80a0140:	2303      	movs	r3, #3
 80a0142:	63e3      	str	r3, [r4, #60]	; 0x3c
{
    pinMode(sdlGpio, INPUT);
 80a0144:	4629      	mov	r1, r5
 80a0146:	fa1f f088 	uxth.w	r0, r8
 80a014a:	63a5      	str	r5, [r4, #56]	; 0x38
	  void
	  _M_initialize()
	  {
	    this->_M_header._M_color = _S_red;
	    this->_M_header._M_parent = 0;
	    this->_M_header._M_left = &this->_M_header;
 80a014c:	6326      	str	r6, [r4, #48]	; 0x30
	    this->_M_header._M_right = &this->_M_header;
 80a014e:	6366      	str	r6, [r4, #52]	; 0x34
I2cSlaveCtl::I2cSlaveCtl(int sdlGpio, int sdaGpio) :
    _sdlGpio(sdlGpio),
    _sdaGpio(sdaGpio),
    _i2cLastSample(0x3),
    _i2cState(0),
    _read(false) 
 80a0150:	6425      	str	r5, [r4, #64]	; 0x40
 80a0152:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
{
    pinMode(sdlGpio, INPUT);
 80a0156:	f000 fe5f 	bl	80a0e18 <pinMode>
    pinMode(sdaGpio, INPUT);
 80a015a:	b2b8      	uxth	r0, r7
 80a015c:	4629      	mov	r1, r5
 80a015e:	f000 fe5b 	bl	80a0e18 <pinMode>


}
 80a0162:	4620      	mov	r0, r4
 80a0164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0168:	080a12c8 	.word	0x080a12c8

080a016c <_ZN11I2cSlaveCtl8sampleIOEv>:
 * @brief perform an i2c sample of the signals
 *        any class calls to the i2c slave devices happen in 
 *        this step function.
 * 
 */
void I2cSlaveCtl::sampleIO() {
 80a016c:	4770      	bx	lr

080a016e <_ZNSt8_Rb_treeIjSt4pairIKjP14I2cSlaveDeviceESt10_Select1stIS4_ESt4lessIjESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80a016e:	b570      	push	{r4, r5, r6, lr}
 80a0170:	4606      	mov	r6, r0
 80a0172:	460c      	mov	r4, r1
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 80a0174:	b14c      	cbz	r4, 80a018a <_ZNSt8_Rb_treeIjSt4pairIKjP14I2cSlaveDeviceESt10_Select1stIS4_ESt4lessIjESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x1c>
	{
	  _M_erase(_S_right(__x));
 80a0176:	68e1      	ldr	r1, [r4, #12]
 80a0178:	4630      	mov	r0, r6
 80a017a:	f7ff fff8 	bl	80a016e <_ZNSt8_Rb_treeIjSt4pairIKjP14I2cSlaveDeviceESt10_Select1stIS4_ESt4lessIjESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 80a017e:	68a5      	ldr	r5, [r4, #8]
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a0180:	4620      	mov	r0, r4
 80a0182:	f7ff ff8c 	bl	80a009e <_ZdlPv>
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
	  __x = __y;
 80a0186:	462c      	mov	r4, r5
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 80a0188:	e7f4      	b.n	80a0174 <_ZNSt8_Rb_treeIjSt4pairIKjP14I2cSlaveDeviceESt10_Select1stIS4_ESt4lessIjESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x6>
 80a018a:	bd70      	pop	{r4, r5, r6, pc}

080a018c <_ZN11I2cSlaveCtlD1Ev>:
    pinMode(sdlGpio, INPUT);
    pinMode(sdaGpio, INPUT);


}
I2cSlaveCtl::~I2cSlaveCtl() {
 80a018c:	b510      	push	{r4, lr}
 80a018e:	4604      	mov	r4, r0
 80a0190:	4b05      	ldr	r3, [pc, #20]	; (80a01a8 <_ZN11I2cSlaveCtlD1Ev+0x1c>)
 80a0192:	f840 3b24 	str.w	r3, [r0], #36

      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a);
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
      { _M_erase(_M_begin()); }
 80a0196:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80a0198:	f7ff ffe9 	bl	80a016e <_ZNSt8_Rb_treeIjSt4pairIKjP14I2cSlaveDeviceESt10_Select1stIS4_ESt4lessIjESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string()
      { _M_dispose(); }
 80a019c:	f104 000c 	add.w	r0, r4, #12
 80a01a0:	f000 fec8 	bl	80a0f34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>

}
 80a01a4:	4620      	mov	r0, r4
 80a01a6:	bd10      	pop	{r4, pc}
 80a01a8:	080a12c8 	.word	0x080a12c8

080a01ac <_ZN11I2cSlaveCtlD0Ev>:
    pinMode(sdlGpio, INPUT);
    pinMode(sdaGpio, INPUT);


}
I2cSlaveCtl::~I2cSlaveCtl() {
 80a01ac:	b510      	push	{r4, lr}
 80a01ae:	4604      	mov	r4, r0

}
 80a01b0:	f7ff ffec 	bl	80a018c <_ZN11I2cSlaveCtlD1Ev>
 80a01b4:	4620      	mov	r0, r4
 80a01b6:	2148      	movs	r1, #72	; 0x48
 80a01b8:	f000 fe9d 	bl	80a0ef6 <_ZdlPvj>
 80a01bc:	4620      	mov	r0, r4
 80a01be:	bd10      	pop	{r4, pc}

080a01c0 <_GLOBAL__sub_I__ZN11I2cSlaveCtlC2Eii>:
 80a01c0:	f000 b870 	b.w	80a02a4 <HAL_Pin_Map>

080a01c4 <_ZN21I2cPhotonJamsimConfig5startEb>:
     *           and the the caller has received an address matching the 
     *           devAddr
     * @param -- read -- true of this is a read transaction, false if it is a write.
     */
    virtual void start(bool read) {
        _byteCount = 0;
 80a01c4:	2300      	movs	r3, #0
 80a01c6:	6083      	str	r3, [r0, #8]
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
	this->_M_impl._M_finish = __pos;
 80a01c8:	68c3      	ldr	r3, [r0, #12]
 80a01ca:	6103      	str	r3, [r0, #16]
 80a01cc:	4770      	bx	lr

080a01ce <_ZN21I2cPhotonJamsimConfig4stopEb>:
/**
 * @brief stop event received AFTER receiving a start event...
 * 
 * @param -- read -- true of this is a read transaction, false if it is a write.
 */
void I2cPhotonJamsimConfig::stop(bool read) {
 80a01ce:	4770      	bx	lr

080a01d0 <_ZN21I2cPhotonJamsimConfig4readEv>:
 * 
 * 
 * @return uint8_t 
 */
uint8_t I2cPhotonJamsimConfig::read() {
    return('a'+_byteCount);
 80a01d0:	6880      	ldr	r0, [r0, #8]
 80a01d2:	3061      	adds	r0, #97	; 0x61
    I2cSlaveDevice::read();
}
 80a01d4:	b2c0      	uxtb	r0, r0
 80a01d6:	4770      	bx	lr

080a01d8 <_ZN21I2cPhotonJamsimConfig5writeEh>:
/**
 * @brief write data to the device. (one byte at a time.)
 * 
 * @param data -- 1 byte data written to the device
 */
void I2cPhotonJamsimConfig::write(uint8_t data) {
 80a01d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
       *  available.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80a01dc:	6903      	ldr	r3, [r0, #16]
 80a01de:	6942      	ldr	r2, [r0, #20]
 80a01e0:	4606      	mov	r6, r0
 80a01e2:	4293      	cmp	r3, r2
 80a01e4:	4689      	mov	r9, r1
 80a01e6:	d006      	beq.n	80a01f6 <_ZN21I2cPhotonJamsimConfig5writeEh+0x1e>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a01e8:	b103      	cbz	r3, 80a01ec <_ZN21I2cPhotonJamsimConfig5writeEh+0x14>
 80a01ea:	7019      	strb	r1, [r3, #0]
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
	                             __x);
	    ++this->_M_impl._M_finish;
 80a01ec:	6933      	ldr	r3, [r6, #16]
 80a01ee:	3301      	adds	r3, #1
 80a01f0:	6133      	str	r3, [r6, #16]
 80a01f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80a01f6:	68c2      	ldr	r2, [r0, #12]
 80a01f8:	1a9b      	subs	r3, r3, r2

      // Called by the latter.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 80a01fa:	1c5a      	adds	r2, r3, #1
 80a01fc:	d102      	bne.n	80a0204 <_ZN21I2cPhotonJamsimConfig5writeEh+0x2c>
	  __throw_length_error(__N(__s));
 80a01fe:	4818      	ldr	r0, [pc, #96]	; (80a0260 <_ZN21I2cPhotonJamsimConfig5writeEh+0x88>)
 80a0200:	f000 fe95 	bl	80a0f2e <_ZSt20__throw_length_errorPKc>
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
 80a0204:	2b00      	cmp	r3, #0
 80a0206:	bf14      	ite	ne
 80a0208:	461c      	movne	r4, r3
 80a020a:	2401      	moveq	r4, #1

	const size_type __len = size() + std::max(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80a020c:	191c      	adds	r4, r3, r4
 80a020e:	d201      	bcs.n	80a0214 <_ZN21I2cPhotonJamsimConfig5writeEh+0x3c>

      pointer
      _M_allocate(size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80a0210:	b13c      	cbz	r4, 80a0222 <_ZN21I2cPhotonJamsimConfig5writeEh+0x4a>
 80a0212:	e001      	b.n	80a0218 <_ZN21I2cPhotonJamsimConfig5writeEh+0x40>
      {
	if (max_size() - size() < __n)
	  __throw_length_error(__N(__s));

	const size_type __len = size() + std::max(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80a0214:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a0218:	4620      	mov	r0, r4
 80a021a:	f7ff ff3e 	bl	80a009a <_Znwj>
 80a021e:	4607      	mov	r7, r0
 80a0220:	e000      	b.n	80a0224 <_ZN21I2cPhotonJamsimConfig5writeEh+0x4c>

      pointer
      _M_allocate(size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80a0222:	4627      	mov	r7, r4

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80a0224:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80a0228:	6935      	ldr	r5, [r6, #16]
 80a022a:	ebc8 0505 	rsb	r5, r8, r5

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a022e:	42ef      	cmn	r7, r5
 80a0230:	bf18      	it	ne
 80a0232:	f807 9005 	strbne.w	r9, [r7, r5]
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 80a0236:	b125      	cbz	r5, 80a0242 <_ZN21I2cPhotonJamsimConfig5writeEh+0x6a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80a0238:	462a      	mov	r2, r5
 80a023a:	4641      	mov	r1, r8
 80a023c:	4638      	mov	r0, r7
 80a023e:	f000 ffe2 	bl	80a1206 <memmove>
	    __new_finish
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
 80a0242:	3501      	adds	r5, #1
 80a0244:	443d      	add	r5, r7

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 80a0246:	f1b8 0f00 	cmp.w	r8, #0
 80a024a:	d002      	beq.n	80a0252 <_ZN21I2cPhotonJamsimConfig5writeEh+0x7a>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a024c:	4640      	mov	r0, r8
 80a024e:	f7ff ff26 	bl	80a009e <_ZdlPv>
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
	this->_M_impl._M_finish = __new_finish;
	this->_M_impl._M_end_of_storage = __new_start + __len;
 80a0252:	443c      	add	r4, r7
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
 80a0254:	60f7      	str	r7, [r6, #12]
	this->_M_impl._M_finish = __new_finish;
 80a0256:	6135      	str	r5, [r6, #16]
	this->_M_impl._M_end_of_storage = __new_start + __len;
 80a0258:	6174      	str	r4, [r6, #20]
 80a025a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a025e:	bf00      	nop
 80a0260:	080a12e8 	.word	0x080a12e8

080a0264 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0264:	b508      	push	{r3, lr}
 80a0266:	4b02      	ldr	r3, [pc, #8]	; (80a0270 <os_mutex_recursive_create+0xc>)
 80a0268:	681b      	ldr	r3, [r3, #0]
 80a026a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a026c:	9301      	str	r3, [sp, #4]
 80a026e:	bd08      	pop	{r3, pc}
 80a0270:	080601d0 	.word	0x080601d0

080a0274 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0274:	b508      	push	{r3, lr}
 80a0276:	4b02      	ldr	r3, [pc, #8]	; (80a0280 <os_mutex_recursive_destroy+0xc>)
 80a0278:	681b      	ldr	r3, [r3, #0]
 80a027a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a027c:	9301      	str	r3, [sp, #4]
 80a027e:	bd08      	pop	{r3, pc}
 80a0280:	080601d0 	.word	0x080601d0

080a0284 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0284:	b508      	push	{r3, lr}
 80a0286:	4b02      	ldr	r3, [pc, #8]	; (80a0290 <HAL_RNG_GetRandomNumber+0xc>)
 80a0288:	681b      	ldr	r3, [r3, #0]
 80a028a:	685b      	ldr	r3, [r3, #4]
 80a028c:	9301      	str	r3, [sp, #4]
 80a028e:	bd08      	pop	{r3, pc}
 80a0290:	0806019c 	.word	0x0806019c

080a0294 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0294:	b508      	push	{r3, lr}
 80a0296:	4b02      	ldr	r3, [pc, #8]	; (80a02a0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0298:	681b      	ldr	r3, [r3, #0]
 80a029a:	695b      	ldr	r3, [r3, #20]
 80a029c:	9301      	str	r3, [sp, #4]
 80a029e:	bd08      	pop	{r3, pc}
 80a02a0:	0806019c 	.word	0x0806019c

080a02a4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a02a4:	b508      	push	{r3, lr}
 80a02a6:	4b02      	ldr	r3, [pc, #8]	; (80a02b0 <HAL_Pin_Map+0xc>)
 80a02a8:	681b      	ldr	r3, [r3, #0]
 80a02aa:	681b      	ldr	r3, [r3, #0]
 80a02ac:	9301      	str	r3, [sp, #4]
 80a02ae:	bd08      	pop	{r3, pc}
 80a02b0:	080601b0 	.word	0x080601b0

080a02b4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a02b4:	b508      	push	{r3, lr}
 80a02b6:	4b02      	ldr	r3, [pc, #8]	; (80a02c0 <HAL_Pin_Mode+0xc>)
 80a02b8:	681b      	ldr	r3, [r3, #0]
 80a02ba:	689b      	ldr	r3, [r3, #8]
 80a02bc:	9301      	str	r3, [sp, #4]
 80a02be:	bd08      	pop	{r3, pc}
 80a02c0:	080601b0 	.word	0x080601b0

080a02c4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a02c4:	b508      	push	{r3, lr}
 80a02c6:	4b02      	ldr	r3, [pc, #8]	; (80a02d0 <HAL_I2C_Write_Data+0xc>)
 80a02c8:	681b      	ldr	r3, [r3, #0]
 80a02ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a02cc:	9301      	str	r3, [sp, #4]
 80a02ce:	bd08      	pop	{r3, pc}
 80a02d0:	080601ac 	.word	0x080601ac

080a02d4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a02d4:	b508      	push	{r3, lr}
 80a02d6:	4b02      	ldr	r3, [pc, #8]	; (80a02e0 <HAL_I2C_Available_Data+0xc>)
 80a02d8:	681b      	ldr	r3, [r3, #0]
 80a02da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a02dc:	9301      	str	r3, [sp, #4]
 80a02de:	bd08      	pop	{r3, pc}
 80a02e0:	080601ac 	.word	0x080601ac

080a02e4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a02e4:	b508      	push	{r3, lr}
 80a02e6:	4b02      	ldr	r3, [pc, #8]	; (80a02f0 <HAL_I2C_Read_Data+0xc>)
 80a02e8:	681b      	ldr	r3, [r3, #0]
 80a02ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a02ec:	9301      	str	r3, [sp, #4]
 80a02ee:	bd08      	pop	{r3, pc}
 80a02f0:	080601ac 	.word	0x080601ac

080a02f4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a02f4:	b508      	push	{r3, lr}
 80a02f6:	4b02      	ldr	r3, [pc, #8]	; (80a0300 <HAL_I2C_Peek_Data+0xc>)
 80a02f8:	681b      	ldr	r3, [r3, #0]
 80a02fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a02fc:	9301      	str	r3, [sp, #4]
 80a02fe:	bd08      	pop	{r3, pc}
 80a0300:	080601ac 	.word	0x080601ac

080a0304 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0304:	b508      	push	{r3, lr}
 80a0306:	4b02      	ldr	r3, [pc, #8]	; (80a0310 <HAL_I2C_Flush_Data+0xc>)
 80a0308:	681b      	ldr	r3, [r3, #0]
 80a030a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a030c:	9301      	str	r3, [sp, #4]
 80a030e:	bd08      	pop	{r3, pc}
 80a0310:	080601ac 	.word	0x080601ac

080a0314 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0314:	b508      	push	{r3, lr}
 80a0316:	4b02      	ldr	r3, [pc, #8]	; (80a0320 <HAL_I2C_Is_Enabled+0xc>)
 80a0318:	681b      	ldr	r3, [r3, #0]
 80a031a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a031c:	9301      	str	r3, [sp, #4]
 80a031e:	bd08      	pop	{r3, pc}
 80a0320:	080601ac 	.word	0x080601ac

080a0324 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a0324:	b508      	push	{r3, lr}
 80a0326:	4b03      	ldr	r3, [pc, #12]	; (80a0334 <HAL_I2C_Init+0x10>)
 80a0328:	681b      	ldr	r3, [r3, #0]
 80a032a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a032e:	9301      	str	r3, [sp, #4]
 80a0330:	bd08      	pop	{r3, pc}
 80a0332:	0000      	.short	0x0000
 80a0334:	080601ac 	.word	0x080601ac

080a0338 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0338:	b508      	push	{r3, lr}
 80a033a:	4b02      	ldr	r3, [pc, #8]	; (80a0344 <HAL_SPI_Init+0xc>)
 80a033c:	681b      	ldr	r3, [r3, #0]
 80a033e:	69db      	ldr	r3, [r3, #28]
 80a0340:	9301      	str	r3, [sp, #4]
 80a0342:	bd08      	pop	{r3, pc}
 80a0344:	080601b4 	.word	0x080601b4

080a0348 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0348:	b508      	push	{r3, lr}
 80a034a:	4b02      	ldr	r3, [pc, #8]	; (80a0354 <HAL_SPI_Is_Enabled+0xc>)
 80a034c:	681b      	ldr	r3, [r3, #0]
 80a034e:	6a1b      	ldr	r3, [r3, #32]
 80a0350:	9301      	str	r3, [sp, #4]
 80a0352:	bd08      	pop	{r3, pc}
 80a0354:	080601b4 	.word	0x080601b4

080a0358 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0358:	b508      	push	{r3, lr}
 80a035a:	4b02      	ldr	r3, [pc, #8]	; (80a0364 <HAL_USART_Init+0xc>)
 80a035c:	681b      	ldr	r3, [r3, #0]
 80a035e:	699b      	ldr	r3, [r3, #24]
 80a0360:	9301      	str	r3, [sp, #4]
 80a0362:	bd08      	pop	{r3, pc}
 80a0364:	080601c4 	.word	0x080601c4

080a0368 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0368:	b508      	push	{r3, lr}
 80a036a:	4b02      	ldr	r3, [pc, #8]	; (80a0374 <HAL_USART_Write_Data+0xc>)
 80a036c:	681b      	ldr	r3, [r3, #0]
 80a036e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0370:	9301      	str	r3, [sp, #4]
 80a0372:	bd08      	pop	{r3, pc}
 80a0374:	080601c4 	.word	0x080601c4

080a0378 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0378:	b508      	push	{r3, lr}
 80a037a:	4b02      	ldr	r3, [pc, #8]	; (80a0384 <HAL_USART_Available_Data+0xc>)
 80a037c:	681b      	ldr	r3, [r3, #0]
 80a037e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0380:	9301      	str	r3, [sp, #4]
 80a0382:	bd08      	pop	{r3, pc}
 80a0384:	080601c4 	.word	0x080601c4

080a0388 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0388:	b508      	push	{r3, lr}
 80a038a:	4b02      	ldr	r3, [pc, #8]	; (80a0394 <HAL_USART_Read_Data+0xc>)
 80a038c:	681b      	ldr	r3, [r3, #0]
 80a038e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0390:	9301      	str	r3, [sp, #4]
 80a0392:	bd08      	pop	{r3, pc}
 80a0394:	080601c4 	.word	0x080601c4

080a0398 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0398:	b508      	push	{r3, lr}
 80a039a:	4b02      	ldr	r3, [pc, #8]	; (80a03a4 <HAL_USART_Peek_Data+0xc>)
 80a039c:	681b      	ldr	r3, [r3, #0]
 80a039e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a03a0:	9301      	str	r3, [sp, #4]
 80a03a2:	bd08      	pop	{r3, pc}
 80a03a4:	080601c4 	.word	0x080601c4

080a03a8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a03a8:	b508      	push	{r3, lr}
 80a03aa:	4b02      	ldr	r3, [pc, #8]	; (80a03b4 <HAL_USART_Flush_Data+0xc>)
 80a03ac:	681b      	ldr	r3, [r3, #0]
 80a03ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a03b0:	9301      	str	r3, [sp, #4]
 80a03b2:	bd08      	pop	{r3, pc}
 80a03b4:	080601c4 	.word	0x080601c4

080a03b8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a03b8:	b508      	push	{r3, lr}
 80a03ba:	4b02      	ldr	r3, [pc, #8]	; (80a03c4 <HAL_USART_Is_Enabled+0xc>)
 80a03bc:	681b      	ldr	r3, [r3, #0]
 80a03be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a03c0:	9301      	str	r3, [sp, #4]
 80a03c2:	bd08      	pop	{r3, pc}
 80a03c4:	080601c4 	.word	0x080601c4

080a03c8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a03c8:	b508      	push	{r3, lr}
 80a03ca:	4b02      	ldr	r3, [pc, #8]	; (80a03d4 <HAL_USART_Available_Data_For_Write+0xc>)
 80a03cc:	681b      	ldr	r3, [r3, #0]
 80a03ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a03d0:	9301      	str	r3, [sp, #4]
 80a03d2:	bd08      	pop	{r3, pc}
 80a03d4:	080601c4 	.word	0x080601c4

080a03d8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a03d8:	b508      	push	{r3, lr}
 80a03da:	4b02      	ldr	r3, [pc, #8]	; (80a03e4 <HAL_USB_USART_Init+0xc>)
 80a03dc:	681b      	ldr	r3, [r3, #0]
 80a03de:	681b      	ldr	r3, [r3, #0]
 80a03e0:	9301      	str	r3, [sp, #4]
 80a03e2:	bd08      	pop	{r3, pc}
 80a03e4:	080601d8 	.word	0x080601d8

080a03e8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a03e8:	b508      	push	{r3, lr}
 80a03ea:	4b02      	ldr	r3, [pc, #8]	; (80a03f4 <HAL_USB_USART_Begin+0xc>)
 80a03ec:	681b      	ldr	r3, [r3, #0]
 80a03ee:	685b      	ldr	r3, [r3, #4]
 80a03f0:	9301      	str	r3, [sp, #4]
 80a03f2:	bd08      	pop	{r3, pc}
 80a03f4:	080601d8 	.word	0x080601d8

080a03f8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a03f8:	b508      	push	{r3, lr}
 80a03fa:	4b02      	ldr	r3, [pc, #8]	; (80a0404 <HAL_USB_USART_Available_Data+0xc>)
 80a03fc:	681b      	ldr	r3, [r3, #0]
 80a03fe:	691b      	ldr	r3, [r3, #16]
 80a0400:	9301      	str	r3, [sp, #4]
 80a0402:	bd08      	pop	{r3, pc}
 80a0404:	080601d8 	.word	0x080601d8

080a0408 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0408:	b508      	push	{r3, lr}
 80a040a:	4b02      	ldr	r3, [pc, #8]	; (80a0414 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a040c:	681b      	ldr	r3, [r3, #0]
 80a040e:	695b      	ldr	r3, [r3, #20]
 80a0410:	9301      	str	r3, [sp, #4]
 80a0412:	bd08      	pop	{r3, pc}
 80a0414:	080601d8 	.word	0x080601d8

080a0418 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0418:	b508      	push	{r3, lr}
 80a041a:	4b02      	ldr	r3, [pc, #8]	; (80a0424 <HAL_USB_USART_Receive_Data+0xc>)
 80a041c:	681b      	ldr	r3, [r3, #0]
 80a041e:	699b      	ldr	r3, [r3, #24]
 80a0420:	9301      	str	r3, [sp, #4]
 80a0422:	bd08      	pop	{r3, pc}
 80a0424:	080601d8 	.word	0x080601d8

080a0428 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0428:	b508      	push	{r3, lr}
 80a042a:	4b02      	ldr	r3, [pc, #8]	; (80a0434 <HAL_USB_USART_Send_Data+0xc>)
 80a042c:	681b      	ldr	r3, [r3, #0]
 80a042e:	69db      	ldr	r3, [r3, #28]
 80a0430:	9301      	str	r3, [sp, #4]
 80a0432:	bd08      	pop	{r3, pc}
 80a0434:	080601d8 	.word	0x080601d8

080a0438 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0438:	b508      	push	{r3, lr}
 80a043a:	4b02      	ldr	r3, [pc, #8]	; (80a0444 <HAL_USB_USART_Flush_Data+0xc>)
 80a043c:	681b      	ldr	r3, [r3, #0]
 80a043e:	6a1b      	ldr	r3, [r3, #32]
 80a0440:	9301      	str	r3, [sp, #4]
 80a0442:	bd08      	pop	{r3, pc}
 80a0444:	080601d8 	.word	0x080601d8

080a0448 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0448:	b508      	push	{r3, lr}
 80a044a:	4b02      	ldr	r3, [pc, #8]	; (80a0454 <inet_gethostbyname+0xc>)
 80a044c:	681b      	ldr	r3, [r3, #0]
 80a044e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0450:	9301      	str	r3, [sp, #4]
 80a0452:	bd08      	pop	{r3, pc}
 80a0454:	080601c0 	.word	0x080601c0

080a0458 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0458:	b508      	push	{r3, lr}
 80a045a:	4b02      	ldr	r3, [pc, #8]	; (80a0464 <set_system_mode+0xc>)
 80a045c:	681b      	ldr	r3, [r3, #0]
 80a045e:	685b      	ldr	r3, [r3, #4]
 80a0460:	9301      	str	r3, [sp, #4]
 80a0462:	bd08      	pop	{r3, pc}
 80a0464:	080601a4 	.word	0x080601a4

080a0468 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0468:	b508      	push	{r3, lr}
 80a046a:	4b03      	ldr	r3, [pc, #12]	; (80a0478 <system_ctrl_set_app_request_handler+0x10>)
 80a046c:	681b      	ldr	r3, [r3, #0]
 80a046e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0472:	9301      	str	r3, [sp, #4]
 80a0474:	bd08      	pop	{r3, pc}
 80a0476:	0000      	.short	0x0000
 80a0478:	080601a4 	.word	0x080601a4

080a047c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a047c:	b508      	push	{r3, lr}
 80a047e:	4b03      	ldr	r3, [pc, #12]	; (80a048c <system_ctrl_set_result+0x10>)
 80a0480:	681b      	ldr	r3, [r3, #0]
 80a0482:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0486:	9301      	str	r3, [sp, #4]
 80a0488:	bd08      	pop	{r3, pc}
 80a048a:	0000      	.short	0x0000
 80a048c:	080601a4 	.word	0x080601a4

080a0490 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0490:	b508      	push	{r3, lr}
 80a0492:	4b02      	ldr	r3, [pc, #8]	; (80a049c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0494:	681b      	ldr	r3, [r3, #0]
 80a0496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0498:	9301      	str	r3, [sp, #4]
 80a049a:	bd08      	pop	{r3, pc}
 80a049c:	080601cc 	.word	0x080601cc

080a04a0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a04a0:	b508      	push	{r3, lr}
 80a04a2:	4b02      	ldr	r3, [pc, #8]	; (80a04ac <network_connect+0xc>)
 80a04a4:	681b      	ldr	r3, [r3, #0]
 80a04a6:	685b      	ldr	r3, [r3, #4]
 80a04a8:	9301      	str	r3, [sp, #4]
 80a04aa:	bd08      	pop	{r3, pc}
 80a04ac:	080601c8 	.word	0x080601c8

080a04b0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a04b0:	b508      	push	{r3, lr}
 80a04b2:	4b02      	ldr	r3, [pc, #8]	; (80a04bc <network_connecting+0xc>)
 80a04b4:	681b      	ldr	r3, [r3, #0]
 80a04b6:	689b      	ldr	r3, [r3, #8]
 80a04b8:	9301      	str	r3, [sp, #4]
 80a04ba:	bd08      	pop	{r3, pc}
 80a04bc:	080601c8 	.word	0x080601c8

080a04c0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a04c0:	b508      	push	{r3, lr}
 80a04c2:	4b02      	ldr	r3, [pc, #8]	; (80a04cc <network_disconnect+0xc>)
 80a04c4:	681b      	ldr	r3, [r3, #0]
 80a04c6:	68db      	ldr	r3, [r3, #12]
 80a04c8:	9301      	str	r3, [sp, #4]
 80a04ca:	bd08      	pop	{r3, pc}
 80a04cc:	080601c8 	.word	0x080601c8

080a04d0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a04d0:	b508      	push	{r3, lr}
 80a04d2:	4b02      	ldr	r3, [pc, #8]	; (80a04dc <network_ready+0xc>)
 80a04d4:	681b      	ldr	r3, [r3, #0]
 80a04d6:	691b      	ldr	r3, [r3, #16]
 80a04d8:	9301      	str	r3, [sp, #4]
 80a04da:	bd08      	pop	{r3, pc}
 80a04dc:	080601c8 	.word	0x080601c8

080a04e0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a04e0:	b508      	push	{r3, lr}
 80a04e2:	4b02      	ldr	r3, [pc, #8]	; (80a04ec <network_on+0xc>)
 80a04e4:	681b      	ldr	r3, [r3, #0]
 80a04e6:	695b      	ldr	r3, [r3, #20]
 80a04e8:	9301      	str	r3, [sp, #4]
 80a04ea:	bd08      	pop	{r3, pc}
 80a04ec:	080601c8 	.word	0x080601c8

080a04f0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a04f0:	b508      	push	{r3, lr}
 80a04f2:	4b02      	ldr	r3, [pc, #8]	; (80a04fc <network_off+0xc>)
 80a04f4:	681b      	ldr	r3, [r3, #0]
 80a04f6:	699b      	ldr	r3, [r3, #24]
 80a04f8:	9301      	str	r3, [sp, #4]
 80a04fa:	bd08      	pop	{r3, pc}
 80a04fc:	080601c8 	.word	0x080601c8

080a0500 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0500:	b508      	push	{r3, lr}
 80a0502:	4b02      	ldr	r3, [pc, #8]	; (80a050c <network_listen+0xc>)
 80a0504:	681b      	ldr	r3, [r3, #0]
 80a0506:	69db      	ldr	r3, [r3, #28]
 80a0508:	9301      	str	r3, [sp, #4]
 80a050a:	bd08      	pop	{r3, pc}
 80a050c:	080601c8 	.word	0x080601c8

080a0510 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0510:	b508      	push	{r3, lr}
 80a0512:	4b02      	ldr	r3, [pc, #8]	; (80a051c <network_listening+0xc>)
 80a0514:	681b      	ldr	r3, [r3, #0]
 80a0516:	6a1b      	ldr	r3, [r3, #32]
 80a0518:	9301      	str	r3, [sp, #4]
 80a051a:	bd08      	pop	{r3, pc}
 80a051c:	080601c8 	.word	0x080601c8

080a0520 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0520:	b508      	push	{r3, lr}
 80a0522:	4b02      	ldr	r3, [pc, #8]	; (80a052c <network_set_listen_timeout+0xc>)
 80a0524:	681b      	ldr	r3, [r3, #0]
 80a0526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0528:	9301      	str	r3, [sp, #4]
 80a052a:	bd08      	pop	{r3, pc}
 80a052c:	080601c8 	.word	0x080601c8

080a0530 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0530:	b508      	push	{r3, lr}
 80a0532:	4b02      	ldr	r3, [pc, #8]	; (80a053c <network_get_listen_timeout+0xc>)
 80a0534:	681b      	ldr	r3, [r3, #0]
 80a0536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0538:	9301      	str	r3, [sp, #4]
 80a053a:	bd08      	pop	{r3, pc}
 80a053c:	080601c8 	.word	0x080601c8

080a0540 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0540:	b508      	push	{r3, lr}
 80a0542:	4b02      	ldr	r3, [pc, #8]	; (80a054c <malloc+0xc>)
 80a0544:	681b      	ldr	r3, [r3, #0]
 80a0546:	681b      	ldr	r3, [r3, #0]
 80a0548:	9301      	str	r3, [sp, #4]
 80a054a:	bd08      	pop	{r3, pc}
 80a054c:	080601a0 	.word	0x080601a0

080a0550 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0550:	b508      	push	{r3, lr}
 80a0552:	4b02      	ldr	r3, [pc, #8]	; (80a055c <free+0xc>)
 80a0554:	681b      	ldr	r3, [r3, #0]
 80a0556:	685b      	ldr	r3, [r3, #4]
 80a0558:	9301      	str	r3, [sp, #4]
 80a055a:	bd08      	pop	{r3, pc}
 80a055c:	080601a0 	.word	0x080601a0

080a0560 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a0560:	b508      	push	{r3, lr}
 80a0562:	4b02      	ldr	r3, [pc, #8]	; (80a056c <abort+0xc>)
 80a0564:	681b      	ldr	r3, [r3, #0]
 80a0566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0568:	9301      	str	r3, [sp, #4]
 80a056a:	bd08      	pop	{r3, pc}
 80a056c:	080601a0 	.word	0x080601a0

080a0570 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0570:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0572:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0574:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0576:	b113      	cbz	r3, 80a057e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0578:	2203      	movs	r2, #3
 80a057a:	4601      	mov	r1, r0
 80a057c:	4798      	blx	r3
    }
 80a057e:	4620      	mov	r0, r4
 80a0580:	bd10      	pop	{r4, pc}

080a0582 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a0582:	4770      	bx	lr

080a0584 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0586:	4606      	mov	r6, r0
 80a0588:	4615      	mov	r5, r2
 80a058a:	460c      	mov	r4, r1
 80a058c:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a058e:	42bc      	cmp	r4, r7
 80a0590:	d006      	beq.n	80a05a0 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0592:	6833      	ldr	r3, [r6, #0]
 80a0594:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0598:	689b      	ldr	r3, [r3, #8]
 80a059a:	4630      	mov	r0, r6
 80a059c:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a059e:	e7f6      	b.n	80a058e <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a05a0:	4628      	mov	r0, r5
 80a05a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a05a4 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a05a4:	2200      	movs	r2, #0
 80a05a6:	7c00      	ldrb	r0, [r0, #16]
 80a05a8:	f7ff be8c 	b.w	80a02c4 <HAL_I2C_Write_Data>

080a05ac <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a05ac:	2100      	movs	r1, #0
 80a05ae:	7c00      	ldrb	r0, [r0, #16]
 80a05b0:	f7ff be90 	b.w	80a02d4 <HAL_I2C_Available_Data>

080a05b4 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a05b4:	2100      	movs	r1, #0
 80a05b6:	7c00      	ldrb	r0, [r0, #16]
 80a05b8:	f7ff be94 	b.w	80a02e4 <HAL_I2C_Read_Data>

080a05bc <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a05bc:	2100      	movs	r1, #0
 80a05be:	7c00      	ldrb	r0, [r0, #16]
 80a05c0:	f7ff be98 	b.w	80a02f4 <HAL_I2C_Peek_Data>

080a05c4 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a05c4:	2100      	movs	r1, #0
 80a05c6:	7c00      	ldrb	r0, [r0, #16]
 80a05c8:	f7ff be9c 	b.w	80a0304 <HAL_I2C_Flush_Data>

080a05cc <_ZN7TwoWireD0Ev>:
 80a05cc:	b510      	push	{r4, lr}
 80a05ce:	4604      	mov	r4, r0
 80a05d0:	2114      	movs	r1, #20
 80a05d2:	f000 fc90 	bl	80a0ef6 <_ZdlPvj>
 80a05d6:	4620      	mov	r0, r4
 80a05d8:	bd10      	pop	{r4, pc}
	...

080a05dc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a05dc:	b510      	push	{r4, lr}
 80a05de:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a05e0:	2300      	movs	r3, #0
 80a05e2:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a05e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a05e8:	60a3      	str	r3, [r4, #8]
 80a05ea:	4b04      	ldr	r3, [pc, #16]	; (80a05fc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a05ec:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a05ee:	4608      	mov	r0, r1
 80a05f0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a05f2:	4611      	mov	r1, r2
 80a05f4:	f7ff fe96 	bl	80a0324 <HAL_I2C_Init>
}
 80a05f8:	4620      	mov	r0, r4
 80a05fa:	bd10      	pop	{r4, pc}
 80a05fc:	080a130c 	.word	0x080a130c

080a0600 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a0600:	2100      	movs	r1, #0
 80a0602:	7c00      	ldrb	r0, [r0, #16]
 80a0604:	f7ff be86 	b.w	80a0314 <HAL_I2C_Is_Enabled>

080a0608 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0608:	4770      	bx	lr

080a060a <_ZN9IPAddressD0Ev>:
 80a060a:	b510      	push	{r4, lr}
 80a060c:	4604      	mov	r4, r0
 80a060e:	2118      	movs	r1, #24
 80a0610:	f000 fc71 	bl	80a0ef6 <_ZdlPvj>
 80a0614:	4620      	mov	r0, r4
 80a0616:	bd10      	pop	{r4, pc}

080a0618 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a061a:	460f      	mov	r7, r1
 80a061c:	f100 0608 	add.w	r6, r0, #8
 80a0620:	1d05      	adds	r5, r0, #4
 80a0622:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a0624:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0628:	220a      	movs	r2, #10
 80a062a:	4638      	mov	r0, r7
 80a062c:	f000 f8e7 	bl	80a07fe <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0630:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0632:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0634:	d007      	beq.n	80a0646 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0636:	2c00      	cmp	r4, #0
 80a0638:	d0f4      	beq.n	80a0624 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a063a:	212e      	movs	r1, #46	; 0x2e
 80a063c:	4638      	mov	r0, r7
 80a063e:	f000 f8db 	bl	80a07f8 <_ZN5Print5printEc>
 80a0642:	4404      	add	r4, r0
 80a0644:	e7ee      	b.n	80a0624 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0646:	4620      	mov	r0, r4
 80a0648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a064c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a064c:	b510      	push	{r4, lr}
 80a064e:	4604      	mov	r4, r0
 80a0650:	4b04      	ldr	r3, [pc, #16]	; (80a0664 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0652:	2211      	movs	r2, #17
 80a0654:	f840 3b04 	str.w	r3, [r0], #4
 80a0658:	2100      	movs	r1, #0
 80a065a:	f000 fdef 	bl	80a123c <memset>
{
    clear();
}
 80a065e:	4620      	mov	r0, r4
 80a0660:	bd10      	pop	{r4, pc}
 80a0662:	bf00      	nop
 80a0664:	080a1334 	.word	0x080a1334

080a0668 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0668:	4603      	mov	r3, r0
 80a066a:	4a07      	ldr	r2, [pc, #28]	; (80a0688 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a066c:	b510      	push	{r4, lr}
 80a066e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a0672:	f101 0210 	add.w	r2, r1, #16
 80a0676:	f851 4b04 	ldr.w	r4, [r1], #4
 80a067a:	4291      	cmp	r1, r2
 80a067c:	f843 4b04 	str.w	r4, [r3], #4
 80a0680:	d1f9      	bne.n	80a0676 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0682:	780a      	ldrb	r2, [r1, #0]
 80a0684:	701a      	strb	r2, [r3, #0]
}
 80a0686:	bd10      	pop	{r4, pc}
 80a0688:	080a1334 	.word	0x080a1334

080a068c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a068c:	4a02      	ldr	r2, [pc, #8]	; (80a0698 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a068e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0690:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0692:	2204      	movs	r2, #4
 80a0694:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a0696:	4770      	bx	lr
 80a0698:	080a1334 	.word	0x080a1334

080a069c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a069c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a069e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a06a2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a06a6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a06aa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a06ae:	2304      	movs	r3, #4
 80a06b0:	6041      	str	r1, [r0, #4]
 80a06b2:	7503      	strb	r3, [r0, #20]
 80a06b4:	bd10      	pop	{r4, pc}
	...

080a06b8 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a06b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a06ba:	4d04      	ldr	r5, [pc, #16]	; (80a06cc <_ZN9IPAddressC1Ehhhh+0x14>)
 80a06bc:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a06be:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a06c2:	9500      	str	r5, [sp, #0]
 80a06c4:	f7ff ffea 	bl	80a069c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a06c8:	b003      	add	sp, #12
 80a06ca:	bd30      	pop	{r4, r5, pc}
 80a06cc:	080a1334 	.word	0x080a1334

080a06d0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a06d0:	4a01      	ldr	r2, [pc, #4]	; (80a06d8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a06d2:	4b02      	ldr	r3, [pc, #8]	; (80a06dc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a06d4:	601a      	str	r2, [r3, #0]
 80a06d6:	4770      	bx	lr
 80a06d8:	080a13b6 	.word	0x080a13b6
 80a06dc:	20000074 	.word	0x20000074

080a06e0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a06e0:	2300      	movs	r3, #0
 80a06e2:	461a      	mov	r2, r3
 80a06e4:	6840      	ldr	r0, [r0, #4]
 80a06e6:	f7ff bedb 	b.w	80a04a0 <network_connect>

080a06ea <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a06ea:	2200      	movs	r2, #0
 80a06ec:	2102      	movs	r1, #2
 80a06ee:	6840      	ldr	r0, [r0, #4]
 80a06f0:	f7ff bee6 	b.w	80a04c0 <network_disconnect>

080a06f4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a06f4:	2200      	movs	r2, #0
 80a06f6:	4611      	mov	r1, r2
 80a06f8:	6840      	ldr	r0, [r0, #4]
 80a06fa:	f7ff bed9 	b.w	80a04b0 <network_connecting>

080a06fe <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a06fe:	2200      	movs	r2, #0
 80a0700:	4611      	mov	r1, r2
 80a0702:	6840      	ldr	r0, [r0, #4]
 80a0704:	f7ff bee4 	b.w	80a04d0 <network_ready>

080a0708 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0708:	2300      	movs	r3, #0
 80a070a:	461a      	mov	r2, r3
 80a070c:	4619      	mov	r1, r3
 80a070e:	6840      	ldr	r0, [r0, #4]
 80a0710:	f7ff bee6 	b.w	80a04e0 <network_on>

080a0714 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0714:	2300      	movs	r3, #0
 80a0716:	461a      	mov	r2, r3
 80a0718:	4619      	mov	r1, r3
 80a071a:	6840      	ldr	r0, [r0, #4]
 80a071c:	f7ff bee8 	b.w	80a04f0 <network_off>

080a0720 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0720:	2200      	movs	r2, #0
 80a0722:	f081 0101 	eor.w	r1, r1, #1
 80a0726:	6840      	ldr	r0, [r0, #4]
 80a0728:	f7ff beea 	b.w	80a0500 <network_listen>

080a072c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a072c:	2200      	movs	r2, #0
 80a072e:	6840      	ldr	r0, [r0, #4]
 80a0730:	f7ff bef6 	b.w	80a0520 <network_set_listen_timeout>

080a0734 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0734:	2200      	movs	r2, #0
 80a0736:	4611      	mov	r1, r2
 80a0738:	6840      	ldr	r0, [r0, #4]
 80a073a:	f7ff bef9 	b.w	80a0530 <network_get_listen_timeout>

080a073e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a073e:	2200      	movs	r2, #0
 80a0740:	4611      	mov	r1, r2
 80a0742:	6840      	ldr	r0, [r0, #4]
 80a0744:	f7ff bee4 	b.w	80a0510 <network_listening>

080a0748 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0748:	b570      	push	{r4, r5, r6, lr}
 80a074a:	4616      	mov	r6, r2
 80a074c:	b08e      	sub	sp, #56	; 0x38
 80a074e:	4604      	mov	r4, r0
    IPAddress addr;
 80a0750:	a808      	add	r0, sp, #32
 80a0752:	f7ff ff7b 	bl	80a064c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0756:	2211      	movs	r2, #17
 80a0758:	2100      	movs	r1, #0
 80a075a:	a803      	add	r0, sp, #12
 80a075c:	f000 fd6e 	bl	80a123c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0760:	4630      	mov	r0, r6
 80a0762:	f000 fd9b 	bl	80a129c <strlen>
 80a0766:	2500      	movs	r5, #0
 80a0768:	4b0a      	ldr	r3, [pc, #40]	; (80a0794 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a076a:	9500      	str	r5, [sp, #0]
 80a076c:	b281      	uxth	r1, r0
 80a076e:	685b      	ldr	r3, [r3, #4]
 80a0770:	aa03      	add	r2, sp, #12
 80a0772:	4630      	mov	r0, r6
 80a0774:	f7ff fe68 	bl	80a0448 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0778:	b120      	cbz	r0, 80a0784 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a077a:	4629      	mov	r1, r5
 80a077c:	4620      	mov	r0, r4
 80a077e:	f7ff ff85 	bl	80a068c <_ZN9IPAddressC1Em>
 80a0782:	e003      	b.n	80a078c <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0784:	a903      	add	r1, sp, #12
 80a0786:	4620      	mov	r0, r4
 80a0788:	f7ff ff6e 	bl	80a0668 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a078c:	4620      	mov	r0, r4
 80a078e:	b00e      	add	sp, #56	; 0x38
 80a0790:	bd70      	pop	{r4, r5, r6, pc}
 80a0792:	bf00      	nop
 80a0794:	200000f0 	.word	0x200000f0

080a0798 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0798:	4b02      	ldr	r3, [pc, #8]	; (80a07a4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a079a:	4a03      	ldr	r2, [pc, #12]	; (80a07a8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a079c:	601a      	str	r2, [r3, #0]
 80a079e:	2200      	movs	r2, #0
 80a07a0:	605a      	str	r2, [r3, #4]
 80a07a2:	4770      	bx	lr
 80a07a4:	20000078 	.word	0x20000078
 80a07a8:	080a142c 	.word	0x080a142c

080a07ac <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a07ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a07ae:	4606      	mov	r6, r0
 80a07b0:	460d      	mov	r5, r1
 80a07b2:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a07b4:	2400      	movs	r4, #0
  while (size--) {
 80a07b6:	42bd      	cmp	r5, r7
 80a07b8:	d00c      	beq.n	80a07d4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a07ba:	6833      	ldr	r3, [r6, #0]
 80a07bc:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a07c0:	689b      	ldr	r3, [r3, #8]
 80a07c2:	4630      	mov	r0, r6
 80a07c4:	4798      	blx	r3
     if (chunk>=0)
 80a07c6:	2800      	cmp	r0, #0
 80a07c8:	db01      	blt.n	80a07ce <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a07ca:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a07cc:	e7f3      	b.n	80a07b6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a07ce:	2c00      	cmp	r4, #0
 80a07d0:	bf08      	it	eq
 80a07d2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a07d4:	4620      	mov	r0, r4
 80a07d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a07d8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a07d8:	b570      	push	{r4, r5, r6, lr}
 80a07da:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a07dc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a07de:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a07e0:	b149      	cbz	r1, 80a07f6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a07e2:	f000 fd5b 	bl	80a129c <strlen>
 80a07e6:	682b      	ldr	r3, [r5, #0]
 80a07e8:	4602      	mov	r2, r0
 80a07ea:	4621      	mov	r1, r4
 80a07ec:	4628      	mov	r0, r5
    }
 80a07ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a07f2:	68db      	ldr	r3, [r3, #12]
 80a07f4:	4718      	bx	r3
    }
 80a07f6:	bd70      	pop	{r4, r5, r6, pc}

080a07f8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a07f8:	6803      	ldr	r3, [r0, #0]
 80a07fa:	689b      	ldr	r3, [r3, #8]
 80a07fc:	4718      	bx	r3

080a07fe <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a07fe:	2a01      	cmp	r2, #1
 80a0800:	bf98      	it	ls
 80a0802:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0804:	b530      	push	{r4, r5, lr}
 80a0806:	460b      	mov	r3, r1
 80a0808:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a080a:	2100      	movs	r1, #0
 80a080c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0810:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a0814:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a0818:	fb05 3312 	mls	r3, r5, r2, r3
 80a081c:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a081e:	2b09      	cmp	r3, #9
 80a0820:	bf94      	ite	ls
 80a0822:	3330      	addls	r3, #48	; 0x30
 80a0824:	3337      	addhi	r3, #55	; 0x37
 80a0826:	b2db      	uxtb	r3, r3
 80a0828:	4621      	mov	r1, r4
 80a082a:	f804 3901 	strb.w	r3, [r4], #-1
 80a082e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0830:	2d00      	cmp	r5, #0
 80a0832:	d1ef      	bne.n	80a0814 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0834:	f7ff ffd0 	bl	80a07d8 <_ZN5Print5writeEPKc>
}
 80a0838:	b00b      	add	sp, #44	; 0x2c
 80a083a:	bd30      	pop	{r4, r5, pc}

080a083c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a083c:	b510      	push	{r4, lr}
 80a083e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0840:	f7ff fe96 	bl	80a0570 <_ZNSt14_Function_baseD1Ev>
 80a0844:	4620      	mov	r0, r4
 80a0846:	bd10      	pop	{r4, pc}

080a0848 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0848:	4803      	ldr	r0, [pc, #12]	; (80a0858 <_GLOBAL__sub_I_RGB+0x10>)
 80a084a:	2300      	movs	r3, #0
 80a084c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a084e:	4a03      	ldr	r2, [pc, #12]	; (80a085c <_GLOBAL__sub_I_RGB+0x14>)
 80a0850:	4903      	ldr	r1, [pc, #12]	; (80a0860 <_GLOBAL__sub_I_RGB+0x18>)
 80a0852:	f000 bb4b 	b.w	80a0eec <__aeabi_atexit>
 80a0856:	bf00      	nop
 80a0858:	20000080 	.word	0x20000080
 80a085c:	20000068 	.word	0x20000068
 80a0860:	080a083d 	.word	0x080a083d

080a0864 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0864:	b570      	push	{r4, r5, r6, lr}
 80a0866:	4604      	mov	r4, r0
 80a0868:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a086a:	2500      	movs	r5, #0
 80a086c:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0870:	f7ff fcf8 	bl	80a0264 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a0874:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a0876:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80a0878:	f7ff fd5e 	bl	80a0338 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a087c:	6065      	str	r5, [r4, #4]
}
 80a087e:	4620      	mov	r0, r4
 80a0880:	bd70      	pop	{r4, r5, r6, pc}

080a0882 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a0882:	7800      	ldrb	r0, [r0, #0]
 80a0884:	f7ff bd60 	b.w	80a0348 <HAL_SPI_Is_Enabled>

080a0888 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a0888:	b510      	push	{r4, lr}
 80a088a:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a088c:	6800      	ldr	r0, [r0, #0]
 80a088e:	b118      	cbz	r0, 80a0898 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a0890:	f7ff fe5e 	bl	80a0550 <free>
            wakeupSource_ = nullptr;
 80a0894:	2300      	movs	r3, #0
 80a0896:	6023      	str	r3, [r4, #0]
 80a0898:	bd10      	pop	{r4, pc}

080a089a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a089a:	b510      	push	{r4, lr}
 80a089c:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a089e:	f7ff fff3 	bl	80a0888 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a08a2:	4620      	mov	r0, r4
 80a08a4:	bd10      	pop	{r4, pc}
	...

080a08a8 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a08a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a08ac:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a08ae:	4c08      	ldr	r4, [pc, #32]	; (80a08d0 <_GLOBAL__sub_I_System+0x28>)
 80a08b0:	2000      	movs	r0, #0
 80a08b2:	6020      	str	r0, [r4, #0]
 80a08b4:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a08b6:	71a0      	strb	r0, [r4, #6]
 80a08b8:	8120      	strh	r0, [r4, #8]
 80a08ba:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a08bc:	f7ff fdcc 	bl	80a0458 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a08c0:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a08c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a08c6:	4a03      	ldr	r2, [pc, #12]	; (80a08d4 <_GLOBAL__sub_I_System+0x2c>)
 80a08c8:	4903      	ldr	r1, [pc, #12]	; (80a08d8 <_GLOBAL__sub_I_System+0x30>)
 80a08ca:	f000 bb0f 	b.w	80a0eec <__aeabi_atexit>
 80a08ce:	bf00      	nop
 80a08d0:	20000090 	.word	0x20000090
 80a08d4:	20000068 	.word	0x20000068
 80a08d8:	080a089b 	.word	0x080a089b

080a08dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a08dc:	4b02      	ldr	r3, [pc, #8]	; (80a08e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a08de:	681a      	ldr	r2, [r3, #0]
 80a08e0:	4b02      	ldr	r3, [pc, #8]	; (80a08ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a08e2:	601a      	str	r2, [r3, #0]
 80a08e4:	4770      	bx	lr
 80a08e6:	bf00      	nop
 80a08e8:	20000000 	.word	0x20000000
 80a08ec:	2000009c 	.word	0x2000009c

080a08f0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a08f0:	4770      	bx	lr

080a08f2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a08f2:	7441      	strb	r1, [r0, #17]
 80a08f4:	4770      	bx	lr

080a08f6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a08f6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a08f8:	7c00      	ldrb	r0, [r0, #16]
 80a08fa:	f7ff fd65 	bl	80a03c8 <HAL_USART_Available_Data_For_Write>
}
 80a08fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0902:	bd08      	pop	{r3, pc}

080a0904 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a0904:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a0906:	7c00      	ldrb	r0, [r0, #16]
 80a0908:	f7ff fd36 	bl	80a0378 <HAL_USART_Available_Data>
}
 80a090c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0910:	bd08      	pop	{r3, pc}

080a0912 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a0912:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a0914:	7c00      	ldrb	r0, [r0, #16]
 80a0916:	f7ff fd3f 	bl	80a0398 <HAL_USART_Peek_Data>
}
 80a091a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a091e:	bf28      	it	cs
 80a0920:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0924:	bd08      	pop	{r3, pc}

080a0926 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a0926:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a0928:	7c00      	ldrb	r0, [r0, #16]
 80a092a:	f7ff fd2d 	bl	80a0388 <HAL_USART_Read_Data>
}
 80a092e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0932:	bf28      	it	cs
 80a0934:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0938:	bd08      	pop	{r3, pc}

080a093a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a093a:	7c00      	ldrb	r0, [r0, #16]
 80a093c:	f7ff bd34 	b.w	80a03a8 <HAL_USART_Flush_Data>

080a0940 <_ZN11USARTSerialD0Ev>:
 80a0940:	b510      	push	{r4, lr}
 80a0942:	4604      	mov	r4, r0
 80a0944:	2114      	movs	r1, #20
 80a0946:	f000 fad6 	bl	80a0ef6 <_ZdlPvj>
 80a094a:	4620      	mov	r0, r4
 80a094c:	bd10      	pop	{r4, pc}

080a094e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a094e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0950:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a0952:	4604      	mov	r4, r0
 80a0954:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0956:	b925      	cbnz	r5, 80a0962 <_ZN11USARTSerial5writeEh+0x14>
 80a0958:	7c00      	ldrb	r0, [r0, #16]
 80a095a:	f7ff fd35 	bl	80a03c8 <HAL_USART_Available_Data_For_Write>
 80a095e:	2800      	cmp	r0, #0
 80a0960:	dd05      	ble.n	80a096e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0962:	4631      	mov	r1, r6
 80a0964:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0966:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a096a:	f7ff bcfd 	b.w	80a0368 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a096e:	4628      	mov	r0, r5
 80a0970:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0974 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0974:	b510      	push	{r4, lr}
 80a0976:	4604      	mov	r4, r0
 80a0978:	4608      	mov	r0, r1
 80a097a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a097c:	2200      	movs	r2, #0
 80a097e:	6062      	str	r2, [r4, #4]
 80a0980:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0984:	60a2      	str	r2, [r4, #8]
 80a0986:	4a05      	ldr	r2, [pc, #20]	; (80a099c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a0988:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a098a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a098c:	2201      	movs	r2, #1
 80a098e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a0990:	461a      	mov	r2, r3
 80a0992:	f7ff fce1 	bl	80a0358 <HAL_USART_Init>
}
 80a0996:	4620      	mov	r0, r4
 80a0998:	bd10      	pop	{r4, pc}
 80a099a:	bf00      	nop
 80a099c:	080a148c 	.word	0x080a148c

080a09a0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a09a0:	7c00      	ldrb	r0, [r0, #16]
 80a09a2:	f7ff bd09 	b.w	80a03b8 <HAL_USART_Is_Enabled>
	...

080a09a8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a09a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a09aa:	4c19      	ldr	r4, [pc, #100]	; (80a0a10 <_Z22__fetch_global_Serial1v+0x68>)
 80a09ac:	6825      	ldr	r5, [r4, #0]
 80a09ae:	b94d      	cbnz	r5, 80a09c4 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a09b0:	2084      	movs	r0, #132	; 0x84
 80a09b2:	f7ff fb72 	bl	80a009a <_Znwj>
 80a09b6:	4606      	mov	r6, r0
 80a09b8:	b118      	cbz	r0, 80a09c2 <_Z22__fetch_global_Serial1v+0x1a>
 80a09ba:	2284      	movs	r2, #132	; 0x84
 80a09bc:	4629      	mov	r1, r5
 80a09be:	f000 fc3d 	bl	80a123c <memset>
 80a09c2:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a09c4:	4d13      	ldr	r5, [pc, #76]	; (80a0a14 <_Z22__fetch_global_Serial1v+0x6c>)
 80a09c6:	682e      	ldr	r6, [r5, #0]
 80a09c8:	b94e      	cbnz	r6, 80a09de <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a09ca:	2084      	movs	r0, #132	; 0x84
 80a09cc:	f7ff fb65 	bl	80a009a <_Znwj>
 80a09d0:	4607      	mov	r7, r0
 80a09d2:	b118      	cbz	r0, 80a09dc <_Z22__fetch_global_Serial1v+0x34>
 80a09d4:	2284      	movs	r2, #132	; 0x84
 80a09d6:	4631      	mov	r1, r6
 80a09d8:	f000 fc30 	bl	80a123c <memset>
 80a09dc:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a09de:	4f0e      	ldr	r7, [pc, #56]	; (80a0a18 <_Z22__fetch_global_Serial1v+0x70>)
 80a09e0:	6839      	ldr	r1, [r7, #0]
 80a09e2:	f011 0601 	ands.w	r6, r1, #1
 80a09e6:	d111      	bne.n	80a0a0c <_Z22__fetch_global_Serial1v+0x64>
 80a09e8:	4638      	mov	r0, r7
 80a09ea:	f7ff fb5a 	bl	80a00a2 <__cxa_guard_acquire>
 80a09ee:	b168      	cbz	r0, 80a0a0c <_Z22__fetch_global_Serial1v+0x64>
 80a09f0:	6822      	ldr	r2, [r4, #0]
 80a09f2:	4631      	mov	r1, r6
 80a09f4:	682b      	ldr	r3, [r5, #0]
 80a09f6:	4809      	ldr	r0, [pc, #36]	; (80a0a1c <_Z22__fetch_global_Serial1v+0x74>)
 80a09f8:	f7ff ffbc 	bl	80a0974 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a09fc:	4638      	mov	r0, r7
 80a09fe:	f7ff fb55 	bl	80a00ac <__cxa_guard_release>
 80a0a02:	4a07      	ldr	r2, [pc, #28]	; (80a0a20 <_Z22__fetch_global_Serial1v+0x78>)
 80a0a04:	4907      	ldr	r1, [pc, #28]	; (80a0a24 <_Z22__fetch_global_Serial1v+0x7c>)
 80a0a06:	4805      	ldr	r0, [pc, #20]	; (80a0a1c <_Z22__fetch_global_Serial1v+0x74>)
 80a0a08:	f000 fa70 	bl	80a0eec <__aeabi_atexit>
#endif
	return serial1;
}
 80a0a0c:	4803      	ldr	r0, [pc, #12]	; (80a0a1c <_Z22__fetch_global_Serial1v+0x74>)
 80a0a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0a10:	200000bc 	.word	0x200000bc
 80a0a14:	200000b4 	.word	0x200000b4
 80a0a18:	200000b8 	.word	0x200000b8
 80a0a1c:	200000a0 	.word	0x200000a0
 80a0a20:	20000068 	.word	0x20000068
 80a0a24:	080a08f1 	.word	0x080a08f1

080a0a28 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0a28:	7441      	strb	r1, [r0, #17]
 80a0a2a:	4770      	bx	lr

080a0a2c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0a2c:	4770      	bx	lr

080a0a2e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a0a2e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0a30:	2100      	movs	r1, #0
 80a0a32:	7c00      	ldrb	r0, [r0, #16]
 80a0a34:	f7ff fcf0 	bl	80a0418 <HAL_USB_USART_Receive_Data>
}
 80a0a38:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0a3c:	bf28      	it	cs
 80a0a3e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0a42:	bd08      	pop	{r3, pc}

080a0a44 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a0a44:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0a46:	2101      	movs	r1, #1
 80a0a48:	7c00      	ldrb	r0, [r0, #16]
 80a0a4a:	f7ff fce5 	bl	80a0418 <HAL_USB_USART_Receive_Data>
}
 80a0a4e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0a52:	bf28      	it	cs
 80a0a54:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0a58:	bd08      	pop	{r3, pc}

080a0a5a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a0a5a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0a5c:	7c00      	ldrb	r0, [r0, #16]
 80a0a5e:	f7ff fcd3 	bl	80a0408 <HAL_USB_USART_Available_Data_For_Write>
}
 80a0a62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0a66:	bd08      	pop	{r3, pc}

080a0a68 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a0a68:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0a6a:	7c00      	ldrb	r0, [r0, #16]
 80a0a6c:	f7ff fcc4 	bl	80a03f8 <HAL_USB_USART_Available_Data>
}
 80a0a70:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0a74:	bd08      	pop	{r3, pc}

080a0a76 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a0a76:	7c00      	ldrb	r0, [r0, #16]
 80a0a78:	f7ff bcde 	b.w	80a0438 <HAL_USB_USART_Flush_Data>

080a0a7c <_ZN9USBSerialD0Ev>:
 80a0a7c:	b510      	push	{r4, lr}
 80a0a7e:	4604      	mov	r4, r0
 80a0a80:	2114      	movs	r1, #20
 80a0a82:	f000 fa38 	bl	80a0ef6 <_ZdlPvj>
 80a0a86:	4620      	mov	r0, r4
 80a0a88:	bd10      	pop	{r4, pc}

080a0a8a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0a8a:	b538      	push	{r3, r4, r5, lr}
 80a0a8c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0a8e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0a90:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0a92:	f7ff fcb9 	bl	80a0408 <HAL_USB_USART_Available_Data_For_Write>
 80a0a96:	2800      	cmp	r0, #0
 80a0a98:	dc01      	bgt.n	80a0a9e <_ZN9USBSerial5writeEh+0x14>
 80a0a9a:	7c60      	ldrb	r0, [r4, #17]
 80a0a9c:	b128      	cbz	r0, 80a0aaa <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0a9e:	4629      	mov	r1, r5
 80a0aa0:	7c20      	ldrb	r0, [r4, #16]
 80a0aa2:	f7ff fcc1 	bl	80a0428 <HAL_USB_USART_Send_Data>
 80a0aa6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a0aaa:	bd38      	pop	{r3, r4, r5, pc}

080a0aac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0aac:	b510      	push	{r4, lr}
 80a0aae:	4604      	mov	r4, r0
 80a0ab0:	2300      	movs	r3, #0
 80a0ab2:	6063      	str	r3, [r4, #4]
 80a0ab4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0ab8:	60a3      	str	r3, [r4, #8]
 80a0aba:	4b05      	ldr	r3, [pc, #20]	; (80a0ad0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a0abc:	4608      	mov	r0, r1
 80a0abe:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a0ac0:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a0ac2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a0ac4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a0ac6:	4611      	mov	r1, r2
 80a0ac8:	f7ff fc86 	bl	80a03d8 <HAL_USB_USART_Init>
}
 80a0acc:	4620      	mov	r0, r4
 80a0ace:	bd10      	pop	{r4, pc}
 80a0ad0:	080a14bc 	.word	0x080a14bc

080a0ad4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a0ad4:	2200      	movs	r2, #0
 80a0ad6:	7c00      	ldrb	r0, [r0, #16]
 80a0ad8:	f7ff bc86 	b.w	80a03e8 <HAL_USB_USART_Begin>

080a0adc <_Z19acquireSerialBufferv>:
 80a0adc:	b510      	push	{r4, lr}
 80a0ade:	4604      	mov	r4, r0
 80a0ae0:	2214      	movs	r2, #20
 80a0ae2:	2100      	movs	r1, #0
 80a0ae4:	f000 fbaa 	bl	80a123c <memset>
 80a0ae8:	4620      	mov	r0, r4
 80a0aea:	bd10      	pop	{r4, pc}

080a0aec <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0aec:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0aee:	4d0e      	ldr	r5, [pc, #56]	; (80a0b28 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0af0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0af2:	a801      	add	r0, sp, #4
 80a0af4:	f7ff fff2 	bl	80a0adc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0af8:	6829      	ldr	r1, [r5, #0]
 80a0afa:	f011 0401 	ands.w	r4, r1, #1
 80a0afe:	d110      	bne.n	80a0b22 <_Z16_fetch_usbserialv+0x36>
 80a0b00:	4628      	mov	r0, r5
 80a0b02:	f7ff face 	bl	80a00a2 <__cxa_guard_acquire>
 80a0b06:	b160      	cbz	r0, 80a0b22 <_Z16_fetch_usbserialv+0x36>
 80a0b08:	aa01      	add	r2, sp, #4
 80a0b0a:	4621      	mov	r1, r4
 80a0b0c:	4807      	ldr	r0, [pc, #28]	; (80a0b2c <_Z16_fetch_usbserialv+0x40>)
 80a0b0e:	f7ff ffcd 	bl	80a0aac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0b12:	4628      	mov	r0, r5
 80a0b14:	f7ff faca 	bl	80a00ac <__cxa_guard_release>
 80a0b18:	4a05      	ldr	r2, [pc, #20]	; (80a0b30 <_Z16_fetch_usbserialv+0x44>)
 80a0b1a:	4906      	ldr	r1, [pc, #24]	; (80a0b34 <_Z16_fetch_usbserialv+0x48>)
 80a0b1c:	4803      	ldr	r0, [pc, #12]	; (80a0b2c <_Z16_fetch_usbserialv+0x40>)
 80a0b1e:	f000 f9e5 	bl	80a0eec <__aeabi_atexit>
	return _usbserial;
}
 80a0b22:	4802      	ldr	r0, [pc, #8]	; (80a0b2c <_Z16_fetch_usbserialv+0x40>)
 80a0b24:	b007      	add	sp, #28
 80a0b26:	bd30      	pop	{r4, r5, pc}
 80a0b28:	200000c0 	.word	0x200000c0
 80a0b2c:	200000c8 	.word	0x200000c8
 80a0b30:	20000068 	.word	0x20000068
 80a0b34:	080a0a2d 	.word	0x080a0a2d

080a0b38 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0b38:	b510      	push	{r4, lr}
 80a0b3a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0b3c:	2214      	movs	r2, #20
 80a0b3e:	2100      	movs	r1, #0
 80a0b40:	f000 fb7c 	bl	80a123c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0b44:	4620      	mov	r0, r4
 80a0b46:	bd10      	pop	{r4, pc}

080a0b48 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0b48:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0b4a:	4c0e      	ldr	r4, [pc, #56]	; (80a0b84 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0b4c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0b4e:	a801      	add	r0, sp, #4
 80a0b50:	f7ff fff2 	bl	80a0b38 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0b54:	6823      	ldr	r3, [r4, #0]
 80a0b56:	07db      	lsls	r3, r3, #31
 80a0b58:	d410      	bmi.n	80a0b7c <_Z17_fetch_usbserial1v+0x34>
 80a0b5a:	4620      	mov	r0, r4
 80a0b5c:	f7ff faa1 	bl	80a00a2 <__cxa_guard_acquire>
 80a0b60:	b160      	cbz	r0, 80a0b7c <_Z17_fetch_usbserial1v+0x34>
 80a0b62:	aa01      	add	r2, sp, #4
 80a0b64:	2101      	movs	r1, #1
 80a0b66:	4808      	ldr	r0, [pc, #32]	; (80a0b88 <_Z17_fetch_usbserial1v+0x40>)
 80a0b68:	f7ff ffa0 	bl	80a0aac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0b6c:	4620      	mov	r0, r4
 80a0b6e:	f7ff fa9d 	bl	80a00ac <__cxa_guard_release>
 80a0b72:	4a06      	ldr	r2, [pc, #24]	; (80a0b8c <_Z17_fetch_usbserial1v+0x44>)
 80a0b74:	4906      	ldr	r1, [pc, #24]	; (80a0b90 <_Z17_fetch_usbserial1v+0x48>)
 80a0b76:	4804      	ldr	r0, [pc, #16]	; (80a0b88 <_Z17_fetch_usbserial1v+0x40>)
 80a0b78:	f000 f9b8 	bl	80a0eec <__aeabi_atexit>
  return _usbserial1;
}
 80a0b7c:	4802      	ldr	r0, [pc, #8]	; (80a0b88 <_Z17_fetch_usbserial1v+0x40>)
 80a0b7e:	b006      	add	sp, #24
 80a0b80:	bd10      	pop	{r4, pc}
 80a0b82:	bf00      	nop
 80a0b84:	200000c4 	.word	0x200000c4
 80a0b88:	200000dc 	.word	0x200000dc
 80a0b8c:	20000068 	.word	0x20000068
 80a0b90:	080a0a2d 	.word	0x080a0a2d

080a0b94 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0b94:	2200      	movs	r2, #0
 80a0b96:	4611      	mov	r1, r2
 80a0b98:	6840      	ldr	r0, [r0, #4]
 80a0b9a:	f7ff bc99 	b.w	80a04d0 <network_ready>

080a0b9e <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0b9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0ba0:	4616      	mov	r6, r2
 80a0ba2:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a0ba4:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0ba6:	460f      	mov	r7, r1
 80a0ba8:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a0baa:	2100      	movs	r1, #0
 80a0bac:	a803      	add	r0, sp, #12
 80a0bae:	f000 fb45 	bl	80a123c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0bb2:	4630      	mov	r0, r6
 80a0bb4:	f000 fb72 	bl	80a129c <strlen>
 80a0bb8:	2500      	movs	r5, #0
 80a0bba:	9500      	str	r5, [sp, #0]
 80a0bbc:	b281      	uxth	r1, r0
 80a0bbe:	687b      	ldr	r3, [r7, #4]
 80a0bc0:	aa03      	add	r2, sp, #12
 80a0bc2:	4630      	mov	r0, r6
 80a0bc4:	f7ff fc40 	bl	80a0448 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0bc8:	b120      	cbz	r0, 80a0bd4 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a0bca:	4629      	mov	r1, r5
 80a0bcc:	4620      	mov	r0, r4
 80a0bce:	f7ff fd5d 	bl	80a068c <_ZN9IPAddressC1Em>
 80a0bd2:	e003      	b.n	80a0bdc <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a0bd4:	a903      	add	r1, sp, #12
 80a0bd6:	4620      	mov	r0, r4
 80a0bd8:	f7ff fd46 	bl	80a0668 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a0bdc:	4620      	mov	r0, r4
 80a0bde:	b009      	add	sp, #36	; 0x24
 80a0be0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0be2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a0be2:	2200      	movs	r2, #0
 80a0be4:	4611      	mov	r1, r2
 80a0be6:	6840      	ldr	r0, [r0, #4]
 80a0be8:	f7ff bc92 	b.w	80a0510 <network_listening>

080a0bec <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a0bec:	2200      	movs	r2, #0
 80a0bee:	4611      	mov	r1, r2
 80a0bf0:	6840      	ldr	r0, [r0, #4]
 80a0bf2:	f7ff bc9d 	b.w	80a0530 <network_get_listen_timeout>

080a0bf6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a0bf6:	2200      	movs	r2, #0
 80a0bf8:	6840      	ldr	r0, [r0, #4]
 80a0bfa:	f7ff bc91 	b.w	80a0520 <network_set_listen_timeout>

080a0bfe <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0bfe:	2200      	movs	r2, #0
 80a0c00:	f081 0101 	eor.w	r1, r1, #1
 80a0c04:	6840      	ldr	r0, [r0, #4]
 80a0c06:	f7ff bc7b 	b.w	80a0500 <network_listen>

080a0c0a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a0c0a:	2300      	movs	r3, #0
 80a0c0c:	461a      	mov	r2, r3
 80a0c0e:	4619      	mov	r1, r3
 80a0c10:	6840      	ldr	r0, [r0, #4]
 80a0c12:	f7ff bc6d 	b.w	80a04f0 <network_off>

080a0c16 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0c16:	2300      	movs	r3, #0
 80a0c18:	461a      	mov	r2, r3
 80a0c1a:	4619      	mov	r1, r3
 80a0c1c:	6840      	ldr	r0, [r0, #4]
 80a0c1e:	f7ff bc5f 	b.w	80a04e0 <network_on>

080a0c22 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a0c22:	2200      	movs	r2, #0
 80a0c24:	4611      	mov	r1, r2
 80a0c26:	6840      	ldr	r0, [r0, #4]
 80a0c28:	f7ff bc42 	b.w	80a04b0 <network_connecting>

080a0c2c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0c2c:	2200      	movs	r2, #0
 80a0c2e:	2102      	movs	r1, #2
 80a0c30:	6840      	ldr	r0, [r0, #4]
 80a0c32:	f7ff bc45 	b.w	80a04c0 <network_disconnect>

080a0c36 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0c36:	2300      	movs	r3, #0
 80a0c38:	461a      	mov	r2, r3
 80a0c3a:	6840      	ldr	r0, [r0, #4]
 80a0c3c:	f7ff bc30 	b.w	80a04a0 <network_connect>

080a0c40 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a0c40:	4b02      	ldr	r3, [pc, #8]	; (80a0c4c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0c42:	2204      	movs	r2, #4
 80a0c44:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0c46:	4a02      	ldr	r2, [pc, #8]	; (80a0c50 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0c48:	601a      	str	r2, [r3, #0]
 80a0c4a:	4770      	bx	lr
 80a0c4c:	200000f0 	.word	0x200000f0
 80a0c50:	080a14ec 	.word	0x080a14ec

080a0c54 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0c54:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0c56:	4b14      	ldr	r3, [pc, #80]	; (80a0ca8 <serialEventRun+0x54>)
 80a0c58:	b133      	cbz	r3, 80a0c68 <serialEventRun+0x14>
 80a0c5a:	f7ff ff47 	bl	80a0aec <_Z16_fetch_usbserialv>
 80a0c5e:	6803      	ldr	r3, [r0, #0]
 80a0c60:	691b      	ldr	r3, [r3, #16]
 80a0c62:	4798      	blx	r3
 80a0c64:	2800      	cmp	r0, #0
 80a0c66:	dc16      	bgt.n	80a0c96 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0c68:	4b10      	ldr	r3, [pc, #64]	; (80a0cac <serialEventRun+0x58>)
 80a0c6a:	b133      	cbz	r3, 80a0c7a <serialEventRun+0x26>
 80a0c6c:	f7ff fe9c 	bl	80a09a8 <_Z22__fetch_global_Serial1v>
 80a0c70:	6803      	ldr	r3, [r0, #0]
 80a0c72:	691b      	ldr	r3, [r3, #16]
 80a0c74:	4798      	blx	r3
 80a0c76:	2800      	cmp	r0, #0
 80a0c78:	dc10      	bgt.n	80a0c9c <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0c7a:	4b0d      	ldr	r3, [pc, #52]	; (80a0cb0 <serialEventRun+0x5c>)
 80a0c7c:	b10b      	cbz	r3, 80a0c82 <serialEventRun+0x2e>
 80a0c7e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0c82:	4b0c      	ldr	r3, [pc, #48]	; (80a0cb4 <serialEventRun+0x60>)
 80a0c84:	b17b      	cbz	r3, 80a0ca6 <serialEventRun+0x52>
 80a0c86:	f7ff ff5f 	bl	80a0b48 <_Z17_fetch_usbserial1v>
 80a0c8a:	6803      	ldr	r3, [r0, #0]
 80a0c8c:	691b      	ldr	r3, [r3, #16]
 80a0c8e:	4798      	blx	r3
 80a0c90:	2800      	cmp	r0, #0
 80a0c92:	dc06      	bgt.n	80a0ca2 <serialEventRun+0x4e>
 80a0c94:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0c96:	f3af 8000 	nop.w
 80a0c9a:	e7e5      	b.n	80a0c68 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0c9c:	f3af 8000 	nop.w
 80a0ca0:	e7eb      	b.n	80a0c7a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a0ca2:	f3af 8000 	nop.w
 80a0ca6:	bd08      	pop	{r3, pc}
	...

080a0cb8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0cb8:	b508      	push	{r3, lr}
	serialEventRun();
 80a0cba:	f7ff ffcb 	bl	80a0c54 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0cbe:	f7ff fae9 	bl	80a0294 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0cc2:	4b01      	ldr	r3, [pc, #4]	; (80a0cc8 <_post_loop+0x10>)
 80a0cc4:	6018      	str	r0, [r3, #0]
 80a0cc6:	bd08      	pop	{r3, pc}
 80a0cc8:	20000110 	.word	0x20000110

080a0ccc <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0ccc:	4802      	ldr	r0, [pc, #8]	; (80a0cd8 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0cce:	4a03      	ldr	r2, [pc, #12]	; (80a0cdc <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0cd0:	4903      	ldr	r1, [pc, #12]	; (80a0ce0 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0cd2:	1a12      	subs	r2, r2, r0
 80a0cd4:	f000 ba8c 	b.w	80a11f0 <memcpy>
 80a0cd8:	40024000 	.word	0x40024000
 80a0cdc:	40024004 	.word	0x40024004
 80a0ce0:	080a15c0 	.word	0x080a15c0

080a0ce4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0ce4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0ce6:	2300      	movs	r3, #0
 80a0ce8:	9300      	str	r3, [sp, #0]
 80a0cea:	461a      	mov	r2, r3
 80a0cec:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0cf0:	f7ff fbc4 	bl	80a047c <system_ctrl_set_result>
}
 80a0cf4:	b003      	add	sp, #12
 80a0cf6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0cfc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a0cfc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0cfe:	8843      	ldrh	r3, [r0, #2]
 80a0d00:	2b0a      	cmp	r3, #10
 80a0d02:	d008      	beq.n	80a0d16 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0d04:	2b50      	cmp	r3, #80	; 0x50
 80a0d06:	d109      	bne.n	80a0d1c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a0d08:	4b09      	ldr	r3, [pc, #36]	; (80a0d30 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0d0a:	681b      	ldr	r3, [r3, #0]
 80a0d0c:	b13b      	cbz	r3, 80a0d1e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a0d0e:	b003      	add	sp, #12
 80a0d10:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a0d14:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a0d16:	f7ff ffe5 	bl	80a0ce4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a0d1a:	e006      	b.n	80a0d2a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0d1c:	2300      	movs	r3, #0
 80a0d1e:	9300      	str	r3, [sp, #0]
 80a0d20:	461a      	mov	r2, r3
 80a0d22:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0d26:	f7ff fba9 	bl	80a047c <system_ctrl_set_result>
        break;
    }
}
 80a0d2a:	b003      	add	sp, #12
 80a0d2c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0d30:	200000f8 	.word	0x200000f8

080a0d34 <module_user_init_hook>:

void module_user_init_hook()
{
 80a0d34:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0d36:	4c10      	ldr	r4, [pc, #64]	; (80a0d78 <module_user_init_hook+0x44>)
 80a0d38:	4d10      	ldr	r5, [pc, #64]	; (80a0d7c <module_user_init_hook+0x48>)
 80a0d3a:	6823      	ldr	r3, [r4, #0]
 80a0d3c:	42ab      	cmp	r3, r5
 80a0d3e:	4b10      	ldr	r3, [pc, #64]	; (80a0d80 <module_user_init_hook+0x4c>)
 80a0d40:	bf0c      	ite	eq
 80a0d42:	2201      	moveq	r2, #1
 80a0d44:	2200      	movne	r2, #0
 80a0d46:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0d48:	d002      	beq.n	80a0d50 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a0d4a:	f7ff ffbf 	bl	80a0ccc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0d4e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0d50:	f7ff fa98 	bl	80a0284 <HAL_RNG_GetRandomNumber>
 80a0d54:	4604      	mov	r4, r0
    srand(seed);
 80a0d56:	f000 fa79 	bl	80a124c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0d5a:	4b0a      	ldr	r3, [pc, #40]	; (80a0d84 <module_user_init_hook+0x50>)
 80a0d5c:	b113      	cbz	r3, 80a0d64 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a0d5e:	4620      	mov	r0, r4
 80a0d60:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0d64:	2100      	movs	r1, #0
 80a0d66:	4807      	ldr	r0, [pc, #28]	; (80a0d84 <module_user_init_hook+0x50>)
 80a0d68:	f7ff fb92 	bl	80a0490 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0d70:	2100      	movs	r1, #0
 80a0d72:	4805      	ldr	r0, [pc, #20]	; (80a0d88 <module_user_init_hook+0x54>)
 80a0d74:	f7ff bb78 	b.w	80a0468 <system_ctrl_set_app_request_handler>
 80a0d78:	40024000 	.word	0x40024000
 80a0d7c:	9a271c1e 	.word	0x9a271c1e
 80a0d80:	200000fc 	.word	0x200000fc
 80a0d84:	00000000 	.word	0x00000000
 80a0d88:	080a0cfd 	.word	0x080a0cfd

080a0d8c <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80a0d8c:	b510      	push	{r4, lr}
 80a0d8e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a0d90:	6880      	ldr	r0, [r0, #8]
 80a0d92:	b108      	cbz	r0, 80a0d98 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a0d94:	f7ff fa6e 	bl	80a0274 <os_mutex_recursive_destroy>
 80a0d98:	4620      	mov	r0, r4
 80a0d9a:	bd10      	pop	{r4, pc}

080a0d9c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a0d9c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a0d9e:	4e1a      	ldr	r6, [pc, #104]	; (80a0e08 <pinAvailable+0x6c>)
 80a0da0:	4604      	mov	r4, r0
 80a0da2:	6831      	ldr	r1, [r6, #0]
 80a0da4:	f011 0501 	ands.w	r5, r1, #1
 80a0da8:	d10f      	bne.n	80a0dca <pinAvailable+0x2e>
 80a0daa:	4630      	mov	r0, r6
 80a0dac:	f7ff f979 	bl	80a00a2 <__cxa_guard_acquire>
 80a0db0:	b158      	cbz	r0, 80a0dca <pinAvailable+0x2e>
 80a0db2:	4629      	mov	r1, r5
 80a0db4:	4815      	ldr	r0, [pc, #84]	; (80a0e0c <pinAvailable+0x70>)
 80a0db6:	f7ff fd55 	bl	80a0864 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0dba:	4630      	mov	r0, r6
 80a0dbc:	f7ff f976 	bl	80a00ac <__cxa_guard_release>
 80a0dc0:	4a13      	ldr	r2, [pc, #76]	; (80a0e10 <pinAvailable+0x74>)
 80a0dc2:	4914      	ldr	r1, [pc, #80]	; (80a0e14 <pinAvailable+0x78>)
 80a0dc4:	4811      	ldr	r0, [pc, #68]	; (80a0e0c <pinAvailable+0x70>)
 80a0dc6:	f000 f891 	bl	80a0eec <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80a0dca:	4810      	ldr	r0, [pc, #64]	; (80a0e0c <pinAvailable+0x70>)
 80a0dcc:	f7ff fd59 	bl	80a0882 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a0dd0:	b128      	cbz	r0, 80a0dde <pinAvailable+0x42>
 80a0dd2:	f1a4 030d 	sub.w	r3, r4, #13
 80a0dd6:	2b02      	cmp	r3, #2
 80a0dd8:	d801      	bhi.n	80a0dde <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80a0dda:	2000      	movs	r0, #0
 80a0ddc:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a0dde:	f000 f847 	bl	80a0e70 <_Z19__fetch_global_Wirev>
 80a0de2:	f7ff fc0d 	bl	80a0600 <_ZN7TwoWire9isEnabledEv>
 80a0de6:	b108      	cbz	r0, 80a0dec <pinAvailable+0x50>
 80a0de8:	2c01      	cmp	r4, #1
 80a0dea:	d9f6      	bls.n	80a0dda <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a0dec:	f7ff fddc 	bl	80a09a8 <_Z22__fetch_global_Serial1v>
 80a0df0:	f7ff fdd6 	bl	80a09a0 <_ZN11USARTSerial9isEnabledEv>
 80a0df4:	b118      	cbz	r0, 80a0dfe <pinAvailable+0x62>
 80a0df6:	f1a4 0312 	sub.w	r3, r4, #18
 80a0dfa:	2b01      	cmp	r3, #1
 80a0dfc:	d9ed      	bls.n	80a0dda <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a0dfe:	2c17      	cmp	r4, #23
 80a0e00:	bf8c      	ite	hi
 80a0e02:	2000      	movhi	r0, #0
 80a0e04:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a0e06:	bd70      	pop	{r4, r5, r6, pc}
 80a0e08:	20000100 	.word	0x20000100
 80a0e0c:	20000104 	.word	0x20000104
 80a0e10:	20000068 	.word	0x20000068
 80a0e14:	080a0d8d 	.word	0x080a0d8d

080a0e18 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0e18:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a0e1a:	b538      	push	{r3, r4, r5, lr}
 80a0e1c:	4604      	mov	r4, r0
 80a0e1e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0e20:	d80a      	bhi.n	80a0e38 <pinMode+0x20>
 80a0e22:	29ff      	cmp	r1, #255	; 0xff
 80a0e24:	d008      	beq.n	80a0e38 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a0e26:	f7ff ffb9 	bl	80a0d9c <pinAvailable>
 80a0e2a:	b128      	cbz	r0, 80a0e38 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a0e2c:	4629      	mov	r1, r5
 80a0e2e:	4620      	mov	r0, r4
}
 80a0e30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a0e34:	f7ff ba3e 	b.w	80a02b4 <HAL_Pin_Mode>
 80a0e38:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0e3c <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a0e3c:	b570      	push	{r4, r5, r6, lr}
 80a0e3e:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a0e40:	2514      	movs	r5, #20
 80a0e42:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0e44:	4e09      	ldr	r6, [pc, #36]	; (80a0e6c <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a0e46:	2100      	movs	r1, #0
 80a0e48:	f000 f9f8 	bl	80a123c <memset>
 80a0e4c:	8025      	strh	r5, [r4, #0]
 80a0e4e:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0e50:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a0e52:	60a5      	str	r5, [r4, #8]
 80a0e54:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0e56:	4628      	mov	r0, r5
 80a0e58:	f000 f867 	bl	80a0f2a <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0e5c:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a0e5e:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0e60:	4628      	mov	r0, r5
 80a0e62:	f000 f862 	bl	80a0f2a <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a0e66:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a0e68:	4620      	mov	r0, r4
 80a0e6a:	bd70      	pop	{r4, r5, r6, pc}
 80a0e6c:	080a1518 	.word	0x080a1518

080a0e70 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a0e70:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0e72:	4d0e      	ldr	r5, [pc, #56]	; (80a0eac <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a0e74:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0e76:	6829      	ldr	r1, [r5, #0]
 80a0e78:	f011 0401 	ands.w	r4, r1, #1
 80a0e7c:	d113      	bne.n	80a0ea6 <_Z19__fetch_global_Wirev+0x36>
 80a0e7e:	4628      	mov	r0, r5
 80a0e80:	f7ff f90f 	bl	80a00a2 <__cxa_guard_acquire>
 80a0e84:	b178      	cbz	r0, 80a0ea6 <_Z19__fetch_global_Wirev+0x36>
 80a0e86:	a801      	add	r0, sp, #4
 80a0e88:	f7ff ffd8 	bl	80a0e3c <_Z17acquireWireBufferv>
 80a0e8c:	aa01      	add	r2, sp, #4
 80a0e8e:	4621      	mov	r1, r4
 80a0e90:	4807      	ldr	r0, [pc, #28]	; (80a0eb0 <_Z19__fetch_global_Wirev+0x40>)
 80a0e92:	f7ff fba3 	bl	80a05dc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a0e96:	4628      	mov	r0, r5
 80a0e98:	f7ff f908 	bl	80a00ac <__cxa_guard_release>
 80a0e9c:	4a05      	ldr	r2, [pc, #20]	; (80a0eb4 <_Z19__fetch_global_Wirev+0x44>)
 80a0e9e:	4906      	ldr	r1, [pc, #24]	; (80a0eb8 <_Z19__fetch_global_Wirev+0x48>)
 80a0ea0:	4803      	ldr	r0, [pc, #12]	; (80a0eb0 <_Z19__fetch_global_Wirev+0x40>)
 80a0ea2:	f000 f823 	bl	80a0eec <__aeabi_atexit>
	return wire;
}
 80a0ea6:	4802      	ldr	r0, [pc, #8]	; (80a0eb0 <_Z19__fetch_global_Wirev+0x40>)
 80a0ea8:	b007      	add	sp, #28
 80a0eaa:	bd30      	pop	{r4, r5, pc}
 80a0eac:	20000114 	.word	0x20000114
 80a0eb0:	20000118 	.word	0x20000118
 80a0eb4:	20000068 	.word	0x20000068
 80a0eb8:	080a0583 	.word	0x080a0583

080a0ebc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0ebc:	b513      	push	{r0, r1, r4, lr}
 80a0ebe:	4c08      	ldr	r4, [pc, #32]	; (80a0ee0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a0ec0:	2300      	movs	r3, #0
 80a0ec2:	461a      	mov	r2, r3
 80a0ec4:	4619      	mov	r1, r3
 80a0ec6:	9300      	str	r3, [sp, #0]
 80a0ec8:	4620      	mov	r0, r4
 80a0eca:	f7ff fbf5 	bl	80a06b8 <_ZN9IPAddressC1Ehhhh>
 80a0ece:	4620      	mov	r0, r4
 80a0ed0:	4a04      	ldr	r2, [pc, #16]	; (80a0ee4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a0ed2:	4905      	ldr	r1, [pc, #20]	; (80a0ee8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a0ed4:	b002      	add	sp, #8
 80a0ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0eda:	f000 b807 	b.w	80a0eec <__aeabi_atexit>
 80a0ede:	bf00      	nop
 80a0ee0:	2000012c 	.word	0x2000012c
 80a0ee4:	20000068 	.word	0x20000068
 80a0ee8:	080a0609 	.word	0x080a0609

080a0eec <__aeabi_atexit>:
 80a0eec:	460b      	mov	r3, r1
 80a0eee:	4601      	mov	r1, r0
 80a0ef0:	4618      	mov	r0, r3
 80a0ef2:	f000 b96f 	b.w	80a11d4 <__cxa_atexit>

080a0ef6 <_ZdlPvj>:
 80a0ef6:	f7ff b8d2 	b.w	80a009e <_ZdlPv>
	...

080a0efc <_ZSt15get_new_handlerv>:
 80a0efc:	4b02      	ldr	r3, [pc, #8]	; (80a0f08 <_ZSt15get_new_handlerv+0xc>)
 80a0efe:	6818      	ldr	r0, [r3, #0]
 80a0f00:	f3bf 8f5f 	dmb	sy
 80a0f04:	4770      	bx	lr
 80a0f06:	bf00      	nop
 80a0f08:	20000144 	.word	0x20000144

080a0f0c <_ZnwjRKSt9nothrow_t>:
 80a0f0c:	b510      	push	{r4, lr}
 80a0f0e:	2800      	cmp	r0, #0
 80a0f10:	bf14      	ite	ne
 80a0f12:	4604      	movne	r4, r0
 80a0f14:	2401      	moveq	r4, #1
 80a0f16:	4620      	mov	r0, r4
 80a0f18:	f7ff fb12 	bl	80a0540 <malloc>
 80a0f1c:	b920      	cbnz	r0, 80a0f28 <_ZnwjRKSt9nothrow_t+0x1c>
 80a0f1e:	f7ff ffed 	bl	80a0efc <_ZSt15get_new_handlerv>
 80a0f22:	b108      	cbz	r0, 80a0f28 <_ZnwjRKSt9nothrow_t+0x1c>
 80a0f24:	4780      	blx	r0
 80a0f26:	e7f6      	b.n	80a0f16 <_ZnwjRKSt9nothrow_t+0xa>
 80a0f28:	bd10      	pop	{r4, pc}

080a0f2a <_ZnajRKSt9nothrow_t>:
 80a0f2a:	f7ff bfef 	b.w	80a0f0c <_ZnwjRKSt9nothrow_t>

080a0f2e <_ZSt20__throw_length_errorPKc>:
 80a0f2e:	b508      	push	{r3, lr}
 80a0f30:	f7ff fb16 	bl	80a0560 <abort>

080a0f34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80a0f34:	4603      	mov	r3, r0
 80a0f36:	f853 0b08 	ldr.w	r0, [r3], #8
 80a0f3a:	4298      	cmp	r0, r3
 80a0f3c:	d001      	beq.n	80a0f42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80a0f3e:	f7ff b8ae 	b.w	80a009e <_ZdlPv>
 80a0f42:	4770      	bx	lr

080a0f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a0f44:	4b24      	ldr	r3, [pc, #144]	; (80a0fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a0f46:	681a      	ldr	r2, [r3, #0]
 80a0f48:	07d0      	lsls	r0, r2, #31
 80a0f4a:	bf5c      	itt	pl
 80a0f4c:	2201      	movpl	r2, #1
 80a0f4e:	601a      	strpl	r2, [r3, #0]
 80a0f50:	4b22      	ldr	r3, [pc, #136]	; (80a0fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a0f52:	681a      	ldr	r2, [r3, #0]
 80a0f54:	07d1      	lsls	r1, r2, #31
 80a0f56:	bf5c      	itt	pl
 80a0f58:	2201      	movpl	r2, #1
 80a0f5a:	601a      	strpl	r2, [r3, #0]
 80a0f5c:	4b20      	ldr	r3, [pc, #128]	; (80a0fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a0f5e:	681a      	ldr	r2, [r3, #0]
 80a0f60:	07d2      	lsls	r2, r2, #31
 80a0f62:	bf5c      	itt	pl
 80a0f64:	2201      	movpl	r2, #1
 80a0f66:	601a      	strpl	r2, [r3, #0]
 80a0f68:	4b1e      	ldr	r3, [pc, #120]	; (80a0fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a0f6a:	681a      	ldr	r2, [r3, #0]
 80a0f6c:	07d0      	lsls	r0, r2, #31
 80a0f6e:	bf5c      	itt	pl
 80a0f70:	2201      	movpl	r2, #1
 80a0f72:	601a      	strpl	r2, [r3, #0]
 80a0f74:	4b1c      	ldr	r3, [pc, #112]	; (80a0fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a0f76:	681a      	ldr	r2, [r3, #0]
 80a0f78:	07d1      	lsls	r1, r2, #31
 80a0f7a:	bf5c      	itt	pl
 80a0f7c:	2201      	movpl	r2, #1
 80a0f7e:	601a      	strpl	r2, [r3, #0]
 80a0f80:	4b1a      	ldr	r3, [pc, #104]	; (80a0fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a0f82:	681a      	ldr	r2, [r3, #0]
 80a0f84:	07d2      	lsls	r2, r2, #31
 80a0f86:	bf5c      	itt	pl
 80a0f88:	2201      	movpl	r2, #1
 80a0f8a:	601a      	strpl	r2, [r3, #0]
 80a0f8c:	4b18      	ldr	r3, [pc, #96]	; (80a0ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a0f8e:	681a      	ldr	r2, [r3, #0]
 80a0f90:	07d0      	lsls	r0, r2, #31
 80a0f92:	bf5c      	itt	pl
 80a0f94:	2201      	movpl	r2, #1
 80a0f96:	601a      	strpl	r2, [r3, #0]
 80a0f98:	4b16      	ldr	r3, [pc, #88]	; (80a0ff4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a0f9a:	681a      	ldr	r2, [r3, #0]
 80a0f9c:	07d1      	lsls	r1, r2, #31
 80a0f9e:	bf5c      	itt	pl
 80a0fa0:	2201      	movpl	r2, #1
 80a0fa2:	601a      	strpl	r2, [r3, #0]
 80a0fa4:	4b14      	ldr	r3, [pc, #80]	; (80a0ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a0fa6:	681a      	ldr	r2, [r3, #0]
 80a0fa8:	07d2      	lsls	r2, r2, #31
 80a0faa:	bf5c      	itt	pl
 80a0fac:	2201      	movpl	r2, #1
 80a0fae:	601a      	strpl	r2, [r3, #0]
 80a0fb0:	4b12      	ldr	r3, [pc, #72]	; (80a0ffc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a0fb2:	681a      	ldr	r2, [r3, #0]
 80a0fb4:	07d0      	lsls	r0, r2, #31
 80a0fb6:	bf5c      	itt	pl
 80a0fb8:	2201      	movpl	r2, #1
 80a0fba:	601a      	strpl	r2, [r3, #0]
 80a0fbc:	4b10      	ldr	r3, [pc, #64]	; (80a1000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a0fbe:	681a      	ldr	r2, [r3, #0]
 80a0fc0:	07d1      	lsls	r1, r2, #31
 80a0fc2:	bf5c      	itt	pl
 80a0fc4:	2201      	movpl	r2, #1
 80a0fc6:	601a      	strpl	r2, [r3, #0]
 80a0fc8:	4b0e      	ldr	r3, [pc, #56]	; (80a1004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a0fca:	681a      	ldr	r2, [r3, #0]
 80a0fcc:	07d2      	lsls	r2, r2, #31
 80a0fce:	bf5c      	itt	pl
 80a0fd0:	2201      	movpl	r2, #1
 80a0fd2:	601a      	strpl	r2, [r3, #0]
 80a0fd4:	4770      	bx	lr
 80a0fd6:	bf00      	nop
 80a0fd8:	20000174 	.word	0x20000174
 80a0fdc:	20000170 	.word	0x20000170
 80a0fe0:	2000016c 	.word	0x2000016c
 80a0fe4:	20000168 	.word	0x20000168
 80a0fe8:	20000164 	.word	0x20000164
 80a0fec:	20000160 	.word	0x20000160
 80a0ff0:	2000015c 	.word	0x2000015c
 80a0ff4:	20000158 	.word	0x20000158
 80a0ff8:	20000154 	.word	0x20000154
 80a0ffc:	20000150 	.word	0x20000150
 80a1000:	2000014c 	.word	0x2000014c
 80a1004:	20000148 	.word	0x20000148

080a1008 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1008:	4b18      	ldr	r3, [pc, #96]	; (80a106c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a100a:	681a      	ldr	r2, [r3, #0]
 80a100c:	07d1      	lsls	r1, r2, #31
 80a100e:	bf5c      	itt	pl
 80a1010:	2201      	movpl	r2, #1
 80a1012:	601a      	strpl	r2, [r3, #0]
 80a1014:	4b16      	ldr	r3, [pc, #88]	; (80a1070 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1016:	681a      	ldr	r2, [r3, #0]
 80a1018:	07d2      	lsls	r2, r2, #31
 80a101a:	bf5c      	itt	pl
 80a101c:	2201      	movpl	r2, #1
 80a101e:	601a      	strpl	r2, [r3, #0]
 80a1020:	4b14      	ldr	r3, [pc, #80]	; (80a1074 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1022:	681a      	ldr	r2, [r3, #0]
 80a1024:	07d0      	lsls	r0, r2, #31
 80a1026:	bf5c      	itt	pl
 80a1028:	2201      	movpl	r2, #1
 80a102a:	601a      	strpl	r2, [r3, #0]
 80a102c:	4b12      	ldr	r3, [pc, #72]	; (80a1078 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a102e:	681a      	ldr	r2, [r3, #0]
 80a1030:	07d1      	lsls	r1, r2, #31
 80a1032:	bf5c      	itt	pl
 80a1034:	2201      	movpl	r2, #1
 80a1036:	601a      	strpl	r2, [r3, #0]
 80a1038:	4b10      	ldr	r3, [pc, #64]	; (80a107c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a103a:	681a      	ldr	r2, [r3, #0]
 80a103c:	07d2      	lsls	r2, r2, #31
 80a103e:	bf5c      	itt	pl
 80a1040:	2201      	movpl	r2, #1
 80a1042:	601a      	strpl	r2, [r3, #0]
 80a1044:	4b0e      	ldr	r3, [pc, #56]	; (80a1080 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1046:	681a      	ldr	r2, [r3, #0]
 80a1048:	07d0      	lsls	r0, r2, #31
 80a104a:	bf5c      	itt	pl
 80a104c:	2201      	movpl	r2, #1
 80a104e:	601a      	strpl	r2, [r3, #0]
 80a1050:	4b0c      	ldr	r3, [pc, #48]	; (80a1084 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1052:	681a      	ldr	r2, [r3, #0]
 80a1054:	07d1      	lsls	r1, r2, #31
 80a1056:	bf5c      	itt	pl
 80a1058:	2201      	movpl	r2, #1
 80a105a:	601a      	strpl	r2, [r3, #0]
 80a105c:	4b0a      	ldr	r3, [pc, #40]	; (80a1088 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a105e:	681a      	ldr	r2, [r3, #0]
 80a1060:	07d2      	lsls	r2, r2, #31
 80a1062:	bf5c      	itt	pl
 80a1064:	2201      	movpl	r2, #1
 80a1066:	601a      	strpl	r2, [r3, #0]
 80a1068:	4770      	bx	lr
 80a106a:	bf00      	nop
 80a106c:	20000194 	.word	0x20000194
 80a1070:	20000190 	.word	0x20000190
 80a1074:	2000018c 	.word	0x2000018c
 80a1078:	20000188 	.word	0x20000188
 80a107c:	20000184 	.word	0x20000184
 80a1080:	20000180 	.word	0x20000180
 80a1084:	2000017c 	.word	0x2000017c
 80a1088:	20000178 	.word	0x20000178

080a108c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a108c:	4b18      	ldr	r3, [pc, #96]	; (80a10f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a108e:	681a      	ldr	r2, [r3, #0]
 80a1090:	07d1      	lsls	r1, r2, #31
 80a1092:	bf5c      	itt	pl
 80a1094:	2201      	movpl	r2, #1
 80a1096:	601a      	strpl	r2, [r3, #0]
 80a1098:	4b16      	ldr	r3, [pc, #88]	; (80a10f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a109a:	681a      	ldr	r2, [r3, #0]
 80a109c:	07d2      	lsls	r2, r2, #31
 80a109e:	bf5c      	itt	pl
 80a10a0:	2201      	movpl	r2, #1
 80a10a2:	601a      	strpl	r2, [r3, #0]
 80a10a4:	4b14      	ldr	r3, [pc, #80]	; (80a10f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a10a6:	681a      	ldr	r2, [r3, #0]
 80a10a8:	07d0      	lsls	r0, r2, #31
 80a10aa:	bf5c      	itt	pl
 80a10ac:	2201      	movpl	r2, #1
 80a10ae:	601a      	strpl	r2, [r3, #0]
 80a10b0:	4b12      	ldr	r3, [pc, #72]	; (80a10fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a10b2:	681a      	ldr	r2, [r3, #0]
 80a10b4:	07d1      	lsls	r1, r2, #31
 80a10b6:	bf5c      	itt	pl
 80a10b8:	2201      	movpl	r2, #1
 80a10ba:	601a      	strpl	r2, [r3, #0]
 80a10bc:	4b10      	ldr	r3, [pc, #64]	; (80a1100 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a10be:	681a      	ldr	r2, [r3, #0]
 80a10c0:	07d2      	lsls	r2, r2, #31
 80a10c2:	bf5c      	itt	pl
 80a10c4:	2201      	movpl	r2, #1
 80a10c6:	601a      	strpl	r2, [r3, #0]
 80a10c8:	4b0e      	ldr	r3, [pc, #56]	; (80a1104 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a10ca:	681a      	ldr	r2, [r3, #0]
 80a10cc:	07d0      	lsls	r0, r2, #31
 80a10ce:	bf5c      	itt	pl
 80a10d0:	2201      	movpl	r2, #1
 80a10d2:	601a      	strpl	r2, [r3, #0]
 80a10d4:	4b0c      	ldr	r3, [pc, #48]	; (80a1108 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a10d6:	681a      	ldr	r2, [r3, #0]
 80a10d8:	07d1      	lsls	r1, r2, #31
 80a10da:	bf5c      	itt	pl
 80a10dc:	2201      	movpl	r2, #1
 80a10de:	601a      	strpl	r2, [r3, #0]
 80a10e0:	4b0a      	ldr	r3, [pc, #40]	; (80a110c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a10e2:	681a      	ldr	r2, [r3, #0]
 80a10e4:	07d2      	lsls	r2, r2, #31
 80a10e6:	bf5c      	itt	pl
 80a10e8:	2201      	movpl	r2, #1
 80a10ea:	601a      	strpl	r2, [r3, #0]
 80a10ec:	4770      	bx	lr
 80a10ee:	bf00      	nop
 80a10f0:	200001b4 	.word	0x200001b4
 80a10f4:	200001b0 	.word	0x200001b0
 80a10f8:	200001ac 	.word	0x200001ac
 80a10fc:	200001a8 	.word	0x200001a8
 80a1100:	200001a4 	.word	0x200001a4
 80a1104:	200001a0 	.word	0x200001a0
 80a1108:	2000019c 	.word	0x2000019c
 80a110c:	20000198 	.word	0x20000198

080a1110 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1110:	4b24      	ldr	r3, [pc, #144]	; (80a11a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1112:	681a      	ldr	r2, [r3, #0]
 80a1114:	07d0      	lsls	r0, r2, #31
 80a1116:	bf5c      	itt	pl
 80a1118:	2201      	movpl	r2, #1
 80a111a:	601a      	strpl	r2, [r3, #0]
 80a111c:	4b22      	ldr	r3, [pc, #136]	; (80a11a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a111e:	681a      	ldr	r2, [r3, #0]
 80a1120:	07d1      	lsls	r1, r2, #31
 80a1122:	bf5c      	itt	pl
 80a1124:	2201      	movpl	r2, #1
 80a1126:	601a      	strpl	r2, [r3, #0]
 80a1128:	4b20      	ldr	r3, [pc, #128]	; (80a11ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a112a:	681a      	ldr	r2, [r3, #0]
 80a112c:	07d2      	lsls	r2, r2, #31
 80a112e:	bf5c      	itt	pl
 80a1130:	2201      	movpl	r2, #1
 80a1132:	601a      	strpl	r2, [r3, #0]
 80a1134:	4b1e      	ldr	r3, [pc, #120]	; (80a11b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1136:	681a      	ldr	r2, [r3, #0]
 80a1138:	07d0      	lsls	r0, r2, #31
 80a113a:	bf5c      	itt	pl
 80a113c:	2201      	movpl	r2, #1
 80a113e:	601a      	strpl	r2, [r3, #0]
 80a1140:	4b1c      	ldr	r3, [pc, #112]	; (80a11b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1142:	681a      	ldr	r2, [r3, #0]
 80a1144:	07d1      	lsls	r1, r2, #31
 80a1146:	bf5c      	itt	pl
 80a1148:	2201      	movpl	r2, #1
 80a114a:	601a      	strpl	r2, [r3, #0]
 80a114c:	4b1a      	ldr	r3, [pc, #104]	; (80a11b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a114e:	681a      	ldr	r2, [r3, #0]
 80a1150:	07d2      	lsls	r2, r2, #31
 80a1152:	bf5c      	itt	pl
 80a1154:	2201      	movpl	r2, #1
 80a1156:	601a      	strpl	r2, [r3, #0]
 80a1158:	4b18      	ldr	r3, [pc, #96]	; (80a11bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a115a:	681a      	ldr	r2, [r3, #0]
 80a115c:	07d0      	lsls	r0, r2, #31
 80a115e:	bf5c      	itt	pl
 80a1160:	2201      	movpl	r2, #1
 80a1162:	601a      	strpl	r2, [r3, #0]
 80a1164:	4b16      	ldr	r3, [pc, #88]	; (80a11c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1166:	681a      	ldr	r2, [r3, #0]
 80a1168:	07d1      	lsls	r1, r2, #31
 80a116a:	bf5c      	itt	pl
 80a116c:	2201      	movpl	r2, #1
 80a116e:	601a      	strpl	r2, [r3, #0]
 80a1170:	4b14      	ldr	r3, [pc, #80]	; (80a11c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1172:	681a      	ldr	r2, [r3, #0]
 80a1174:	07d2      	lsls	r2, r2, #31
 80a1176:	bf5c      	itt	pl
 80a1178:	2201      	movpl	r2, #1
 80a117a:	601a      	strpl	r2, [r3, #0]
 80a117c:	4b12      	ldr	r3, [pc, #72]	; (80a11c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a117e:	681a      	ldr	r2, [r3, #0]
 80a1180:	07d0      	lsls	r0, r2, #31
 80a1182:	bf5c      	itt	pl
 80a1184:	2201      	movpl	r2, #1
 80a1186:	601a      	strpl	r2, [r3, #0]
 80a1188:	4b10      	ldr	r3, [pc, #64]	; (80a11cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a118a:	681a      	ldr	r2, [r3, #0]
 80a118c:	07d1      	lsls	r1, r2, #31
 80a118e:	bf5c      	itt	pl
 80a1190:	2201      	movpl	r2, #1
 80a1192:	601a      	strpl	r2, [r3, #0]
 80a1194:	4b0e      	ldr	r3, [pc, #56]	; (80a11d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1196:	681a      	ldr	r2, [r3, #0]
 80a1198:	07d2      	lsls	r2, r2, #31
 80a119a:	bf5c      	itt	pl
 80a119c:	2201      	movpl	r2, #1
 80a119e:	601a      	strpl	r2, [r3, #0]
 80a11a0:	4770      	bx	lr
 80a11a2:	bf00      	nop
 80a11a4:	200001e4 	.word	0x200001e4
 80a11a8:	200001e0 	.word	0x200001e0
 80a11ac:	200001dc 	.word	0x200001dc
 80a11b0:	200001d8 	.word	0x200001d8
 80a11b4:	200001d4 	.word	0x200001d4
 80a11b8:	200001d0 	.word	0x200001d0
 80a11bc:	200001cc 	.word	0x200001cc
 80a11c0:	200001c8 	.word	0x200001c8
 80a11c4:	200001c4 	.word	0x200001c4
 80a11c8:	200001c0 	.word	0x200001c0
 80a11cc:	200001bc 	.word	0x200001bc
 80a11d0:	200001b8 	.word	0x200001b8

080a11d4 <__cxa_atexit>:
 80a11d4:	b510      	push	{r4, lr}
 80a11d6:	4c05      	ldr	r4, [pc, #20]	; (80a11ec <__cxa_atexit+0x18>)
 80a11d8:	4613      	mov	r3, r2
 80a11da:	b12c      	cbz	r4, 80a11e8 <__cxa_atexit+0x14>
 80a11dc:	460a      	mov	r2, r1
 80a11de:	4601      	mov	r1, r0
 80a11e0:	2002      	movs	r0, #2
 80a11e2:	f3af 8000 	nop.w
 80a11e6:	bd10      	pop	{r4, pc}
 80a11e8:	4620      	mov	r0, r4
 80a11ea:	bd10      	pop	{r4, pc}
 80a11ec:	00000000 	.word	0x00000000

080a11f0 <memcpy>:
 80a11f0:	b510      	push	{r4, lr}
 80a11f2:	1e43      	subs	r3, r0, #1
 80a11f4:	440a      	add	r2, r1
 80a11f6:	4291      	cmp	r1, r2
 80a11f8:	d004      	beq.n	80a1204 <memcpy+0x14>
 80a11fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a11fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1202:	e7f8      	b.n	80a11f6 <memcpy+0x6>
 80a1204:	bd10      	pop	{r4, pc}

080a1206 <memmove>:
 80a1206:	4288      	cmp	r0, r1
 80a1208:	b510      	push	{r4, lr}
 80a120a:	eb01 0302 	add.w	r3, r1, r2
 80a120e:	d801      	bhi.n	80a1214 <memmove+0xe>
 80a1210:	1e42      	subs	r2, r0, #1
 80a1212:	e00b      	b.n	80a122c <memmove+0x26>
 80a1214:	4298      	cmp	r0, r3
 80a1216:	d2fb      	bcs.n	80a1210 <memmove+0xa>
 80a1218:	1881      	adds	r1, r0, r2
 80a121a:	1ad2      	subs	r2, r2, r3
 80a121c:	42d3      	cmn	r3, r2
 80a121e:	d004      	beq.n	80a122a <memmove+0x24>
 80a1220:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80a1224:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80a1228:	e7f8      	b.n	80a121c <memmove+0x16>
 80a122a:	bd10      	pop	{r4, pc}
 80a122c:	4299      	cmp	r1, r3
 80a122e:	d004      	beq.n	80a123a <memmove+0x34>
 80a1230:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1234:	f802 4f01 	strb.w	r4, [r2, #1]!
 80a1238:	e7f8      	b.n	80a122c <memmove+0x26>
 80a123a:	bd10      	pop	{r4, pc}

080a123c <memset>:
 80a123c:	4603      	mov	r3, r0
 80a123e:	4402      	add	r2, r0
 80a1240:	4293      	cmp	r3, r2
 80a1242:	d002      	beq.n	80a124a <memset+0xe>
 80a1244:	f803 1b01 	strb.w	r1, [r3], #1
 80a1248:	e7fa      	b.n	80a1240 <memset+0x4>
 80a124a:	4770      	bx	lr

080a124c <srand>:
 80a124c:	b538      	push	{r3, r4, r5, lr}
 80a124e:	4b12      	ldr	r3, [pc, #72]	; (80a1298 <srand+0x4c>)
 80a1250:	4605      	mov	r5, r0
 80a1252:	681c      	ldr	r4, [r3, #0]
 80a1254:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1256:	b9d3      	cbnz	r3, 80a128e <srand+0x42>
 80a1258:	2018      	movs	r0, #24
 80a125a:	f7ff f971 	bl	80a0540 <malloc>
 80a125e:	f243 330e 	movw	r3, #13070	; 0x330e
 80a1262:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1264:	8003      	strh	r3, [r0, #0]
 80a1266:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a126a:	8043      	strh	r3, [r0, #2]
 80a126c:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1270:	8083      	strh	r3, [r0, #4]
 80a1272:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a1276:	80c3      	strh	r3, [r0, #6]
 80a1278:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a127c:	8103      	strh	r3, [r0, #8]
 80a127e:	2305      	movs	r3, #5
 80a1280:	8143      	strh	r3, [r0, #10]
 80a1282:	230b      	movs	r3, #11
 80a1284:	8183      	strh	r3, [r0, #12]
 80a1286:	2201      	movs	r2, #1
 80a1288:	2300      	movs	r3, #0
 80a128a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a128e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1290:	2200      	movs	r2, #0
 80a1292:	611d      	str	r5, [r3, #16]
 80a1294:	615a      	str	r2, [r3, #20]
 80a1296:	bd38      	pop	{r3, r4, r5, pc}
 80a1298:	20000064 	.word	0x20000064

080a129c <strlen>:
 80a129c:	4603      	mov	r3, r0
 80a129e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a12a2:	2a00      	cmp	r2, #0
 80a12a4:	d1fb      	bne.n	80a129e <strlen+0x2>
 80a12a6:	1a18      	subs	r0, r3, r0
 80a12a8:	3801      	subs	r0, #1
 80a12aa:	4770      	bx	lr

080a12ac <dynalib_user>:
 80a12ac:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a12bc:	0000 0000                                   ....

080a12c0 <_ZTV11I2cSlaveCtl>:
	...
 80a12c8:	018d 080a 01ad 080a                         ........

080a12d0 <_ZTV21I2cPhotonJamsimConfig>:
	...
 80a12d8:	01c5 080a 01cf 080a 01d1 080a 01d9 080a     ................
 80a12e8:	6576 7463 726f 3a3a 4d5f 655f 706d 616c     vector::_M_empla
 80a12f8:	6563 625f 6361 5f6b 7561 0078               ce_back_aux.

080a1304 <_ZTV7TwoWire>:
	...
 80a130c:	0583 080a 05cd 080a 05a5 080a 0585 080a     ................
 80a131c:	05ad 080a 05b5 080a 05bd 080a 05c5 080a     ................

080a132c <_ZTV9IPAddress>:
	...
 80a1334:	0619 080a 0609 080a 060b 080a 6162 6475     ............baud
 80a1344:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a1354:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a1364:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a1374:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a1384:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a1394:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a13a4:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a13b4:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a13c4:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a13d4:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a13e4:	3d20 0020 0a0d 6600 6c00 006e 6e66 6300      = ....f.ln.fn.c
 80a13f4:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a1404:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a1414:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a1424 <_ZTVN5spark12NetworkClassE>:
	...
 80a142c:	06e1 080a 06eb 080a 06f5 080a 06ff 080a     ................
 80a143c:	0709 080a 0715 080a 0721 080a 072d 080a     ........!...-...
 80a144c:	0735 080a 073f 080a 0749 080a 005a 2b25     5...?...I...Z.%+
 80a145c:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
 80a146c:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
 80a147c:	6974 656d 0000 0000                         time....

080a1484 <_ZTV11USARTSerial>:
	...
 80a148c:	08f1 080a 0941 080a 094f 080a 07ad 080a     ....A...O.......
 80a149c:	0905 080a 0927 080a 0913 080a 093b 080a     ....'.......;...
 80a14ac:	08f3 080a 08f7 080a                         ........

080a14b4 <_ZTV9USBSerial>:
	...
 80a14bc:	0a2d 080a 0a7d 080a 0a8b 080a 07ad 080a     -...}...........
 80a14cc:	0a69 080a 0a2f 080a 0a45 080a 0a77 080a     i.../...E...w...
 80a14dc:	0a5b 080a 0a29 080a                         [...)...

080a14e4 <_ZTVN5spark9WiFiClassE>:
	...
 80a14ec:	0c37 080a 0c2d 080a 0c23 080a 0b95 080a     7...-...#.......
 80a14fc:	0c17 080a 0c0b 080a 0bff 080a 0bf7 080a     ................
 80a150c:	0bed 080a 0be3 080a 0b9f 080a               ............

080a1518 <_ZSt7nothrow>:
 80a1518:	0000 0000                                   ....

080a151c <__sf_fake_stdin>:
	...

080a153c <__sf_fake_stdout>:
	...

080a155c <__sf_fake_stderr>:
	...
 80a157c:	0043                                        C.

080a157e <link_const_variable_data_end>:
	...

080a1580 <link_constructors_location>:
 80a1580:	080a0111 	.word	0x080a0111
 80a1584:	080a01c1 	.word	0x080a01c1
 80a1588:	080a06d1 	.word	0x080a06d1
 80a158c:	080a0799 	.word	0x080a0799
 80a1590:	080a0849 	.word	0x080a0849
 80a1594:	080a08a9 	.word	0x080a08a9
 80a1598:	080a08dd 	.word	0x080a08dd
 80a159c:	080a0c41 	.word	0x080a0c41
 80a15a0:	080a0ebd 	.word	0x080a0ebd
 80a15a4:	080a0f45 	.word	0x080a0f45
 80a15a8:	080a1009 	.word	0x080a1009
 80a15ac:	080a108d 	.word	0x080a108d
 80a15b0:	080a1111 	.word	0x080a1111

080a15b4 <link_constructors_end>:
	...
