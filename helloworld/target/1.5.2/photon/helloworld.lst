
/Volumes/ct-ng/covid-19/github/prototypes/helloworld/target/1.5.2/photon/helloworld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000015d4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a15f0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  20000000  080a15f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001f8  20000078  20000078  00030078  2**3
                  ALLOC
  6 .module_info_suffix 00000028  080a1668  080a1668  00021668  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a1690  080a1690  00021690  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0009b90c  00000000  00000000  00021694  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000e1d0  00000000  00000000  000bcfa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000102d4  00000000  00000000  000cb170  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001bb0  00000000  00000000  000db444  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002ea0  00000000  00000000  000dcff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000236df  00000000  00000000  000dfe94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000208bd  00000000  00000000  00103573  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a8923  00000000  00000000  00123e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ad0c  00000000  00000000  001cc754  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 f939 	bl	80a12a4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 f93e 	bl	80a12ba <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a15f4 	.word	0x080a15f4
 80a004c:	20000074 	.word	0x20000074
 80a0050:	20000078 	.word	0x20000078
 80a0054:	20000270 	.word	0x20000270
 80a0058:	20000270 	.word	0x20000270

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fecd 	bl	80a0dfc <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a15bc 	.word	0x080a15bc
 80a0084:	080a15ec 	.word	0x080a15ec

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b880 	b.w	80a018c <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f8a7 	bl	80a01e0 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 be73 	b.w	80a0d80 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 ba87 	b.w	80a05ac <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 ba8d 	b.w	80a05bc <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a00b2:	b510      	push	{r4, lr}
 80a00b4:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
 80a00b6:	6800      	ldr	r0, [r0, #0]
 80a00b8:	b108      	cbz	r0, 80a00be <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 80a00ba:	f000 fa7f 	bl	80a05bc <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a00be:	4620      	mov	r0, r4
 80a00c0:	bd10      	pop	{r4, pc}
	...

080a00c4 <digitalWriteFast>:
#endif

#endif //USE_BIT_BAND

inline void digitalWriteFast(pin_t pin, uint8_t value)
{
 80a00c4:	4a07      	ldr	r2, [pc, #28]	; (80a00e4 <digitalWriteFast+0x20>)
 80a00c6:	231c      	movs	r3, #28
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a00c8:	4343      	muls	r3, r0
 80a00ca:	6812      	ldr	r2, [r2, #0]

#endif //USE_BIT_BAND

inline void digitalWriteFast(pin_t pin, uint8_t value)
{
    if (value)
 80a00cc:	b121      	cbz	r1, 80a00d8 <digitalWriteFast+0x14>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a00ce:	18d1      	adds	r1, r2, r3
 80a00d0:	58d3      	ldr	r3, [r2, r3]
 80a00d2:	888a      	ldrh	r2, [r1, #4]
 80a00d4:	831a      	strh	r2, [r3, #24]
 80a00d6:	4770      	bx	lr
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a00d8:	18d1      	adds	r1, r2, r3
 80a00da:	58d3      	ldr	r3, [r2, r3]
 80a00dc:	888a      	ldrh	r2, [r1, #4]
 80a00de:	835a      	strh	r2, [r3, #26]
 80a00e0:	4770      	bx	lr
 80a00e2:	bf00      	nop
 80a00e4:	2000007c 	.word	0x2000007c

080a00e8 <_Z9microsNowv>:
 * @brief get the total time in ms since we started.
 * 
 * @return total number of microseconds since we started.
 *          NOTE: this handles the roll over if called more than once an hour.
 */
uint64_t microsNow() {          // time in microseconds...
 80a00e8:	b510      	push	{r4, lr}
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a00ea:	f000 f8d1 	bl	80a0290 <HAL_Timer_Get_Micro_Seconds>
    static uint32_t lastNow_us=0;  // check for overflow.
    static uint64_t totalNow_us=0;
    uint64_t delta_us;
    uint32_t now_us = micros();
    if (now_us >= lastNow_us) 
 80a00ee:	4b0d      	ldr	r3, [pc, #52]	; (80a0124 <_Z9microsNowv+0x3c>)
 80a00f0:	6819      	ldr	r1, [r3, #0]
 80a00f2:	461c      	mov	r4, r3
 80a00f4:	4281      	cmp	r1, r0
 80a00f6:	d802      	bhi.n	80a00fe <_Z9microsNowv+0x16>
        delta_us = now_us-lastNow_us;
 80a00f8:	1a42      	subs	r2, r0, r1
 80a00fa:	2300      	movs	r3, #0
 80a00fc:	e008      	b.n	80a0110 <_Z9microsNowv+0x28>
    else                // we rolled over..
        delta_us = (0x100000000ull - lastNow_us) + now_us;
 80a00fe:	2200      	movs	r2, #0
 80a0100:	1a52      	subs	r2, r2, r1
 80a0102:	f04f 0301 	mov.w	r3, #1
 80a0106:	f163 0300 	sbc.w	r3, r3, #0
 80a010a:	1812      	adds	r2, r2, r0
 80a010c:	f143 0300 	adc.w	r3, r3, #0
    lastNow_us = now_us;
 80a0110:	6020      	str	r0, [r4, #0]
    totalNow_us += delta_us;
 80a0112:	4c05      	ldr	r4, [pc, #20]	; (80a0128 <_Z9microsNowv+0x40>)
 80a0114:	e9d4 0100 	ldrd	r0, r1, [r4]
 80a0118:	1880      	adds	r0, r0, r2
 80a011a:	4159      	adcs	r1, r3
 80a011c:	e9c4 0100 	strd	r0, r1, [r4]
    return(totalNow_us);
}
 80a0120:	bd10      	pop	{r4, pc}
 80a0122:	bf00      	nop
 80a0124:	20000080 	.word	0x20000080
 80a0128:	20000090 	.word	0x20000090

080a012c <_Z12pinChangeIntv>:
void pinChangeInt() {
 80a012c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint64_t start = microsNow();
    uint64_t end = start + 500;   // 1.5ms timeout
    digitalWriteFast(TOUT,1);
 80a012e:	4d13      	ldr	r5, [pc, #76]	; (80a017c <_Z12pinChangeIntv+0x50>)
    detachInterrupt(IIN);
 80a0130:	4c13      	ldr	r4, [pc, #76]	; (80a0180 <_Z12pinChangeIntv+0x54>)
    lastNow_us = now_us;
    totalNow_us += delta_us;
    return(totalNow_us);
}
void pinChangeInt() {
    uint64_t start = microsNow();
 80a0132:	f7ff ffd9 	bl	80a00e8 <_Z9microsNowv>
    uint64_t end = start + 500;   // 1.5ms timeout
    digitalWriteFast(TOUT,1);
 80a0136:	2101      	movs	r1, #1
 80a0138:	8828      	ldrh	r0, [r5, #0]
 80a013a:	f7ff ffc3 	bl	80a00c4 <digitalWriteFast>
    detachInterrupt(IIN);
 80a013e:	8820      	ldrh	r0, [r4, #0]
 80a0140:	f000 fabc 	bl	80a06bc <_Z15detachInterruptt>
}

inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80a0144:	4b0f      	ldr	r3, [pc, #60]	; (80a0184 <_Z12pinChangeIntv+0x58>)
 80a0146:	8820      	ldrh	r0, [r4, #0]
 80a0148:	681a      	ldr	r2, [r3, #0]
 80a014a:	231c      	movs	r3, #28
 80a014c:	4343      	muls	r3, r0
 80a014e:	58d3      	ldr	r3, [r2, r3]
    pinReadFast(IIN);
    pinMode(IIN,  OUTPUT);
 80a0150:	2101      	movs	r1, #1
 80a0152:	691b      	ldr	r3, [r3, #16]
 80a0154:	f000 fec4 	bl	80a0ee0 <pinMode>
    pinMode(IIN,  INPUT_PULLUP);
 80a0158:	8820      	ldrh	r0, [r4, #0]
 80a015a:	2102      	movs	r1, #2
 80a015c:	f000 fec0 	bl	80a0ee0 <pinMode>
    digitalWriteFast(TOUT,0);
 80a0160:	8828      	ldrh	r0, [r5, #0]
 80a0162:	2100      	movs	r1, #0
 80a0164:	f7ff ffae 	bl	80a00c4 <digitalWriteFast>
    attachInterrupt(IIN, pinChangeInt, CHANGE,0);      
 80a0168:	2300      	movs	r3, #0
 80a016a:	8820      	ldrh	r0, [r4, #0]
 80a016c:	9300      	str	r3, [sp, #0]
 80a016e:	461a      	mov	r2, r3
 80a0170:	4905      	ldr	r1, [pc, #20]	; (80a0188 <_Z12pinChangeIntv+0x5c>)
 80a0172:	f000 fa7b 	bl	80a066c <_Z15attachInterrupttPFvvE13InterruptModeah>

}
 80a0176:	b003      	add	sp, #12
 80a0178:	bd30      	pop	{r4, r5, pc}
 80a017a:	bf00      	nop
 80a017c:	20000000 	.word	0x20000000
 80a0180:	20000004 	.word	0x20000004
 80a0184:	2000007c 	.word	0x2000007c
 80a0188:	080a012d 	.word	0x080a012d

080a018c <setup>:
void setup() {
 80a018c:	b513      	push	{r0, r1, r4, lr}
	Serial.begin(9600);
 80a018e:	f000 fd11 	bl	80a0bb4 <_Z16_fetch_usbserialv>
 80a0192:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0196:	f000 fd01 	bl	80a0b9c <_ZN9USBSerial5beginEl>
    microsNow();            // prime the pump...
 80a019a:	f7ff ffa5 	bl	80a00e8 <_Z9microsNowv>
    // set "led" pin to be an output
    pinMode(TOUT, OUTPUT);
 80a019e:	4b0c      	ldr	r3, [pc, #48]	; (80a01d0 <setup+0x44>)
 80a01a0:	2101      	movs	r1, #1
 80a01a2:	8818      	ldrh	r0, [r3, #0]
 80a01a4:	f000 fe9c 	bl	80a0ee0 <pinMode>
    pinMode(IOUT, OUTPUT);
 80a01a8:	4b0a      	ldr	r3, [pc, #40]	; (80a01d4 <setup+0x48>)
    pinMode(IIN,  INPUT_PULLUP);
 80a01aa:	4c0b      	ldr	r4, [pc, #44]	; (80a01d8 <setup+0x4c>)
void setup() {
	Serial.begin(9600);
    microsNow();            // prime the pump...
    // set "led" pin to be an output
    pinMode(TOUT, OUTPUT);
    pinMode(IOUT, OUTPUT);
 80a01ac:	8818      	ldrh	r0, [r3, #0]
 80a01ae:	2101      	movs	r1, #1
 80a01b0:	f000 fe96 	bl	80a0ee0 <pinMode>
    pinMode(IIN,  INPUT_PULLUP);
 80a01b4:	8820      	ldrh	r0, [r4, #0]
 80a01b6:	2102      	movs	r1, #2
 80a01b8:	f000 fe92 	bl	80a0ee0 <pinMode>
    attachInterrupt(IIN, pinChangeInt, CHANGE,0);      
 80a01bc:	2300      	movs	r3, #0
 80a01be:	8820      	ldrh	r0, [r4, #0]
 80a01c0:	9300      	str	r3, [sp, #0]
 80a01c2:	461a      	mov	r2, r3
 80a01c4:	4905      	ldr	r1, [pc, #20]	; (80a01dc <setup+0x50>)
 80a01c6:	f000 fa51 	bl	80a066c <_Z15attachInterrupttPFvvE13InterruptModeah>

}
 80a01ca:	b002      	add	sp, #8
 80a01cc:	bd10      	pop	{r4, pc}
 80a01ce:	bf00      	nop
 80a01d0:	20000000 	.word	0x20000000
 80a01d4:	20000008 	.word	0x20000008
 80a01d8:	20000004 	.word	0x20000004
 80a01dc:	080a012d 	.word	0x080a012d

080a01e0 <loop>:
// LOOP function runs in repeating loop (after setup finishes)
unsigned cnt = 0;
void loop() {
 80a01e0:	b510      	push	{r4, lr}
    microsNow();            // and call this regularly... micros overflows every 71 minutes
 80a01e2:	f7ff ff81 	bl	80a00e8 <_Z9microsNowv>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
 80a01e6:	f000 f863 	bl	80a02b0 <HAL_disable_irq>
 80a01ea:	4604      	mov	r4, r0
    ATOMIC_BLOCK() {
        cnt++;
 80a01ec:	4b08      	ldr	r3, [pc, #32]	; (80a0210 <loop+0x30>)
 80a01ee:	6819      	ldr	r1, [r3, #0]
 80a01f0:	3101      	adds	r1, #1
 80a01f2:	6019      	str	r1, [r3, #0]
        digitalWriteFast(IOUT, cnt & 1);
 80a01f4:	4b07      	ldr	r3, [pc, #28]	; (80a0214 <loop+0x34>)
 80a01f6:	f001 0101 	and.w	r1, r1, #1
 80a01fa:	8818      	ldrh	r0, [r3, #0]
 80a01fc:	f7ff ff62 	bl	80a00c4 <digitalWriteFast>
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
 80a0200:	4620      	mov	r0, r4
 80a0202:	f000 f85d 	bl	80a02c0 <HAL_enable_irq>
    }
    delay(10);
}
 80a0206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    microsNow();            // and call this regularly... micros overflows every 71 minutes
    ATOMIC_BLOCK() {
        cnt++;
        digitalWriteFast(IOUT, cnt & 1);
    }
    delay(10);
 80a020a:	200a      	movs	r0, #10
 80a020c:	f000 b9de 	b.w	80a05cc <delay>
 80a0210:	20000098 	.word	0x20000098
 80a0214:	20000008 	.word	0x20000008

080a0218 <_GLOBAL__sub_I_SystemMode>:
}
 80a0218:	b510      	push	{r4, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a021a:	f000 f859 	bl	80a02d0 <HAL_Pin_Map>
 80a021e:	4b0c      	ldr	r3, [pc, #48]	; (80a0250 <_GLOBAL__sub_I_SystemMode+0x38>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a0220:	4c0c      	ldr	r4, [pc, #48]	; (80a0254 <_GLOBAL__sub_I_SystemMode+0x3c>)
 80a0222:	6018      	str	r0, [r3, #0]
#include <stdint.h>
SYSTEM_THREAD(ENABLED);
 80a0224:	2100      	movs	r1, #0
 80a0226:	2001      	movs	r0, #1
 80a0228:	f000 f94c 	bl	80a04c4 <system_thread_set_state>
 80a022c:	2300      	movs	r3, #0
 80a022e:	6023      	str	r3, [r4, #0]
 80a0230:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0232:	71a3      	strb	r3, [r4, #6]
 80a0234:	8123      	strh	r3, [r4, #8]
 80a0236:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a023a:	2003      	movs	r0, #3
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a023c:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a023e:	f000 f931 	bl	80a04a4 <set_system_mode>
SYSTEM_MODE(MANUAL);
 80a0242:	4620      	mov	r0, r4
    ATOMIC_BLOCK() {
        cnt++;
        digitalWriteFast(IOUT, cnt & 1);
    }
    delay(10);
}
 80a0244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include <stdint.h>
SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(MANUAL);
 80a0248:	4a03      	ldr	r2, [pc, #12]	; (80a0258 <_GLOBAL__sub_I_SystemMode+0x40>)
 80a024a:	4904      	ldr	r1, [pc, #16]	; (80a025c <_GLOBAL__sub_I_SystemMode+0x44>)
 80a024c:	f000 beb2 	b.w	80a0fb4 <__aeabi_atexit>
 80a0250:	2000007c 	.word	0x2000007c
 80a0254:	20000084 	.word	0x20000084
 80a0258:	20000078 	.word	0x20000078
 80a025c:	080a00b3 	.word	0x080a00b3

080a0260 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0260:	b508      	push	{r3, lr}
 80a0262:	4b02      	ldr	r3, [pc, #8]	; (80a026c <os_mutex_recursive_create+0xc>)
 80a0264:	681b      	ldr	r3, [r3, #0]
 80a0266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0268:	9301      	str	r3, [sp, #4]
 80a026a:	bd08      	pop	{r3, pc}
 80a026c:	080601d0 	.word	0x080601d0

080a0270 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0270:	b508      	push	{r3, lr}
 80a0272:	4b02      	ldr	r3, [pc, #8]	; (80a027c <os_mutex_recursive_destroy+0xc>)
 80a0274:	681b      	ldr	r3, [r3, #0]
 80a0276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0278:	9301      	str	r3, [sp, #4]
 80a027a:	bd08      	pop	{r3, pc}
 80a027c:	080601d0 	.word	0x080601d0

080a0280 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0280:	b508      	push	{r3, lr}
 80a0282:	4b02      	ldr	r3, [pc, #8]	; (80a028c <HAL_RNG_GetRandomNumber+0xc>)
 80a0284:	681b      	ldr	r3, [r3, #0]
 80a0286:	685b      	ldr	r3, [r3, #4]
 80a0288:	9301      	str	r3, [sp, #4]
 80a028a:	bd08      	pop	{r3, pc}
 80a028c:	0806019c 	.word	0x0806019c

080a0290 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a0290:	b508      	push	{r3, lr}
 80a0292:	4b02      	ldr	r3, [pc, #8]	; (80a029c <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a0294:	681b      	ldr	r3, [r3, #0]
 80a0296:	691b      	ldr	r3, [r3, #16]
 80a0298:	9301      	str	r3, [sp, #4]
 80a029a:	bd08      	pop	{r3, pc}
 80a029c:	0806019c 	.word	0x0806019c

080a02a0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a02a0:	b508      	push	{r3, lr}
 80a02a2:	4b02      	ldr	r3, [pc, #8]	; (80a02ac <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a02a4:	681b      	ldr	r3, [r3, #0]
 80a02a6:	695b      	ldr	r3, [r3, #20]
 80a02a8:	9301      	str	r3, [sp, #4]
 80a02aa:	bd08      	pop	{r3, pc}
 80a02ac:	0806019c 	.word	0x0806019c

080a02b0 <HAL_disable_irq>:
DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
 80a02b0:	b508      	push	{r3, lr}
 80a02b2:	4b02      	ldr	r3, [pc, #8]	; (80a02bc <HAL_disable_irq+0xc>)
 80a02b4:	681b      	ldr	r3, [r3, #0]
 80a02b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a02b8:	9301      	str	r3, [sp, #4]
 80a02ba:	bd08      	pop	{r3, pc}
 80a02bc:	0806019c 	.word	0x0806019c

080a02c0 <HAL_enable_irq>:
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
 80a02c0:	b508      	push	{r3, lr}
 80a02c2:	4b02      	ldr	r3, [pc, #8]	; (80a02cc <HAL_enable_irq+0xc>)
 80a02c4:	681b      	ldr	r3, [r3, #0]
 80a02c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a02c8:	9301      	str	r3, [sp, #4]
 80a02ca:	bd08      	pop	{r3, pc}
 80a02cc:	0806019c 	.word	0x0806019c

080a02d0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a02d0:	b508      	push	{r3, lr}
 80a02d2:	4b02      	ldr	r3, [pc, #8]	; (80a02dc <HAL_Pin_Map+0xc>)
 80a02d4:	681b      	ldr	r3, [r3, #0]
 80a02d6:	681b      	ldr	r3, [r3, #0]
 80a02d8:	9301      	str	r3, [sp, #4]
 80a02da:	bd08      	pop	{r3, pc}
 80a02dc:	080601b0 	.word	0x080601b0

080a02e0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a02e0:	b508      	push	{r3, lr}
 80a02e2:	4b02      	ldr	r3, [pc, #8]	; (80a02ec <HAL_Pin_Mode+0xc>)
 80a02e4:	681b      	ldr	r3, [r3, #0]
 80a02e6:	689b      	ldr	r3, [r3, #8]
 80a02e8:	9301      	str	r3, [sp, #4]
 80a02ea:	bd08      	pop	{r3, pc}
 80a02ec:	080601b0 	.word	0x080601b0

080a02f0 <HAL_Interrupts_Attach>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a02f0:	b508      	push	{r3, lr}
 80a02f2:	4b02      	ldr	r3, [pc, #8]	; (80a02fc <HAL_Interrupts_Attach+0xc>)
 80a02f4:	681b      	ldr	r3, [r3, #0]
 80a02f6:	699b      	ldr	r3, [r3, #24]
 80a02f8:	9301      	str	r3, [sp, #4]
 80a02fa:	bd08      	pop	{r3, pc}
 80a02fc:	080601b0 	.word	0x080601b0

080a0300 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 80a0300:	b508      	push	{r3, lr}
 80a0302:	4b02      	ldr	r3, [pc, #8]	; (80a030c <HAL_Interrupts_Detach+0xc>)
 80a0304:	681b      	ldr	r3, [r3, #0]
 80a0306:	69db      	ldr	r3, [r3, #28]
 80a0308:	9301      	str	r3, [sp, #4]
 80a030a:	bd08      	pop	{r3, pc}
 80a030c:	080601b0 	.word	0x080601b0

080a0310 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0310:	b508      	push	{r3, lr}
 80a0312:	4b02      	ldr	r3, [pc, #8]	; (80a031c <HAL_I2C_Write_Data+0xc>)
 80a0314:	681b      	ldr	r3, [r3, #0]
 80a0316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0318:	9301      	str	r3, [sp, #4]
 80a031a:	bd08      	pop	{r3, pc}
 80a031c:	080601ac 	.word	0x080601ac

080a0320 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0320:	b508      	push	{r3, lr}
 80a0322:	4b02      	ldr	r3, [pc, #8]	; (80a032c <HAL_I2C_Available_Data+0xc>)
 80a0324:	681b      	ldr	r3, [r3, #0]
 80a0326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0328:	9301      	str	r3, [sp, #4]
 80a032a:	bd08      	pop	{r3, pc}
 80a032c:	080601ac 	.word	0x080601ac

080a0330 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0330:	b508      	push	{r3, lr}
 80a0332:	4b02      	ldr	r3, [pc, #8]	; (80a033c <HAL_I2C_Read_Data+0xc>)
 80a0334:	681b      	ldr	r3, [r3, #0]
 80a0336:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0338:	9301      	str	r3, [sp, #4]
 80a033a:	bd08      	pop	{r3, pc}
 80a033c:	080601ac 	.word	0x080601ac

080a0340 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0340:	b508      	push	{r3, lr}
 80a0342:	4b02      	ldr	r3, [pc, #8]	; (80a034c <HAL_I2C_Peek_Data+0xc>)
 80a0344:	681b      	ldr	r3, [r3, #0]
 80a0346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0348:	9301      	str	r3, [sp, #4]
 80a034a:	bd08      	pop	{r3, pc}
 80a034c:	080601ac 	.word	0x080601ac

080a0350 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0350:	b508      	push	{r3, lr}
 80a0352:	4b02      	ldr	r3, [pc, #8]	; (80a035c <HAL_I2C_Flush_Data+0xc>)
 80a0354:	681b      	ldr	r3, [r3, #0]
 80a0356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0358:	9301      	str	r3, [sp, #4]
 80a035a:	bd08      	pop	{r3, pc}
 80a035c:	080601ac 	.word	0x080601ac

080a0360 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0360:	b508      	push	{r3, lr}
 80a0362:	4b02      	ldr	r3, [pc, #8]	; (80a036c <HAL_I2C_Is_Enabled+0xc>)
 80a0364:	681b      	ldr	r3, [r3, #0]
 80a0366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0368:	9301      	str	r3, [sp, #4]
 80a036a:	bd08      	pop	{r3, pc}
 80a036c:	080601ac 	.word	0x080601ac

080a0370 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a0370:	b508      	push	{r3, lr}
 80a0372:	4b03      	ldr	r3, [pc, #12]	; (80a0380 <HAL_I2C_Init+0x10>)
 80a0374:	681b      	ldr	r3, [r3, #0]
 80a0376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a037a:	9301      	str	r3, [sp, #4]
 80a037c:	bd08      	pop	{r3, pc}
 80a037e:	0000      	.short	0x0000
 80a0380:	080601ac 	.word	0x080601ac

080a0384 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0384:	b508      	push	{r3, lr}
 80a0386:	4b02      	ldr	r3, [pc, #8]	; (80a0390 <HAL_SPI_Init+0xc>)
 80a0388:	681b      	ldr	r3, [r3, #0]
 80a038a:	69db      	ldr	r3, [r3, #28]
 80a038c:	9301      	str	r3, [sp, #4]
 80a038e:	bd08      	pop	{r3, pc}
 80a0390:	080601b4 	.word	0x080601b4

080a0394 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0394:	b508      	push	{r3, lr}
 80a0396:	4b02      	ldr	r3, [pc, #8]	; (80a03a0 <HAL_SPI_Is_Enabled+0xc>)
 80a0398:	681b      	ldr	r3, [r3, #0]
 80a039a:	6a1b      	ldr	r3, [r3, #32]
 80a039c:	9301      	str	r3, [sp, #4]
 80a039e:	bd08      	pop	{r3, pc}
 80a03a0:	080601b4 	.word	0x080601b4

080a03a4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a03a4:	b508      	push	{r3, lr}
 80a03a6:	4b02      	ldr	r3, [pc, #8]	; (80a03b0 <HAL_USART_Init+0xc>)
 80a03a8:	681b      	ldr	r3, [r3, #0]
 80a03aa:	699b      	ldr	r3, [r3, #24]
 80a03ac:	9301      	str	r3, [sp, #4]
 80a03ae:	bd08      	pop	{r3, pc}
 80a03b0:	080601c4 	.word	0x080601c4

080a03b4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a03b4:	b508      	push	{r3, lr}
 80a03b6:	4b02      	ldr	r3, [pc, #8]	; (80a03c0 <HAL_USART_Write_Data+0xc>)
 80a03b8:	681b      	ldr	r3, [r3, #0]
 80a03ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a03bc:	9301      	str	r3, [sp, #4]
 80a03be:	bd08      	pop	{r3, pc}
 80a03c0:	080601c4 	.word	0x080601c4

080a03c4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a03c4:	b508      	push	{r3, lr}
 80a03c6:	4b02      	ldr	r3, [pc, #8]	; (80a03d0 <HAL_USART_Available_Data+0xc>)
 80a03c8:	681b      	ldr	r3, [r3, #0]
 80a03ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a03cc:	9301      	str	r3, [sp, #4]
 80a03ce:	bd08      	pop	{r3, pc}
 80a03d0:	080601c4 	.word	0x080601c4

080a03d4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a03d4:	b508      	push	{r3, lr}
 80a03d6:	4b02      	ldr	r3, [pc, #8]	; (80a03e0 <HAL_USART_Read_Data+0xc>)
 80a03d8:	681b      	ldr	r3, [r3, #0]
 80a03da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a03dc:	9301      	str	r3, [sp, #4]
 80a03de:	bd08      	pop	{r3, pc}
 80a03e0:	080601c4 	.word	0x080601c4

080a03e4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a03e4:	b508      	push	{r3, lr}
 80a03e6:	4b02      	ldr	r3, [pc, #8]	; (80a03f0 <HAL_USART_Peek_Data+0xc>)
 80a03e8:	681b      	ldr	r3, [r3, #0]
 80a03ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a03ec:	9301      	str	r3, [sp, #4]
 80a03ee:	bd08      	pop	{r3, pc}
 80a03f0:	080601c4 	.word	0x080601c4

080a03f4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a03f4:	b508      	push	{r3, lr}
 80a03f6:	4b02      	ldr	r3, [pc, #8]	; (80a0400 <HAL_USART_Flush_Data+0xc>)
 80a03f8:	681b      	ldr	r3, [r3, #0]
 80a03fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a03fc:	9301      	str	r3, [sp, #4]
 80a03fe:	bd08      	pop	{r3, pc}
 80a0400:	080601c4 	.word	0x080601c4

080a0404 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0404:	b508      	push	{r3, lr}
 80a0406:	4b02      	ldr	r3, [pc, #8]	; (80a0410 <HAL_USART_Is_Enabled+0xc>)
 80a0408:	681b      	ldr	r3, [r3, #0]
 80a040a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a040c:	9301      	str	r3, [sp, #4]
 80a040e:	bd08      	pop	{r3, pc}
 80a0410:	080601c4 	.word	0x080601c4

080a0414 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0414:	b508      	push	{r3, lr}
 80a0416:	4b02      	ldr	r3, [pc, #8]	; (80a0420 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0418:	681b      	ldr	r3, [r3, #0]
 80a041a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a041c:	9301      	str	r3, [sp, #4]
 80a041e:	bd08      	pop	{r3, pc}
 80a0420:	080601c4 	.word	0x080601c4

080a0424 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0424:	b508      	push	{r3, lr}
 80a0426:	4b02      	ldr	r3, [pc, #8]	; (80a0430 <HAL_USB_USART_Init+0xc>)
 80a0428:	681b      	ldr	r3, [r3, #0]
 80a042a:	681b      	ldr	r3, [r3, #0]
 80a042c:	9301      	str	r3, [sp, #4]
 80a042e:	bd08      	pop	{r3, pc}
 80a0430:	080601d8 	.word	0x080601d8

080a0434 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0434:	b508      	push	{r3, lr}
 80a0436:	4b02      	ldr	r3, [pc, #8]	; (80a0440 <HAL_USB_USART_Begin+0xc>)
 80a0438:	681b      	ldr	r3, [r3, #0]
 80a043a:	685b      	ldr	r3, [r3, #4]
 80a043c:	9301      	str	r3, [sp, #4]
 80a043e:	bd08      	pop	{r3, pc}
 80a0440:	080601d8 	.word	0x080601d8

080a0444 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0444:	b508      	push	{r3, lr}
 80a0446:	4b02      	ldr	r3, [pc, #8]	; (80a0450 <HAL_USB_USART_Available_Data+0xc>)
 80a0448:	681b      	ldr	r3, [r3, #0]
 80a044a:	691b      	ldr	r3, [r3, #16]
 80a044c:	9301      	str	r3, [sp, #4]
 80a044e:	bd08      	pop	{r3, pc}
 80a0450:	080601d8 	.word	0x080601d8

080a0454 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0454:	b508      	push	{r3, lr}
 80a0456:	4b02      	ldr	r3, [pc, #8]	; (80a0460 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0458:	681b      	ldr	r3, [r3, #0]
 80a045a:	695b      	ldr	r3, [r3, #20]
 80a045c:	9301      	str	r3, [sp, #4]
 80a045e:	bd08      	pop	{r3, pc}
 80a0460:	080601d8 	.word	0x080601d8

080a0464 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0464:	b508      	push	{r3, lr}
 80a0466:	4b02      	ldr	r3, [pc, #8]	; (80a0470 <HAL_USB_USART_Receive_Data+0xc>)
 80a0468:	681b      	ldr	r3, [r3, #0]
 80a046a:	699b      	ldr	r3, [r3, #24]
 80a046c:	9301      	str	r3, [sp, #4]
 80a046e:	bd08      	pop	{r3, pc}
 80a0470:	080601d8 	.word	0x080601d8

080a0474 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0474:	b508      	push	{r3, lr}
 80a0476:	4b02      	ldr	r3, [pc, #8]	; (80a0480 <HAL_USB_USART_Send_Data+0xc>)
 80a0478:	681b      	ldr	r3, [r3, #0]
 80a047a:	69db      	ldr	r3, [r3, #28]
 80a047c:	9301      	str	r3, [sp, #4]
 80a047e:	bd08      	pop	{r3, pc}
 80a0480:	080601d8 	.word	0x080601d8

080a0484 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0484:	b508      	push	{r3, lr}
 80a0486:	4b02      	ldr	r3, [pc, #8]	; (80a0490 <HAL_USB_USART_Flush_Data+0xc>)
 80a0488:	681b      	ldr	r3, [r3, #0]
 80a048a:	6a1b      	ldr	r3, [r3, #32]
 80a048c:	9301      	str	r3, [sp, #4]
 80a048e:	bd08      	pop	{r3, pc}
 80a0490:	080601d8 	.word	0x080601d8

080a0494 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0494:	b508      	push	{r3, lr}
 80a0496:	4b02      	ldr	r3, [pc, #8]	; (80a04a0 <inet_gethostbyname+0xc>)
 80a0498:	681b      	ldr	r3, [r3, #0]
 80a049a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a049c:	9301      	str	r3, [sp, #4]
 80a049e:	bd08      	pop	{r3, pc}
 80a04a0:	080601c0 	.word	0x080601c0

080a04a4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a04a4:	b508      	push	{r3, lr}
 80a04a6:	4b02      	ldr	r3, [pc, #8]	; (80a04b0 <set_system_mode+0xc>)
 80a04a8:	681b      	ldr	r3, [r3, #0]
 80a04aa:	685b      	ldr	r3, [r3, #4]
 80a04ac:	9301      	str	r3, [sp, #4]
 80a04ae:	bd08      	pop	{r3, pc}
 80a04b0:	080601a4 	.word	0x080601a4

080a04b4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a04b4:	b508      	push	{r3, lr}
 80a04b6:	4b02      	ldr	r3, [pc, #8]	; (80a04c0 <system_delay_ms+0xc>)
 80a04b8:	681b      	ldr	r3, [r3, #0]
 80a04ba:	695b      	ldr	r3, [r3, #20]
 80a04bc:	9301      	str	r3, [sp, #4]
 80a04be:	bd08      	pop	{r3, pc}
 80a04c0:	080601a4 	.word	0x080601a4

080a04c4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a04c4:	b508      	push	{r3, lr}
 80a04c6:	4b02      	ldr	r3, [pc, #8]	; (80a04d0 <system_thread_set_state+0xc>)
 80a04c8:	681b      	ldr	r3, [r3, #0]
 80a04ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a04cc:	9301      	str	r3, [sp, #4]
 80a04ce:	bd08      	pop	{r3, pc}
 80a04d0:	080601a4 	.word	0x080601a4

080a04d4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a04d4:	b508      	push	{r3, lr}
 80a04d6:	4b03      	ldr	r3, [pc, #12]	; (80a04e4 <system_ctrl_set_app_request_handler+0x10>)
 80a04d8:	681b      	ldr	r3, [r3, #0]
 80a04da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a04de:	9301      	str	r3, [sp, #4]
 80a04e0:	bd08      	pop	{r3, pc}
 80a04e2:	0000      	.short	0x0000
 80a04e4:	080601a4 	.word	0x080601a4

080a04e8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a04e8:	b508      	push	{r3, lr}
 80a04ea:	4b03      	ldr	r3, [pc, #12]	; (80a04f8 <system_ctrl_set_result+0x10>)
 80a04ec:	681b      	ldr	r3, [r3, #0]
 80a04ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a04f2:	9301      	str	r3, [sp, #4]
 80a04f4:	bd08      	pop	{r3, pc}
 80a04f6:	0000      	.short	0x0000
 80a04f8:	080601a4 	.word	0x080601a4

080a04fc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a04fc:	b508      	push	{r3, lr}
 80a04fe:	4b02      	ldr	r3, [pc, #8]	; (80a0508 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0500:	681b      	ldr	r3, [r3, #0]
 80a0502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0504:	9301      	str	r3, [sp, #4]
 80a0506:	bd08      	pop	{r3, pc}
 80a0508:	080601cc 	.word	0x080601cc

080a050c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a050c:	b508      	push	{r3, lr}
 80a050e:	4b02      	ldr	r3, [pc, #8]	; (80a0518 <network_connect+0xc>)
 80a0510:	681b      	ldr	r3, [r3, #0]
 80a0512:	685b      	ldr	r3, [r3, #4]
 80a0514:	9301      	str	r3, [sp, #4]
 80a0516:	bd08      	pop	{r3, pc}
 80a0518:	080601c8 	.word	0x080601c8

080a051c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a051c:	b508      	push	{r3, lr}
 80a051e:	4b02      	ldr	r3, [pc, #8]	; (80a0528 <network_connecting+0xc>)
 80a0520:	681b      	ldr	r3, [r3, #0]
 80a0522:	689b      	ldr	r3, [r3, #8]
 80a0524:	9301      	str	r3, [sp, #4]
 80a0526:	bd08      	pop	{r3, pc}
 80a0528:	080601c8 	.word	0x080601c8

080a052c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a052c:	b508      	push	{r3, lr}
 80a052e:	4b02      	ldr	r3, [pc, #8]	; (80a0538 <network_disconnect+0xc>)
 80a0530:	681b      	ldr	r3, [r3, #0]
 80a0532:	68db      	ldr	r3, [r3, #12]
 80a0534:	9301      	str	r3, [sp, #4]
 80a0536:	bd08      	pop	{r3, pc}
 80a0538:	080601c8 	.word	0x080601c8

080a053c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a053c:	b508      	push	{r3, lr}
 80a053e:	4b02      	ldr	r3, [pc, #8]	; (80a0548 <network_ready+0xc>)
 80a0540:	681b      	ldr	r3, [r3, #0]
 80a0542:	691b      	ldr	r3, [r3, #16]
 80a0544:	9301      	str	r3, [sp, #4]
 80a0546:	bd08      	pop	{r3, pc}
 80a0548:	080601c8 	.word	0x080601c8

080a054c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a054c:	b508      	push	{r3, lr}
 80a054e:	4b02      	ldr	r3, [pc, #8]	; (80a0558 <network_on+0xc>)
 80a0550:	681b      	ldr	r3, [r3, #0]
 80a0552:	695b      	ldr	r3, [r3, #20]
 80a0554:	9301      	str	r3, [sp, #4]
 80a0556:	bd08      	pop	{r3, pc}
 80a0558:	080601c8 	.word	0x080601c8

080a055c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a055c:	b508      	push	{r3, lr}
 80a055e:	4b02      	ldr	r3, [pc, #8]	; (80a0568 <network_off+0xc>)
 80a0560:	681b      	ldr	r3, [r3, #0]
 80a0562:	699b      	ldr	r3, [r3, #24]
 80a0564:	9301      	str	r3, [sp, #4]
 80a0566:	bd08      	pop	{r3, pc}
 80a0568:	080601c8 	.word	0x080601c8

080a056c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a056c:	b508      	push	{r3, lr}
 80a056e:	4b02      	ldr	r3, [pc, #8]	; (80a0578 <network_listen+0xc>)
 80a0570:	681b      	ldr	r3, [r3, #0]
 80a0572:	69db      	ldr	r3, [r3, #28]
 80a0574:	9301      	str	r3, [sp, #4]
 80a0576:	bd08      	pop	{r3, pc}
 80a0578:	080601c8 	.word	0x080601c8

080a057c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a057c:	b508      	push	{r3, lr}
 80a057e:	4b02      	ldr	r3, [pc, #8]	; (80a0588 <network_listening+0xc>)
 80a0580:	681b      	ldr	r3, [r3, #0]
 80a0582:	6a1b      	ldr	r3, [r3, #32]
 80a0584:	9301      	str	r3, [sp, #4]
 80a0586:	bd08      	pop	{r3, pc}
 80a0588:	080601c8 	.word	0x080601c8

080a058c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a058c:	b508      	push	{r3, lr}
 80a058e:	4b02      	ldr	r3, [pc, #8]	; (80a0598 <network_set_listen_timeout+0xc>)
 80a0590:	681b      	ldr	r3, [r3, #0]
 80a0592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0594:	9301      	str	r3, [sp, #4]
 80a0596:	bd08      	pop	{r3, pc}
 80a0598:	080601c8 	.word	0x080601c8

080a059c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a059c:	b508      	push	{r3, lr}
 80a059e:	4b02      	ldr	r3, [pc, #8]	; (80a05a8 <network_get_listen_timeout+0xc>)
 80a05a0:	681b      	ldr	r3, [r3, #0]
 80a05a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a05a4:	9301      	str	r3, [sp, #4]
 80a05a6:	bd08      	pop	{r3, pc}
 80a05a8:	080601c8 	.word	0x080601c8

080a05ac <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a05ac:	b508      	push	{r3, lr}
 80a05ae:	4b02      	ldr	r3, [pc, #8]	; (80a05b8 <malloc+0xc>)
 80a05b0:	681b      	ldr	r3, [r3, #0]
 80a05b2:	681b      	ldr	r3, [r3, #0]
 80a05b4:	9301      	str	r3, [sp, #4]
 80a05b6:	bd08      	pop	{r3, pc}
 80a05b8:	080601a0 	.word	0x080601a0

080a05bc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a05bc:	b508      	push	{r3, lr}
 80a05be:	4b02      	ldr	r3, [pc, #8]	; (80a05c8 <free+0xc>)
 80a05c0:	681b      	ldr	r3, [r3, #0]
 80a05c2:	685b      	ldr	r3, [r3, #4]
 80a05c4:	9301      	str	r3, [sp, #4]
 80a05c6:	bd08      	pop	{r3, pc}
 80a05c8:	080601a0 	.word	0x080601a0

080a05cc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a05cc:	2100      	movs	r1, #0
 80a05ce:	f7ff bf71 	b.w	80a04b4 <system_delay_ms>

080a05d2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a05d2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a05d4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a05d6:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a05d8:	b113      	cbz	r3, 80a05e0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a05da:	2203      	movs	r2, #3
 80a05dc:	4601      	mov	r1, r0
 80a05de:	4798      	blx	r3
    }
 80a05e0:	4620      	mov	r0, r4
 80a05e2:	bd10      	pop	{r4, pc}

080a05e4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a05e4:	4770      	bx	lr

080a05e6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a05e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a05e8:	4606      	mov	r6, r0
 80a05ea:	4615      	mov	r5, r2
 80a05ec:	460c      	mov	r4, r1
 80a05ee:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a05f0:	42bc      	cmp	r4, r7
 80a05f2:	d006      	beq.n	80a0602 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a05f4:	6833      	ldr	r3, [r6, #0]
 80a05f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a05fa:	689b      	ldr	r3, [r3, #8]
 80a05fc:	4630      	mov	r0, r6
 80a05fe:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0600:	e7f6      	b.n	80a05f0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0602:	4628      	mov	r0, r5
 80a0604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0606 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0606:	2200      	movs	r2, #0
 80a0608:	7c00      	ldrb	r0, [r0, #16]
 80a060a:	f7ff be81 	b.w	80a0310 <HAL_I2C_Write_Data>

080a060e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a060e:	2100      	movs	r1, #0
 80a0610:	7c00      	ldrb	r0, [r0, #16]
 80a0612:	f7ff be85 	b.w	80a0320 <HAL_I2C_Available_Data>

080a0616 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0616:	2100      	movs	r1, #0
 80a0618:	7c00      	ldrb	r0, [r0, #16]
 80a061a:	f7ff be89 	b.w	80a0330 <HAL_I2C_Read_Data>

080a061e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a061e:	2100      	movs	r1, #0
 80a0620:	7c00      	ldrb	r0, [r0, #16]
 80a0622:	f7ff be8d 	b.w	80a0340 <HAL_I2C_Peek_Data>

080a0626 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0626:	2100      	movs	r1, #0
 80a0628:	7c00      	ldrb	r0, [r0, #16]
 80a062a:	f7ff be91 	b.w	80a0350 <HAL_I2C_Flush_Data>

080a062e <_ZN7TwoWireD0Ev>:
 80a062e:	b510      	push	{r4, lr}
 80a0630:	4604      	mov	r4, r0
 80a0632:	2114      	movs	r1, #20
 80a0634:	f000 fcc3 	bl	80a0fbe <_ZdlPvj>
 80a0638:	4620      	mov	r0, r4
 80a063a:	bd10      	pop	{r4, pc}

080a063c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a063c:	b510      	push	{r4, lr}
 80a063e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0640:	2300      	movs	r3, #0
 80a0642:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0644:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0648:	60a3      	str	r3, [r4, #8]
 80a064a:	4b04      	ldr	r3, [pc, #16]	; (80a065c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a064c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a064e:	4608      	mov	r0, r1
 80a0650:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a0652:	4611      	mov	r1, r2
 80a0654:	f7ff fe8c 	bl	80a0370 <HAL_I2C_Init>
}
 80a0658:	4620      	mov	r0, r4
 80a065a:	bd10      	pop	{r4, pc}
 80a065c:	080a1348 	.word	0x080a1348

080a0660 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a0660:	2100      	movs	r1, #0
 80a0662:	7c00      	ldrb	r0, [r0, #16]
 80a0664:	f7ff be7c 	b.w	80a0360 <HAL_I2C_Is_Enabled>

080a0668 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80a0668:	4700      	bx	r0
	...

080a066c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a066c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a066e:	461c      	mov	r4, r3
 80a0670:	b085      	sub	sp, #20
 80a0672:	460e      	mov	r6, r1
 80a0674:	4617      	mov	r7, r2
 80a0676:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
 80a0678:	f7ff fe42 	bl	80a0300 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 80a067c:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 80a067e:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a0680:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80a0684:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a0686:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80a068a:	bfb4      	ite	lt
 80a068c:	4603      	movlt	r3, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a068e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80a0692:	4632      	mov	r2, r6
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a0694:	bfa4      	itt	ge
 80a0696:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 80a069a:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80a069c:	9300      	str	r3, [sp, #0]
 80a069e:	4906      	ldr	r1, [pc, #24]	; (80a06b8 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)
 80a06a0:	463b      	mov	r3, r7
 80a06a2:	4628      	mov	r0, r5

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a06a4:	bfa8      	it	ge
 80a06a6:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80a06aa:	f7ff fe21 	bl	80a02f0 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 80a06ae:	fab0 f080 	clz	r0, r0
 80a06b2:	0940      	lsrs	r0, r0, #5
 80a06b4:	b005      	add	sp, #20
 80a06b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a06b8:	080a0669 	.word	0x080a0669

080a06bc <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
 80a06bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a06be:	4606      	mov	r6, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
 80a06c0:	f7ff fe1e 	bl	80a0300 <HAL_Interrupts_Detach>
 80a06c4:	4607      	mov	r7, r0
 80a06c6:	b968      	cbnz	r0, 80a06e4 <_Z15detachInterruptt+0x28>
        return false;
    }
    if (handlers[pin]) {
 80a06c8:	4d08      	ldr	r5, [pc, #32]	; (80a06ec <_Z15detachInterruptt+0x30>)
 80a06ca:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 80a06ce:	b15c      	cbz	r4, 80a06e8 <_Z15detachInterruptt+0x2c>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a06d0:	4620      	mov	r0, r4
 80a06d2:	f7ff ff7e 	bl	80a05d2 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
 80a06d6:	2110      	movs	r1, #16
 80a06d8:	4620      	mov	r0, r4
 80a06da:	f000 fc70 	bl	80a0fbe <_ZdlPvj>
        handlers[pin] = nullptr;
 80a06de:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
 80a06e2:	e001      	b.n	80a06e8 <_Z15detachInterruptt+0x2c>
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
        return false;
 80a06e4:	2000      	movs	r0, #0
 80a06e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    if (handlers[pin]) {
        delete handlers[pin];
        handlers[pin] = nullptr;
    }
    return true;
 80a06e8:	2001      	movs	r0, #1
}
 80a06ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a06ec:	2000009c 	.word	0x2000009c

080a06f0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a06f0:	4770      	bx	lr

080a06f2 <_ZN9IPAddressD0Ev>:
 80a06f2:	b510      	push	{r4, lr}
 80a06f4:	4604      	mov	r4, r0
 80a06f6:	2118      	movs	r1, #24
 80a06f8:	f000 fc61 	bl	80a0fbe <_ZdlPvj>
 80a06fc:	4620      	mov	r0, r4
 80a06fe:	bd10      	pop	{r4, pc}

080a0700 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0702:	460f      	mov	r7, r1
 80a0704:	f100 0608 	add.w	r6, r0, #8
 80a0708:	1d05      	adds	r5, r0, #4
 80a070a:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a070c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0710:	220a      	movs	r2, #10
 80a0712:	4638      	mov	r0, r7
 80a0714:	f000 f8e7 	bl	80a08e6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0718:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a071a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a071c:	d007      	beq.n	80a072e <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a071e:	2c00      	cmp	r4, #0
 80a0720:	d0f4      	beq.n	80a070c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0722:	212e      	movs	r1, #46	; 0x2e
 80a0724:	4638      	mov	r0, r7
 80a0726:	f000 f8db 	bl	80a08e0 <_ZN5Print5printEc>
 80a072a:	4404      	add	r4, r0
 80a072c:	e7ee      	b.n	80a070c <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a072e:	4620      	mov	r0, r4
 80a0730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0734 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0734:	b510      	push	{r4, lr}
 80a0736:	4604      	mov	r4, r0
 80a0738:	4b04      	ldr	r3, [pc, #16]	; (80a074c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a073a:	2211      	movs	r2, #17
 80a073c:	f840 3b04 	str.w	r3, [r0], #4
 80a0740:	2100      	movs	r1, #0
 80a0742:	f000 fdba 	bl	80a12ba <memset>
{
    clear();
}
 80a0746:	4620      	mov	r0, r4
 80a0748:	bd10      	pop	{r4, pc}
 80a074a:	bf00      	nop
 80a074c:	080a1370 	.word	0x080a1370

080a0750 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0750:	4603      	mov	r3, r0
 80a0752:	4a07      	ldr	r2, [pc, #28]	; (80a0770 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0754:	b510      	push	{r4, lr}
 80a0756:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a075a:	f101 0210 	add.w	r2, r1, #16
 80a075e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0762:	4291      	cmp	r1, r2
 80a0764:	f843 4b04 	str.w	r4, [r3], #4
 80a0768:	d1f9      	bne.n	80a075e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a076a:	780a      	ldrb	r2, [r1, #0]
 80a076c:	701a      	strb	r2, [r3, #0]
}
 80a076e:	bd10      	pop	{r4, pc}
 80a0770:	080a1370 	.word	0x080a1370

080a0774 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0774:	4a02      	ldr	r2, [pc, #8]	; (80a0780 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0776:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0778:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a077a:	2204      	movs	r2, #4
 80a077c:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a077e:	4770      	bx	lr
 80a0780:	080a1370 	.word	0x080a1370

080a0784 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0784:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0786:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a078a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a078e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0792:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a0796:	2304      	movs	r3, #4
 80a0798:	6041      	str	r1, [r0, #4]
 80a079a:	7503      	strb	r3, [r0, #20]
 80a079c:	bd10      	pop	{r4, pc}
	...

080a07a0 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a07a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a07a2:	4d04      	ldr	r5, [pc, #16]	; (80a07b4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a07a4:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a07a6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a07aa:	9500      	str	r5, [sp, #0]
 80a07ac:	f7ff ffea 	bl	80a0784 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a07b0:	b003      	add	sp, #12
 80a07b2:	bd30      	pop	{r4, r5, pc}
 80a07b4:	080a1370 	.word	0x080a1370

080a07b8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a07b8:	4a01      	ldr	r2, [pc, #4]	; (80a07c0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a07ba:	4b02      	ldr	r3, [pc, #8]	; (80a07c4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a07bc:	601a      	str	r2, [r3, #0]
 80a07be:	4770      	bx	lr
 80a07c0:	080a13f2 	.word	0x080a13f2
 80a07c4:	200000fc 	.word	0x200000fc

080a07c8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a07c8:	2300      	movs	r3, #0
 80a07ca:	461a      	mov	r2, r3
 80a07cc:	6840      	ldr	r0, [r0, #4]
 80a07ce:	f7ff be9d 	b.w	80a050c <network_connect>

080a07d2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a07d2:	2200      	movs	r2, #0
 80a07d4:	2102      	movs	r1, #2
 80a07d6:	6840      	ldr	r0, [r0, #4]
 80a07d8:	f7ff bea8 	b.w	80a052c <network_disconnect>

080a07dc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a07dc:	2200      	movs	r2, #0
 80a07de:	4611      	mov	r1, r2
 80a07e0:	6840      	ldr	r0, [r0, #4]
 80a07e2:	f7ff be9b 	b.w	80a051c <network_connecting>

080a07e6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a07e6:	2200      	movs	r2, #0
 80a07e8:	4611      	mov	r1, r2
 80a07ea:	6840      	ldr	r0, [r0, #4]
 80a07ec:	f7ff bea6 	b.w	80a053c <network_ready>

080a07f0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a07f0:	2300      	movs	r3, #0
 80a07f2:	461a      	mov	r2, r3
 80a07f4:	4619      	mov	r1, r3
 80a07f6:	6840      	ldr	r0, [r0, #4]
 80a07f8:	f7ff bea8 	b.w	80a054c <network_on>

080a07fc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a07fc:	2300      	movs	r3, #0
 80a07fe:	461a      	mov	r2, r3
 80a0800:	4619      	mov	r1, r3
 80a0802:	6840      	ldr	r0, [r0, #4]
 80a0804:	f7ff beaa 	b.w	80a055c <network_off>

080a0808 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0808:	2200      	movs	r2, #0
 80a080a:	f081 0101 	eor.w	r1, r1, #1
 80a080e:	6840      	ldr	r0, [r0, #4]
 80a0810:	f7ff beac 	b.w	80a056c <network_listen>

080a0814 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0814:	2200      	movs	r2, #0
 80a0816:	6840      	ldr	r0, [r0, #4]
 80a0818:	f7ff beb8 	b.w	80a058c <network_set_listen_timeout>

080a081c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a081c:	2200      	movs	r2, #0
 80a081e:	4611      	mov	r1, r2
 80a0820:	6840      	ldr	r0, [r0, #4]
 80a0822:	f7ff bebb 	b.w	80a059c <network_get_listen_timeout>

080a0826 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0826:	2200      	movs	r2, #0
 80a0828:	4611      	mov	r1, r2
 80a082a:	6840      	ldr	r0, [r0, #4]
 80a082c:	f7ff bea6 	b.w	80a057c <network_listening>

080a0830 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0830:	b570      	push	{r4, r5, r6, lr}
 80a0832:	4616      	mov	r6, r2
 80a0834:	b08e      	sub	sp, #56	; 0x38
 80a0836:	4604      	mov	r4, r0
    IPAddress addr;
 80a0838:	a808      	add	r0, sp, #32
 80a083a:	f7ff ff7b 	bl	80a0734 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a083e:	2211      	movs	r2, #17
 80a0840:	2100      	movs	r1, #0
 80a0842:	a803      	add	r0, sp, #12
 80a0844:	f000 fd39 	bl	80a12ba <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0848:	4630      	mov	r0, r6
 80a084a:	f000 fd67 	bl	80a131c <strlen>
 80a084e:	2500      	movs	r5, #0
 80a0850:	4b0a      	ldr	r3, [pc, #40]	; (80a087c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0852:	9500      	str	r5, [sp, #0]
 80a0854:	b281      	uxth	r1, r0
 80a0856:	685b      	ldr	r3, [r3, #4]
 80a0858:	aa03      	add	r2, sp, #12
 80a085a:	4630      	mov	r0, r6
 80a085c:	f7ff fe1a 	bl	80a0494 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0860:	b120      	cbz	r0, 80a086c <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a0862:	4629      	mov	r1, r5
 80a0864:	4620      	mov	r0, r4
 80a0866:	f7ff ff85 	bl	80a0774 <_ZN9IPAddressC1Em>
 80a086a:	e003      	b.n	80a0874 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a086c:	a903      	add	r1, sp, #12
 80a086e:	4620      	mov	r0, r4
 80a0870:	f7ff ff6e 	bl	80a0750 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0874:	4620      	mov	r0, r4
 80a0876:	b00e      	add	sp, #56	; 0x38
 80a0878:	bd70      	pop	{r4, r5, r6, pc}
 80a087a:	bf00      	nop
 80a087c:	20000178 	.word	0x20000178

080a0880 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0880:	4b02      	ldr	r3, [pc, #8]	; (80a088c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0882:	4a03      	ldr	r2, [pc, #12]	; (80a0890 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0884:	601a      	str	r2, [r3, #0]
 80a0886:	2200      	movs	r2, #0
 80a0888:	605a      	str	r2, [r3, #4]
 80a088a:	4770      	bx	lr
 80a088c:	20000100 	.word	0x20000100
 80a0890:	080a1468 	.word	0x080a1468

080a0894 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0896:	4606      	mov	r6, r0
 80a0898:	460d      	mov	r5, r1
 80a089a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a089c:	2400      	movs	r4, #0
  while (size--) {
 80a089e:	42bd      	cmp	r5, r7
 80a08a0:	d00c      	beq.n	80a08bc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a08a2:	6833      	ldr	r3, [r6, #0]
 80a08a4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a08a8:	689b      	ldr	r3, [r3, #8]
 80a08aa:	4630      	mov	r0, r6
 80a08ac:	4798      	blx	r3
     if (chunk>=0)
 80a08ae:	2800      	cmp	r0, #0
 80a08b0:	db01      	blt.n	80a08b6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a08b2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a08b4:	e7f3      	b.n	80a089e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a08b6:	2c00      	cmp	r4, #0
 80a08b8:	bf08      	it	eq
 80a08ba:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a08bc:	4620      	mov	r0, r4
 80a08be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a08c0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a08c0:	b570      	push	{r4, r5, r6, lr}
 80a08c2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a08c4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a08c6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a08c8:	b149      	cbz	r1, 80a08de <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a08ca:	f000 fd27 	bl	80a131c <strlen>
 80a08ce:	682b      	ldr	r3, [r5, #0]
 80a08d0:	4602      	mov	r2, r0
 80a08d2:	4621      	mov	r1, r4
 80a08d4:	4628      	mov	r0, r5
    }
 80a08d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a08da:	68db      	ldr	r3, [r3, #12]
 80a08dc:	4718      	bx	r3
    }
 80a08de:	bd70      	pop	{r4, r5, r6, pc}

080a08e0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a08e0:	6803      	ldr	r3, [r0, #0]
 80a08e2:	689b      	ldr	r3, [r3, #8]
 80a08e4:	4718      	bx	r3

080a08e6 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a08e6:	2a01      	cmp	r2, #1
 80a08e8:	bf98      	it	ls
 80a08ea:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a08ec:	b530      	push	{r4, r5, lr}
 80a08ee:	460b      	mov	r3, r1
 80a08f0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a08f2:	2100      	movs	r1, #0
 80a08f4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a08f8:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a08fc:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a0900:	fb05 3312 	mls	r3, r5, r2, r3
 80a0904:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0906:	2b09      	cmp	r3, #9
 80a0908:	bf94      	ite	ls
 80a090a:	3330      	addls	r3, #48	; 0x30
 80a090c:	3337      	addhi	r3, #55	; 0x37
 80a090e:	b2db      	uxtb	r3, r3
 80a0910:	4621      	mov	r1, r4
 80a0912:	f804 3901 	strb.w	r3, [r4], #-1
 80a0916:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0918:	2d00      	cmp	r5, #0
 80a091a:	d1ef      	bne.n	80a08fc <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a091c:	f7ff ffd0 	bl	80a08c0 <_ZN5Print5writeEPKc>
}
 80a0920:	b00b      	add	sp, #44	; 0x2c
 80a0922:	bd30      	pop	{r4, r5, pc}

080a0924 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0924:	b510      	push	{r4, lr}
 80a0926:	4604      	mov	r4, r0
 80a0928:	f7ff fe53 	bl	80a05d2 <_ZNSt14_Function_baseD1Ev>
 80a092c:	4620      	mov	r0, r4
 80a092e:	bd10      	pop	{r4, pc}

080a0930 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0930:	4803      	ldr	r0, [pc, #12]	; (80a0940 <_GLOBAL__sub_I_RGB+0x10>)
 80a0932:	2300      	movs	r3, #0
 80a0934:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0936:	4a03      	ldr	r2, [pc, #12]	; (80a0944 <_GLOBAL__sub_I_RGB+0x14>)
 80a0938:	4903      	ldr	r1, [pc, #12]	; (80a0948 <_GLOBAL__sub_I_RGB+0x18>)
 80a093a:	f000 bb3b 	b.w	80a0fb4 <__aeabi_atexit>
 80a093e:	bf00      	nop
 80a0940:	20000108 	.word	0x20000108
 80a0944:	20000078 	.word	0x20000078
 80a0948:	080a0925 	.word	0x080a0925

080a094c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a094c:	b570      	push	{r4, r5, r6, lr}
 80a094e:	4604      	mov	r4, r0
 80a0950:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a0952:	2500      	movs	r5, #0
 80a0954:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0958:	f7ff fc82 	bl	80a0260 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a095c:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a095e:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80a0960:	f7ff fd10 	bl	80a0384 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0964:	6065      	str	r5, [r4, #4]
}
 80a0966:	4620      	mov	r0, r4
 80a0968:	bd70      	pop	{r4, r5, r6, pc}

080a096a <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a096a:	7800      	ldrb	r0, [r0, #0]
 80a096c:	f7ff bd12 	b.w	80a0394 <HAL_SPI_Is_Enabled>

080a0970 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0970:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0974:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a0976:	4c08      	ldr	r4, [pc, #32]	; (80a0998 <_GLOBAL__sub_I_System+0x28>)
 80a0978:	2000      	movs	r0, #0
 80a097a:	6020      	str	r0, [r4, #0]
 80a097c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a097e:	71a0      	strb	r0, [r4, #6]
 80a0980:	8120      	strh	r0, [r4, #8]
 80a0982:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0984:	f7ff fd8e 	bl	80a04a4 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a0988:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a098a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a098e:	4a03      	ldr	r2, [pc, #12]	; (80a099c <_GLOBAL__sub_I_System+0x2c>)
 80a0990:	4903      	ldr	r1, [pc, #12]	; (80a09a0 <_GLOBAL__sub_I_System+0x30>)
 80a0992:	f000 bb0f 	b.w	80a0fb4 <__aeabi_atexit>
 80a0996:	bf00      	nop
 80a0998:	20000118 	.word	0x20000118
 80a099c:	20000078 	.word	0x20000078
 80a09a0:	080a00b3 	.word	0x080a00b3

080a09a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a09a4:	4b02      	ldr	r3, [pc, #8]	; (80a09b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a09a6:	681a      	ldr	r2, [r3, #0]
 80a09a8:	4b02      	ldr	r3, [pc, #8]	; (80a09b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a09aa:	601a      	str	r2, [r3, #0]
 80a09ac:	4770      	bx	lr
 80a09ae:	bf00      	nop
 80a09b0:	2000000c 	.word	0x2000000c
 80a09b4:	20000124 	.word	0x20000124

080a09b8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a09b8:	4770      	bx	lr

080a09ba <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a09ba:	7441      	strb	r1, [r0, #17]
 80a09bc:	4770      	bx	lr

080a09be <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a09be:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a09c0:	7c00      	ldrb	r0, [r0, #16]
 80a09c2:	f7ff fd27 	bl	80a0414 <HAL_USART_Available_Data_For_Write>
}
 80a09c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a09ca:	bd08      	pop	{r3, pc}

080a09cc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a09cc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a09ce:	7c00      	ldrb	r0, [r0, #16]
 80a09d0:	f7ff fcf8 	bl	80a03c4 <HAL_USART_Available_Data>
}
 80a09d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a09d8:	bd08      	pop	{r3, pc}

080a09da <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a09da:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a09dc:	7c00      	ldrb	r0, [r0, #16]
 80a09de:	f7ff fd01 	bl	80a03e4 <HAL_USART_Peek_Data>
}
 80a09e2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a09e6:	bf28      	it	cs
 80a09e8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a09ec:	bd08      	pop	{r3, pc}

080a09ee <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a09ee:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a09f0:	7c00      	ldrb	r0, [r0, #16]
 80a09f2:	f7ff fcef 	bl	80a03d4 <HAL_USART_Read_Data>
}
 80a09f6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a09fa:	bf28      	it	cs
 80a09fc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0a00:	bd08      	pop	{r3, pc}

080a0a02 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a0a02:	7c00      	ldrb	r0, [r0, #16]
 80a0a04:	f7ff bcf6 	b.w	80a03f4 <HAL_USART_Flush_Data>

080a0a08 <_ZN11USARTSerialD0Ev>:
 80a0a08:	b510      	push	{r4, lr}
 80a0a0a:	4604      	mov	r4, r0
 80a0a0c:	2114      	movs	r1, #20
 80a0a0e:	f000 fad6 	bl	80a0fbe <_ZdlPvj>
 80a0a12:	4620      	mov	r0, r4
 80a0a14:	bd10      	pop	{r4, pc}

080a0a16 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0a16:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0a18:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a0a1a:	4604      	mov	r4, r0
 80a0a1c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0a1e:	b925      	cbnz	r5, 80a0a2a <_ZN11USARTSerial5writeEh+0x14>
 80a0a20:	7c00      	ldrb	r0, [r0, #16]
 80a0a22:	f7ff fcf7 	bl	80a0414 <HAL_USART_Available_Data_For_Write>
 80a0a26:	2800      	cmp	r0, #0
 80a0a28:	dd05      	ble.n	80a0a36 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0a2a:	4631      	mov	r1, r6
 80a0a2c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0a2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0a32:	f7ff bcbf 	b.w	80a03b4 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a0a36:	4628      	mov	r0, r5
 80a0a38:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0a3c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0a3c:	b510      	push	{r4, lr}
 80a0a3e:	4604      	mov	r4, r0
 80a0a40:	4608      	mov	r0, r1
 80a0a42:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0a44:	2200      	movs	r2, #0
 80a0a46:	6062      	str	r2, [r4, #4]
 80a0a48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0a4c:	60a2      	str	r2, [r4, #8]
 80a0a4e:	4a05      	ldr	r2, [pc, #20]	; (80a0a64 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a0a50:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0a52:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a0a54:	2201      	movs	r2, #1
 80a0a56:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a0a58:	461a      	mov	r2, r3
 80a0a5a:	f7ff fca3 	bl	80a03a4 <HAL_USART_Init>
}
 80a0a5e:	4620      	mov	r0, r4
 80a0a60:	bd10      	pop	{r4, pc}
 80a0a62:	bf00      	nop
 80a0a64:	080a14c8 	.word	0x080a14c8

080a0a68 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a0a68:	7c00      	ldrb	r0, [r0, #16]
 80a0a6a:	f7ff bccb 	b.w	80a0404 <HAL_USART_Is_Enabled>
	...

080a0a70 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a0a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a0a72:	4c19      	ldr	r4, [pc, #100]	; (80a0ad8 <_Z22__fetch_global_Serial1v+0x68>)
 80a0a74:	6825      	ldr	r5, [r4, #0]
 80a0a76:	b94d      	cbnz	r5, 80a0a8c <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a0a78:	2084      	movs	r0, #132	; 0x84
 80a0a7a:	f7ff fb0e 	bl	80a009a <_Znwj>
 80a0a7e:	4606      	mov	r6, r0
 80a0a80:	b118      	cbz	r0, 80a0a8a <_Z22__fetch_global_Serial1v+0x1a>
 80a0a82:	2284      	movs	r2, #132	; 0x84
 80a0a84:	4629      	mov	r1, r5
 80a0a86:	f000 fc18 	bl	80a12ba <memset>
 80a0a8a:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a0a8c:	4d13      	ldr	r5, [pc, #76]	; (80a0adc <_Z22__fetch_global_Serial1v+0x6c>)
 80a0a8e:	682e      	ldr	r6, [r5, #0]
 80a0a90:	b94e      	cbnz	r6, 80a0aa6 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a0a92:	2084      	movs	r0, #132	; 0x84
 80a0a94:	f7ff fb01 	bl	80a009a <_Znwj>
 80a0a98:	4607      	mov	r7, r0
 80a0a9a:	b118      	cbz	r0, 80a0aa4 <_Z22__fetch_global_Serial1v+0x34>
 80a0a9c:	2284      	movs	r2, #132	; 0x84
 80a0a9e:	4631      	mov	r1, r6
 80a0aa0:	f000 fc0b 	bl	80a12ba <memset>
 80a0aa4:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a0aa6:	4f0e      	ldr	r7, [pc, #56]	; (80a0ae0 <_Z22__fetch_global_Serial1v+0x70>)
 80a0aa8:	6839      	ldr	r1, [r7, #0]
 80a0aaa:	f011 0601 	ands.w	r6, r1, #1
 80a0aae:	d111      	bne.n	80a0ad4 <_Z22__fetch_global_Serial1v+0x64>
 80a0ab0:	4638      	mov	r0, r7
 80a0ab2:	f7ff faf6 	bl	80a00a2 <__cxa_guard_acquire>
 80a0ab6:	b168      	cbz	r0, 80a0ad4 <_Z22__fetch_global_Serial1v+0x64>
 80a0ab8:	6822      	ldr	r2, [r4, #0]
 80a0aba:	4631      	mov	r1, r6
 80a0abc:	682b      	ldr	r3, [r5, #0]
 80a0abe:	4809      	ldr	r0, [pc, #36]	; (80a0ae4 <_Z22__fetch_global_Serial1v+0x74>)
 80a0ac0:	f7ff ffbc 	bl	80a0a3c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0ac4:	4638      	mov	r0, r7
 80a0ac6:	f7ff faf1 	bl	80a00ac <__cxa_guard_release>
 80a0aca:	4a07      	ldr	r2, [pc, #28]	; (80a0ae8 <_Z22__fetch_global_Serial1v+0x78>)
 80a0acc:	4907      	ldr	r1, [pc, #28]	; (80a0aec <_Z22__fetch_global_Serial1v+0x7c>)
 80a0ace:	4805      	ldr	r0, [pc, #20]	; (80a0ae4 <_Z22__fetch_global_Serial1v+0x74>)
 80a0ad0:	f000 fa70 	bl	80a0fb4 <__aeabi_atexit>
#endif
	return serial1;
}
 80a0ad4:	4803      	ldr	r0, [pc, #12]	; (80a0ae4 <_Z22__fetch_global_Serial1v+0x74>)
 80a0ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0ad8:	20000144 	.word	0x20000144
 80a0adc:	2000013c 	.word	0x2000013c
 80a0ae0:	20000140 	.word	0x20000140
 80a0ae4:	20000128 	.word	0x20000128
 80a0ae8:	20000078 	.word	0x20000078
 80a0aec:	080a09b9 	.word	0x080a09b9

080a0af0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0af0:	7441      	strb	r1, [r0, #17]
 80a0af2:	4770      	bx	lr

080a0af4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0af4:	4770      	bx	lr

080a0af6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a0af6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0af8:	2100      	movs	r1, #0
 80a0afa:	7c00      	ldrb	r0, [r0, #16]
 80a0afc:	f7ff fcb2 	bl	80a0464 <HAL_USB_USART_Receive_Data>
}
 80a0b00:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0b04:	bf28      	it	cs
 80a0b06:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0b0a:	bd08      	pop	{r3, pc}

080a0b0c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a0b0c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0b0e:	2101      	movs	r1, #1
 80a0b10:	7c00      	ldrb	r0, [r0, #16]
 80a0b12:	f7ff fca7 	bl	80a0464 <HAL_USB_USART_Receive_Data>
}
 80a0b16:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0b1a:	bf28      	it	cs
 80a0b1c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0b20:	bd08      	pop	{r3, pc}

080a0b22 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a0b22:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0b24:	7c00      	ldrb	r0, [r0, #16]
 80a0b26:	f7ff fc95 	bl	80a0454 <HAL_USB_USART_Available_Data_For_Write>
}
 80a0b2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0b2e:	bd08      	pop	{r3, pc}

080a0b30 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a0b30:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0b32:	7c00      	ldrb	r0, [r0, #16]
 80a0b34:	f7ff fc86 	bl	80a0444 <HAL_USB_USART_Available_Data>
}
 80a0b38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0b3c:	bd08      	pop	{r3, pc}

080a0b3e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a0b3e:	7c00      	ldrb	r0, [r0, #16]
 80a0b40:	f7ff bca0 	b.w	80a0484 <HAL_USB_USART_Flush_Data>

080a0b44 <_ZN9USBSerialD0Ev>:
 80a0b44:	b510      	push	{r4, lr}
 80a0b46:	4604      	mov	r4, r0
 80a0b48:	2114      	movs	r1, #20
 80a0b4a:	f000 fa38 	bl	80a0fbe <_ZdlPvj>
 80a0b4e:	4620      	mov	r0, r4
 80a0b50:	bd10      	pop	{r4, pc}

080a0b52 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0b52:	b538      	push	{r3, r4, r5, lr}
 80a0b54:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0b56:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0b58:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0b5a:	f7ff fc7b 	bl	80a0454 <HAL_USB_USART_Available_Data_For_Write>
 80a0b5e:	2800      	cmp	r0, #0
 80a0b60:	dc01      	bgt.n	80a0b66 <_ZN9USBSerial5writeEh+0x14>
 80a0b62:	7c60      	ldrb	r0, [r4, #17]
 80a0b64:	b128      	cbz	r0, 80a0b72 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0b66:	4629      	mov	r1, r5
 80a0b68:	7c20      	ldrb	r0, [r4, #16]
 80a0b6a:	f7ff fc83 	bl	80a0474 <HAL_USB_USART_Send_Data>
 80a0b6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a0b72:	bd38      	pop	{r3, r4, r5, pc}

080a0b74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0b74:	b510      	push	{r4, lr}
 80a0b76:	4604      	mov	r4, r0
 80a0b78:	2300      	movs	r3, #0
 80a0b7a:	6063      	str	r3, [r4, #4]
 80a0b7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0b80:	60a3      	str	r3, [r4, #8]
 80a0b82:	4b05      	ldr	r3, [pc, #20]	; (80a0b98 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a0b84:	4608      	mov	r0, r1
 80a0b86:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a0b88:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a0b8a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a0b8c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a0b8e:	4611      	mov	r1, r2
 80a0b90:	f7ff fc48 	bl	80a0424 <HAL_USB_USART_Init>
}
 80a0b94:	4620      	mov	r0, r4
 80a0b96:	bd10      	pop	{r4, pc}
 80a0b98:	080a14f8 	.word	0x080a14f8

080a0b9c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a0b9c:	2200      	movs	r2, #0
 80a0b9e:	7c00      	ldrb	r0, [r0, #16]
 80a0ba0:	f7ff bc48 	b.w	80a0434 <HAL_USB_USART_Begin>

080a0ba4 <_Z19acquireSerialBufferv>:
 80a0ba4:	b510      	push	{r4, lr}
 80a0ba6:	4604      	mov	r4, r0
 80a0ba8:	2214      	movs	r2, #20
 80a0baa:	2100      	movs	r1, #0
 80a0bac:	f000 fb85 	bl	80a12ba <memset>
 80a0bb0:	4620      	mov	r0, r4
 80a0bb2:	bd10      	pop	{r4, pc}

080a0bb4 <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0bb4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0bb6:	4d0e      	ldr	r5, [pc, #56]	; (80a0bf0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0bb8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0bba:	a801      	add	r0, sp, #4
 80a0bbc:	f7ff fff2 	bl	80a0ba4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0bc0:	6829      	ldr	r1, [r5, #0]
 80a0bc2:	f011 0401 	ands.w	r4, r1, #1
 80a0bc6:	d110      	bne.n	80a0bea <_Z16_fetch_usbserialv+0x36>
 80a0bc8:	4628      	mov	r0, r5
 80a0bca:	f7ff fa6a 	bl	80a00a2 <__cxa_guard_acquire>
 80a0bce:	b160      	cbz	r0, 80a0bea <_Z16_fetch_usbserialv+0x36>
 80a0bd0:	aa01      	add	r2, sp, #4
 80a0bd2:	4621      	mov	r1, r4
 80a0bd4:	4807      	ldr	r0, [pc, #28]	; (80a0bf4 <_Z16_fetch_usbserialv+0x40>)
 80a0bd6:	f7ff ffcd 	bl	80a0b74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0bda:	4628      	mov	r0, r5
 80a0bdc:	f7ff fa66 	bl	80a00ac <__cxa_guard_release>
 80a0be0:	4a05      	ldr	r2, [pc, #20]	; (80a0bf8 <_Z16_fetch_usbserialv+0x44>)
 80a0be2:	4906      	ldr	r1, [pc, #24]	; (80a0bfc <_Z16_fetch_usbserialv+0x48>)
 80a0be4:	4803      	ldr	r0, [pc, #12]	; (80a0bf4 <_Z16_fetch_usbserialv+0x40>)
 80a0be6:	f000 f9e5 	bl	80a0fb4 <__aeabi_atexit>
	return _usbserial;
}
 80a0bea:	4802      	ldr	r0, [pc, #8]	; (80a0bf4 <_Z16_fetch_usbserialv+0x40>)
 80a0bec:	b007      	add	sp, #28
 80a0bee:	bd30      	pop	{r4, r5, pc}
 80a0bf0:	20000148 	.word	0x20000148
 80a0bf4:	20000150 	.word	0x20000150
 80a0bf8:	20000078 	.word	0x20000078
 80a0bfc:	080a0af5 	.word	0x080a0af5

080a0c00 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0c00:	b510      	push	{r4, lr}
 80a0c02:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0c04:	2214      	movs	r2, #20
 80a0c06:	2100      	movs	r1, #0
 80a0c08:	f000 fb57 	bl	80a12ba <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0c0c:	4620      	mov	r0, r4
 80a0c0e:	bd10      	pop	{r4, pc}

080a0c10 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0c10:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0c12:	4c0e      	ldr	r4, [pc, #56]	; (80a0c4c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0c14:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0c16:	a801      	add	r0, sp, #4
 80a0c18:	f7ff fff2 	bl	80a0c00 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0c1c:	6823      	ldr	r3, [r4, #0]
 80a0c1e:	07db      	lsls	r3, r3, #31
 80a0c20:	d410      	bmi.n	80a0c44 <_Z17_fetch_usbserial1v+0x34>
 80a0c22:	4620      	mov	r0, r4
 80a0c24:	f7ff fa3d 	bl	80a00a2 <__cxa_guard_acquire>
 80a0c28:	b160      	cbz	r0, 80a0c44 <_Z17_fetch_usbserial1v+0x34>
 80a0c2a:	aa01      	add	r2, sp, #4
 80a0c2c:	2101      	movs	r1, #1
 80a0c2e:	4808      	ldr	r0, [pc, #32]	; (80a0c50 <_Z17_fetch_usbserial1v+0x40>)
 80a0c30:	f7ff ffa0 	bl	80a0b74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0c34:	4620      	mov	r0, r4
 80a0c36:	f7ff fa39 	bl	80a00ac <__cxa_guard_release>
 80a0c3a:	4a06      	ldr	r2, [pc, #24]	; (80a0c54 <_Z17_fetch_usbserial1v+0x44>)
 80a0c3c:	4906      	ldr	r1, [pc, #24]	; (80a0c58 <_Z17_fetch_usbserial1v+0x48>)
 80a0c3e:	4804      	ldr	r0, [pc, #16]	; (80a0c50 <_Z17_fetch_usbserial1v+0x40>)
 80a0c40:	f000 f9b8 	bl	80a0fb4 <__aeabi_atexit>
  return _usbserial1;
}
 80a0c44:	4802      	ldr	r0, [pc, #8]	; (80a0c50 <_Z17_fetch_usbserial1v+0x40>)
 80a0c46:	b006      	add	sp, #24
 80a0c48:	bd10      	pop	{r4, pc}
 80a0c4a:	bf00      	nop
 80a0c4c:	2000014c 	.word	0x2000014c
 80a0c50:	20000164 	.word	0x20000164
 80a0c54:	20000078 	.word	0x20000078
 80a0c58:	080a0af5 	.word	0x080a0af5

080a0c5c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0c5c:	2200      	movs	r2, #0
 80a0c5e:	4611      	mov	r1, r2
 80a0c60:	6840      	ldr	r0, [r0, #4]
 80a0c62:	f7ff bc6b 	b.w	80a053c <network_ready>

080a0c66 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0c66:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0c68:	4616      	mov	r6, r2
 80a0c6a:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a0c6c:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0c6e:	460f      	mov	r7, r1
 80a0c70:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a0c72:	2100      	movs	r1, #0
 80a0c74:	a803      	add	r0, sp, #12
 80a0c76:	f000 fb20 	bl	80a12ba <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0c7a:	4630      	mov	r0, r6
 80a0c7c:	f000 fb4e 	bl	80a131c <strlen>
 80a0c80:	2500      	movs	r5, #0
 80a0c82:	9500      	str	r5, [sp, #0]
 80a0c84:	b281      	uxth	r1, r0
 80a0c86:	687b      	ldr	r3, [r7, #4]
 80a0c88:	aa03      	add	r2, sp, #12
 80a0c8a:	4630      	mov	r0, r6
 80a0c8c:	f7ff fc02 	bl	80a0494 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0c90:	b120      	cbz	r0, 80a0c9c <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a0c92:	4629      	mov	r1, r5
 80a0c94:	4620      	mov	r0, r4
 80a0c96:	f7ff fd6d 	bl	80a0774 <_ZN9IPAddressC1Em>
 80a0c9a:	e003      	b.n	80a0ca4 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a0c9c:	a903      	add	r1, sp, #12
 80a0c9e:	4620      	mov	r0, r4
 80a0ca0:	f7ff fd56 	bl	80a0750 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a0ca4:	4620      	mov	r0, r4
 80a0ca6:	b009      	add	sp, #36	; 0x24
 80a0ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0caa <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a0caa:	2200      	movs	r2, #0
 80a0cac:	4611      	mov	r1, r2
 80a0cae:	6840      	ldr	r0, [r0, #4]
 80a0cb0:	f7ff bc64 	b.w	80a057c <network_listening>

080a0cb4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a0cb4:	2200      	movs	r2, #0
 80a0cb6:	4611      	mov	r1, r2
 80a0cb8:	6840      	ldr	r0, [r0, #4]
 80a0cba:	f7ff bc6f 	b.w	80a059c <network_get_listen_timeout>

080a0cbe <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a0cbe:	2200      	movs	r2, #0
 80a0cc0:	6840      	ldr	r0, [r0, #4]
 80a0cc2:	f7ff bc63 	b.w	80a058c <network_set_listen_timeout>

080a0cc6 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0cc6:	2200      	movs	r2, #0
 80a0cc8:	f081 0101 	eor.w	r1, r1, #1
 80a0ccc:	6840      	ldr	r0, [r0, #4]
 80a0cce:	f7ff bc4d 	b.w	80a056c <network_listen>

080a0cd2 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a0cd2:	2300      	movs	r3, #0
 80a0cd4:	461a      	mov	r2, r3
 80a0cd6:	4619      	mov	r1, r3
 80a0cd8:	6840      	ldr	r0, [r0, #4]
 80a0cda:	f7ff bc3f 	b.w	80a055c <network_off>

080a0cde <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0cde:	2300      	movs	r3, #0
 80a0ce0:	461a      	mov	r2, r3
 80a0ce2:	4619      	mov	r1, r3
 80a0ce4:	6840      	ldr	r0, [r0, #4]
 80a0ce6:	f7ff bc31 	b.w	80a054c <network_on>

080a0cea <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a0cea:	2200      	movs	r2, #0
 80a0cec:	4611      	mov	r1, r2
 80a0cee:	6840      	ldr	r0, [r0, #4]
 80a0cf0:	f7ff bc14 	b.w	80a051c <network_connecting>

080a0cf4 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0cf4:	2200      	movs	r2, #0
 80a0cf6:	2102      	movs	r1, #2
 80a0cf8:	6840      	ldr	r0, [r0, #4]
 80a0cfa:	f7ff bc17 	b.w	80a052c <network_disconnect>

080a0cfe <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0cfe:	2300      	movs	r3, #0
 80a0d00:	461a      	mov	r2, r3
 80a0d02:	6840      	ldr	r0, [r0, #4]
 80a0d04:	f7ff bc02 	b.w	80a050c <network_connect>

080a0d08 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a0d08:	4b02      	ldr	r3, [pc, #8]	; (80a0d14 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0d0a:	2204      	movs	r2, #4
 80a0d0c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0d0e:	4a02      	ldr	r2, [pc, #8]	; (80a0d18 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0d10:	601a      	str	r2, [r3, #0]
 80a0d12:	4770      	bx	lr
 80a0d14:	20000178 	.word	0x20000178
 80a0d18:	080a1528 	.word	0x080a1528

080a0d1c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0d1c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0d1e:	4b14      	ldr	r3, [pc, #80]	; (80a0d70 <serialEventRun+0x54>)
 80a0d20:	b133      	cbz	r3, 80a0d30 <serialEventRun+0x14>
 80a0d22:	f7ff ff47 	bl	80a0bb4 <_Z16_fetch_usbserialv>
 80a0d26:	6803      	ldr	r3, [r0, #0]
 80a0d28:	691b      	ldr	r3, [r3, #16]
 80a0d2a:	4798      	blx	r3
 80a0d2c:	2800      	cmp	r0, #0
 80a0d2e:	dc16      	bgt.n	80a0d5e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0d30:	4b10      	ldr	r3, [pc, #64]	; (80a0d74 <serialEventRun+0x58>)
 80a0d32:	b133      	cbz	r3, 80a0d42 <serialEventRun+0x26>
 80a0d34:	f7ff fe9c 	bl	80a0a70 <_Z22__fetch_global_Serial1v>
 80a0d38:	6803      	ldr	r3, [r0, #0]
 80a0d3a:	691b      	ldr	r3, [r3, #16]
 80a0d3c:	4798      	blx	r3
 80a0d3e:	2800      	cmp	r0, #0
 80a0d40:	dc10      	bgt.n	80a0d64 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0d42:	4b0d      	ldr	r3, [pc, #52]	; (80a0d78 <serialEventRun+0x5c>)
 80a0d44:	b10b      	cbz	r3, 80a0d4a <serialEventRun+0x2e>
 80a0d46:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0d4a:	4b0c      	ldr	r3, [pc, #48]	; (80a0d7c <serialEventRun+0x60>)
 80a0d4c:	b17b      	cbz	r3, 80a0d6e <serialEventRun+0x52>
 80a0d4e:	f7ff ff5f 	bl	80a0c10 <_Z17_fetch_usbserial1v>
 80a0d52:	6803      	ldr	r3, [r0, #0]
 80a0d54:	691b      	ldr	r3, [r3, #16]
 80a0d56:	4798      	blx	r3
 80a0d58:	2800      	cmp	r0, #0
 80a0d5a:	dc06      	bgt.n	80a0d6a <serialEventRun+0x4e>
 80a0d5c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0d5e:	f3af 8000 	nop.w
 80a0d62:	e7e5      	b.n	80a0d30 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0d64:	f3af 8000 	nop.w
 80a0d68:	e7eb      	b.n	80a0d42 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a0d6a:	f3af 8000 	nop.w
 80a0d6e:	bd08      	pop	{r3, pc}
	...

080a0d80 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0d80:	b508      	push	{r3, lr}
	serialEventRun();
 80a0d82:	f7ff ffcb 	bl	80a0d1c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0d86:	f7ff fa8b 	bl	80a02a0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0d8a:	4b01      	ldr	r3, [pc, #4]	; (80a0d90 <_post_loop+0x10>)
 80a0d8c:	6018      	str	r0, [r3, #0]
 80a0d8e:	bd08      	pop	{r3, pc}
 80a0d90:	20000198 	.word	0x20000198

080a0d94 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0d94:	4802      	ldr	r0, [pc, #8]	; (80a0da0 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0d96:	4a03      	ldr	r2, [pc, #12]	; (80a0da4 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0d98:	4903      	ldr	r1, [pc, #12]	; (80a0da8 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0d9a:	1a12      	subs	r2, r2, r0
 80a0d9c:	f000 ba82 	b.w	80a12a4 <memcpy>
 80a0da0:	40024000 	.word	0x40024000
 80a0da4:	40024004 	.word	0x40024004
 80a0da8:	080a15f0 	.word	0x080a15f0

080a0dac <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0dac:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0dae:	2300      	movs	r3, #0
 80a0db0:	9300      	str	r3, [sp, #0]
 80a0db2:	461a      	mov	r2, r3
 80a0db4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0db8:	f7ff fb96 	bl	80a04e8 <system_ctrl_set_result>
}
 80a0dbc:	b003      	add	sp, #12
 80a0dbe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0dc4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a0dc4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0dc6:	8843      	ldrh	r3, [r0, #2]
 80a0dc8:	2b0a      	cmp	r3, #10
 80a0dca:	d008      	beq.n	80a0dde <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0dcc:	2b50      	cmp	r3, #80	; 0x50
 80a0dce:	d109      	bne.n	80a0de4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a0dd0:	4b09      	ldr	r3, [pc, #36]	; (80a0df8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0dd2:	681b      	ldr	r3, [r3, #0]
 80a0dd4:	b13b      	cbz	r3, 80a0de6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a0dd6:	b003      	add	sp, #12
 80a0dd8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a0ddc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a0dde:	f7ff ffe5 	bl	80a0dac <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a0de2:	e006      	b.n	80a0df2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0de4:	2300      	movs	r3, #0
 80a0de6:	9300      	str	r3, [sp, #0]
 80a0de8:	461a      	mov	r2, r3
 80a0dea:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0dee:	f7ff fb7b 	bl	80a04e8 <system_ctrl_set_result>
        break;
    }
}
 80a0df2:	b003      	add	sp, #12
 80a0df4:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0df8:	20000180 	.word	0x20000180

080a0dfc <module_user_init_hook>:

void module_user_init_hook()
{
 80a0dfc:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0dfe:	4c10      	ldr	r4, [pc, #64]	; (80a0e40 <module_user_init_hook+0x44>)
 80a0e00:	4d10      	ldr	r5, [pc, #64]	; (80a0e44 <module_user_init_hook+0x48>)
 80a0e02:	6823      	ldr	r3, [r4, #0]
 80a0e04:	42ab      	cmp	r3, r5
 80a0e06:	4b10      	ldr	r3, [pc, #64]	; (80a0e48 <module_user_init_hook+0x4c>)
 80a0e08:	bf0c      	ite	eq
 80a0e0a:	2201      	moveq	r2, #1
 80a0e0c:	2200      	movne	r2, #0
 80a0e0e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0e10:	d002      	beq.n	80a0e18 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a0e12:	f7ff ffbf 	bl	80a0d94 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0e16:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0e18:	f7ff fa32 	bl	80a0280 <HAL_RNG_GetRandomNumber>
 80a0e1c:	4604      	mov	r4, r0
    srand(seed);
 80a0e1e:	f000 fa55 	bl	80a12cc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0e22:	4b0a      	ldr	r3, [pc, #40]	; (80a0e4c <module_user_init_hook+0x50>)
 80a0e24:	b113      	cbz	r3, 80a0e2c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a0e26:	4620      	mov	r0, r4
 80a0e28:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0e2c:	2100      	movs	r1, #0
 80a0e2e:	4807      	ldr	r0, [pc, #28]	; (80a0e4c <module_user_init_hook+0x50>)
 80a0e30:	f7ff fb64 	bl	80a04fc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0e38:	2100      	movs	r1, #0
 80a0e3a:	4805      	ldr	r0, [pc, #20]	; (80a0e50 <module_user_init_hook+0x54>)
 80a0e3c:	f7ff bb4a 	b.w	80a04d4 <system_ctrl_set_app_request_handler>
 80a0e40:	40024000 	.word	0x40024000
 80a0e44:	9a271c1e 	.word	0x9a271c1e
 80a0e48:	20000184 	.word	0x20000184
 80a0e4c:	00000000 	.word	0x00000000
 80a0e50:	080a0dc5 	.word	0x080a0dc5

080a0e54 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80a0e54:	b510      	push	{r4, lr}
 80a0e56:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a0e58:	6880      	ldr	r0, [r0, #8]
 80a0e5a:	b108      	cbz	r0, 80a0e60 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a0e5c:	f7ff fa08 	bl	80a0270 <os_mutex_recursive_destroy>
 80a0e60:	4620      	mov	r0, r4
 80a0e62:	bd10      	pop	{r4, pc}

080a0e64 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a0e64:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a0e66:	4e1a      	ldr	r6, [pc, #104]	; (80a0ed0 <pinAvailable+0x6c>)
 80a0e68:	4604      	mov	r4, r0
 80a0e6a:	6831      	ldr	r1, [r6, #0]
 80a0e6c:	f011 0501 	ands.w	r5, r1, #1
 80a0e70:	d10f      	bne.n	80a0e92 <pinAvailable+0x2e>
 80a0e72:	4630      	mov	r0, r6
 80a0e74:	f7ff f915 	bl	80a00a2 <__cxa_guard_acquire>
 80a0e78:	b158      	cbz	r0, 80a0e92 <pinAvailable+0x2e>
 80a0e7a:	4629      	mov	r1, r5
 80a0e7c:	4815      	ldr	r0, [pc, #84]	; (80a0ed4 <pinAvailable+0x70>)
 80a0e7e:	f7ff fd65 	bl	80a094c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0e82:	4630      	mov	r0, r6
 80a0e84:	f7ff f912 	bl	80a00ac <__cxa_guard_release>
 80a0e88:	4a13      	ldr	r2, [pc, #76]	; (80a0ed8 <pinAvailable+0x74>)
 80a0e8a:	4914      	ldr	r1, [pc, #80]	; (80a0edc <pinAvailable+0x78>)
 80a0e8c:	4811      	ldr	r0, [pc, #68]	; (80a0ed4 <pinAvailable+0x70>)
 80a0e8e:	f000 f891 	bl	80a0fb4 <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80a0e92:	4810      	ldr	r0, [pc, #64]	; (80a0ed4 <pinAvailable+0x70>)
 80a0e94:	f7ff fd69 	bl	80a096a <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a0e98:	b128      	cbz	r0, 80a0ea6 <pinAvailable+0x42>
 80a0e9a:	f1a4 030d 	sub.w	r3, r4, #13
 80a0e9e:	2b02      	cmp	r3, #2
 80a0ea0:	d801      	bhi.n	80a0ea6 <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80a0ea2:	2000      	movs	r0, #0
 80a0ea4:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a0ea6:	f000 f847 	bl	80a0f38 <_Z19__fetch_global_Wirev>
 80a0eaa:	f7ff fbd9 	bl	80a0660 <_ZN7TwoWire9isEnabledEv>
 80a0eae:	b108      	cbz	r0, 80a0eb4 <pinAvailable+0x50>
 80a0eb0:	2c01      	cmp	r4, #1
 80a0eb2:	d9f6      	bls.n	80a0ea2 <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a0eb4:	f7ff fddc 	bl	80a0a70 <_Z22__fetch_global_Serial1v>
 80a0eb8:	f7ff fdd6 	bl	80a0a68 <_ZN11USARTSerial9isEnabledEv>
 80a0ebc:	b118      	cbz	r0, 80a0ec6 <pinAvailable+0x62>
 80a0ebe:	f1a4 0312 	sub.w	r3, r4, #18
 80a0ec2:	2b01      	cmp	r3, #1
 80a0ec4:	d9ed      	bls.n	80a0ea2 <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a0ec6:	2c17      	cmp	r4, #23
 80a0ec8:	bf8c      	ite	hi
 80a0eca:	2000      	movhi	r0, #0
 80a0ecc:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a0ece:	bd70      	pop	{r4, r5, r6, pc}
 80a0ed0:	20000188 	.word	0x20000188
 80a0ed4:	2000018c 	.word	0x2000018c
 80a0ed8:	20000078 	.word	0x20000078
 80a0edc:	080a0e55 	.word	0x080a0e55

080a0ee0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0ee0:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a0ee2:	b538      	push	{r3, r4, r5, lr}
 80a0ee4:	4604      	mov	r4, r0
 80a0ee6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0ee8:	d80a      	bhi.n	80a0f00 <pinMode+0x20>
 80a0eea:	29ff      	cmp	r1, #255	; 0xff
 80a0eec:	d008      	beq.n	80a0f00 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a0eee:	f7ff ffb9 	bl	80a0e64 <pinAvailable>
 80a0ef2:	b128      	cbz	r0, 80a0f00 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a0ef4:	4629      	mov	r1, r5
 80a0ef6:	4620      	mov	r0, r4
}
 80a0ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a0efc:	f7ff b9f0 	b.w	80a02e0 <HAL_Pin_Mode>
 80a0f00:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0f04 <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a0f04:	b570      	push	{r4, r5, r6, lr}
 80a0f06:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a0f08:	2514      	movs	r5, #20
 80a0f0a:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0f0c:	4e09      	ldr	r6, [pc, #36]	; (80a0f34 <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a0f0e:	2100      	movs	r1, #0
 80a0f10:	f000 f9d3 	bl	80a12ba <memset>
 80a0f14:	8025      	strh	r5, [r4, #0]
 80a0f16:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0f18:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a0f1a:	60a5      	str	r5, [r4, #8]
 80a0f1c:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0f1e:	4628      	mov	r0, r5
 80a0f20:	f000 f867 	bl	80a0ff2 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0f24:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a0f26:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0f28:	4628      	mov	r0, r5
 80a0f2a:	f000 f862 	bl	80a0ff2 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a0f2e:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a0f30:	4620      	mov	r0, r4
 80a0f32:	bd70      	pop	{r4, r5, r6, pc}
 80a0f34:	080a1554 	.word	0x080a1554

080a0f38 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a0f38:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0f3a:	4d0e      	ldr	r5, [pc, #56]	; (80a0f74 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a0f3c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0f3e:	6829      	ldr	r1, [r5, #0]
 80a0f40:	f011 0401 	ands.w	r4, r1, #1
 80a0f44:	d113      	bne.n	80a0f6e <_Z19__fetch_global_Wirev+0x36>
 80a0f46:	4628      	mov	r0, r5
 80a0f48:	f7ff f8ab 	bl	80a00a2 <__cxa_guard_acquire>
 80a0f4c:	b178      	cbz	r0, 80a0f6e <_Z19__fetch_global_Wirev+0x36>
 80a0f4e:	a801      	add	r0, sp, #4
 80a0f50:	f7ff ffd8 	bl	80a0f04 <_Z17acquireWireBufferv>
 80a0f54:	aa01      	add	r2, sp, #4
 80a0f56:	4621      	mov	r1, r4
 80a0f58:	4807      	ldr	r0, [pc, #28]	; (80a0f78 <_Z19__fetch_global_Wirev+0x40>)
 80a0f5a:	f7ff fb6f 	bl	80a063c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a0f5e:	4628      	mov	r0, r5
 80a0f60:	f7ff f8a4 	bl	80a00ac <__cxa_guard_release>
 80a0f64:	4a05      	ldr	r2, [pc, #20]	; (80a0f7c <_Z19__fetch_global_Wirev+0x44>)
 80a0f66:	4906      	ldr	r1, [pc, #24]	; (80a0f80 <_Z19__fetch_global_Wirev+0x48>)
 80a0f68:	4803      	ldr	r0, [pc, #12]	; (80a0f78 <_Z19__fetch_global_Wirev+0x40>)
 80a0f6a:	f000 f823 	bl	80a0fb4 <__aeabi_atexit>
	return wire;
}
 80a0f6e:	4802      	ldr	r0, [pc, #8]	; (80a0f78 <_Z19__fetch_global_Wirev+0x40>)
 80a0f70:	b007      	add	sp, #28
 80a0f72:	bd30      	pop	{r4, r5, pc}
 80a0f74:	2000019c 	.word	0x2000019c
 80a0f78:	200001a0 	.word	0x200001a0
 80a0f7c:	20000078 	.word	0x20000078
 80a0f80:	080a05e5 	.word	0x080a05e5

080a0f84 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0f84:	b513      	push	{r0, r1, r4, lr}
 80a0f86:	4c08      	ldr	r4, [pc, #32]	; (80a0fa8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a0f88:	2300      	movs	r3, #0
 80a0f8a:	461a      	mov	r2, r3
 80a0f8c:	4619      	mov	r1, r3
 80a0f8e:	9300      	str	r3, [sp, #0]
 80a0f90:	4620      	mov	r0, r4
 80a0f92:	f7ff fc05 	bl	80a07a0 <_ZN9IPAddressC1Ehhhh>
 80a0f96:	4620      	mov	r0, r4
 80a0f98:	4a04      	ldr	r2, [pc, #16]	; (80a0fac <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a0f9a:	4905      	ldr	r1, [pc, #20]	; (80a0fb0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a0f9c:	b002      	add	sp, #8
 80a0f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0fa2:	f000 b807 	b.w	80a0fb4 <__aeabi_atexit>
 80a0fa6:	bf00      	nop
 80a0fa8:	200001b4 	.word	0x200001b4
 80a0fac:	20000078 	.word	0x20000078
 80a0fb0:	080a06f1 	.word	0x080a06f1

080a0fb4 <__aeabi_atexit>:
 80a0fb4:	460b      	mov	r3, r1
 80a0fb6:	4601      	mov	r1, r0
 80a0fb8:	4618      	mov	r0, r3
 80a0fba:	f000 b965 	b.w	80a1288 <__cxa_atexit>

080a0fbe <_ZdlPvj>:
 80a0fbe:	f7ff b86e 	b.w	80a009e <_ZdlPv>
	...

080a0fc4 <_ZSt15get_new_handlerv>:
 80a0fc4:	4b02      	ldr	r3, [pc, #8]	; (80a0fd0 <_ZSt15get_new_handlerv+0xc>)
 80a0fc6:	6818      	ldr	r0, [r3, #0]
 80a0fc8:	f3bf 8f5f 	dmb	sy
 80a0fcc:	4770      	bx	lr
 80a0fce:	bf00      	nop
 80a0fd0:	200001cc 	.word	0x200001cc

080a0fd4 <_ZnwjRKSt9nothrow_t>:
 80a0fd4:	b510      	push	{r4, lr}
 80a0fd6:	2800      	cmp	r0, #0
 80a0fd8:	bf14      	ite	ne
 80a0fda:	4604      	movne	r4, r0
 80a0fdc:	2401      	moveq	r4, #1
 80a0fde:	4620      	mov	r0, r4
 80a0fe0:	f7ff fae4 	bl	80a05ac <malloc>
 80a0fe4:	b920      	cbnz	r0, 80a0ff0 <_ZnwjRKSt9nothrow_t+0x1c>
 80a0fe6:	f7ff ffed 	bl	80a0fc4 <_ZSt15get_new_handlerv>
 80a0fea:	b108      	cbz	r0, 80a0ff0 <_ZnwjRKSt9nothrow_t+0x1c>
 80a0fec:	4780      	blx	r0
 80a0fee:	e7f6      	b.n	80a0fde <_ZnwjRKSt9nothrow_t+0xa>
 80a0ff0:	bd10      	pop	{r4, pc}

080a0ff2 <_ZnajRKSt9nothrow_t>:
 80a0ff2:	f7ff bfef 	b.w	80a0fd4 <_ZnwjRKSt9nothrow_t>
	...

080a0ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a0ff8:	4b24      	ldr	r3, [pc, #144]	; (80a108c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a0ffa:	681a      	ldr	r2, [r3, #0]
 80a0ffc:	07d0      	lsls	r0, r2, #31
 80a0ffe:	bf5c      	itt	pl
 80a1000:	2201      	movpl	r2, #1
 80a1002:	601a      	strpl	r2, [r3, #0]
 80a1004:	4b22      	ldr	r3, [pc, #136]	; (80a1090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a1006:	681a      	ldr	r2, [r3, #0]
 80a1008:	07d1      	lsls	r1, r2, #31
 80a100a:	bf5c      	itt	pl
 80a100c:	2201      	movpl	r2, #1
 80a100e:	601a      	strpl	r2, [r3, #0]
 80a1010:	4b20      	ldr	r3, [pc, #128]	; (80a1094 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1012:	681a      	ldr	r2, [r3, #0]
 80a1014:	07d2      	lsls	r2, r2, #31
 80a1016:	bf5c      	itt	pl
 80a1018:	2201      	movpl	r2, #1
 80a101a:	601a      	strpl	r2, [r3, #0]
 80a101c:	4b1e      	ldr	r3, [pc, #120]	; (80a1098 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a101e:	681a      	ldr	r2, [r3, #0]
 80a1020:	07d0      	lsls	r0, r2, #31
 80a1022:	bf5c      	itt	pl
 80a1024:	2201      	movpl	r2, #1
 80a1026:	601a      	strpl	r2, [r3, #0]
 80a1028:	4b1c      	ldr	r3, [pc, #112]	; (80a109c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a102a:	681a      	ldr	r2, [r3, #0]
 80a102c:	07d1      	lsls	r1, r2, #31
 80a102e:	bf5c      	itt	pl
 80a1030:	2201      	movpl	r2, #1
 80a1032:	601a      	strpl	r2, [r3, #0]
 80a1034:	4b1a      	ldr	r3, [pc, #104]	; (80a10a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a1036:	681a      	ldr	r2, [r3, #0]
 80a1038:	07d2      	lsls	r2, r2, #31
 80a103a:	bf5c      	itt	pl
 80a103c:	2201      	movpl	r2, #1
 80a103e:	601a      	strpl	r2, [r3, #0]
 80a1040:	4b18      	ldr	r3, [pc, #96]	; (80a10a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1042:	681a      	ldr	r2, [r3, #0]
 80a1044:	07d0      	lsls	r0, r2, #31
 80a1046:	bf5c      	itt	pl
 80a1048:	2201      	movpl	r2, #1
 80a104a:	601a      	strpl	r2, [r3, #0]
 80a104c:	4b16      	ldr	r3, [pc, #88]	; (80a10a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a104e:	681a      	ldr	r2, [r3, #0]
 80a1050:	07d1      	lsls	r1, r2, #31
 80a1052:	bf5c      	itt	pl
 80a1054:	2201      	movpl	r2, #1
 80a1056:	601a      	strpl	r2, [r3, #0]
 80a1058:	4b14      	ldr	r3, [pc, #80]	; (80a10ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a105a:	681a      	ldr	r2, [r3, #0]
 80a105c:	07d2      	lsls	r2, r2, #31
 80a105e:	bf5c      	itt	pl
 80a1060:	2201      	movpl	r2, #1
 80a1062:	601a      	strpl	r2, [r3, #0]
 80a1064:	4b12      	ldr	r3, [pc, #72]	; (80a10b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a1066:	681a      	ldr	r2, [r3, #0]
 80a1068:	07d0      	lsls	r0, r2, #31
 80a106a:	bf5c      	itt	pl
 80a106c:	2201      	movpl	r2, #1
 80a106e:	601a      	strpl	r2, [r3, #0]
 80a1070:	4b10      	ldr	r3, [pc, #64]	; (80a10b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1072:	681a      	ldr	r2, [r3, #0]
 80a1074:	07d1      	lsls	r1, r2, #31
 80a1076:	bf5c      	itt	pl
 80a1078:	2201      	movpl	r2, #1
 80a107a:	601a      	strpl	r2, [r3, #0]
 80a107c:	4b0e      	ldr	r3, [pc, #56]	; (80a10b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a107e:	681a      	ldr	r2, [r3, #0]
 80a1080:	07d2      	lsls	r2, r2, #31
 80a1082:	bf5c      	itt	pl
 80a1084:	2201      	movpl	r2, #1
 80a1086:	601a      	strpl	r2, [r3, #0]
 80a1088:	4770      	bx	lr
 80a108a:	bf00      	nop
 80a108c:	200001fc 	.word	0x200001fc
 80a1090:	200001f8 	.word	0x200001f8
 80a1094:	200001f4 	.word	0x200001f4
 80a1098:	200001f0 	.word	0x200001f0
 80a109c:	200001ec 	.word	0x200001ec
 80a10a0:	200001e8 	.word	0x200001e8
 80a10a4:	200001e4 	.word	0x200001e4
 80a10a8:	200001e0 	.word	0x200001e0
 80a10ac:	200001dc 	.word	0x200001dc
 80a10b0:	200001d8 	.word	0x200001d8
 80a10b4:	200001d4 	.word	0x200001d4
 80a10b8:	200001d0 	.word	0x200001d0

080a10bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a10bc:	4b18      	ldr	r3, [pc, #96]	; (80a1120 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a10be:	681a      	ldr	r2, [r3, #0]
 80a10c0:	07d1      	lsls	r1, r2, #31
 80a10c2:	bf5c      	itt	pl
 80a10c4:	2201      	movpl	r2, #1
 80a10c6:	601a      	strpl	r2, [r3, #0]
 80a10c8:	4b16      	ldr	r3, [pc, #88]	; (80a1124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a10ca:	681a      	ldr	r2, [r3, #0]
 80a10cc:	07d2      	lsls	r2, r2, #31
 80a10ce:	bf5c      	itt	pl
 80a10d0:	2201      	movpl	r2, #1
 80a10d2:	601a      	strpl	r2, [r3, #0]
 80a10d4:	4b14      	ldr	r3, [pc, #80]	; (80a1128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a10d6:	681a      	ldr	r2, [r3, #0]
 80a10d8:	07d0      	lsls	r0, r2, #31
 80a10da:	bf5c      	itt	pl
 80a10dc:	2201      	movpl	r2, #1
 80a10de:	601a      	strpl	r2, [r3, #0]
 80a10e0:	4b12      	ldr	r3, [pc, #72]	; (80a112c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a10e2:	681a      	ldr	r2, [r3, #0]
 80a10e4:	07d1      	lsls	r1, r2, #31
 80a10e6:	bf5c      	itt	pl
 80a10e8:	2201      	movpl	r2, #1
 80a10ea:	601a      	strpl	r2, [r3, #0]
 80a10ec:	4b10      	ldr	r3, [pc, #64]	; (80a1130 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a10ee:	681a      	ldr	r2, [r3, #0]
 80a10f0:	07d2      	lsls	r2, r2, #31
 80a10f2:	bf5c      	itt	pl
 80a10f4:	2201      	movpl	r2, #1
 80a10f6:	601a      	strpl	r2, [r3, #0]
 80a10f8:	4b0e      	ldr	r3, [pc, #56]	; (80a1134 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a10fa:	681a      	ldr	r2, [r3, #0]
 80a10fc:	07d0      	lsls	r0, r2, #31
 80a10fe:	bf5c      	itt	pl
 80a1100:	2201      	movpl	r2, #1
 80a1102:	601a      	strpl	r2, [r3, #0]
 80a1104:	4b0c      	ldr	r3, [pc, #48]	; (80a1138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1106:	681a      	ldr	r2, [r3, #0]
 80a1108:	07d1      	lsls	r1, r2, #31
 80a110a:	bf5c      	itt	pl
 80a110c:	2201      	movpl	r2, #1
 80a110e:	601a      	strpl	r2, [r3, #0]
 80a1110:	4b0a      	ldr	r3, [pc, #40]	; (80a113c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1112:	681a      	ldr	r2, [r3, #0]
 80a1114:	07d2      	lsls	r2, r2, #31
 80a1116:	bf5c      	itt	pl
 80a1118:	2201      	movpl	r2, #1
 80a111a:	601a      	strpl	r2, [r3, #0]
 80a111c:	4770      	bx	lr
 80a111e:	bf00      	nop
 80a1120:	2000021c 	.word	0x2000021c
 80a1124:	20000218 	.word	0x20000218
 80a1128:	20000214 	.word	0x20000214
 80a112c:	20000210 	.word	0x20000210
 80a1130:	2000020c 	.word	0x2000020c
 80a1134:	20000208 	.word	0x20000208
 80a1138:	20000204 	.word	0x20000204
 80a113c:	20000200 	.word	0x20000200

080a1140 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1140:	4b18      	ldr	r3, [pc, #96]	; (80a11a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1142:	681a      	ldr	r2, [r3, #0]
 80a1144:	07d1      	lsls	r1, r2, #31
 80a1146:	bf5c      	itt	pl
 80a1148:	2201      	movpl	r2, #1
 80a114a:	601a      	strpl	r2, [r3, #0]
 80a114c:	4b16      	ldr	r3, [pc, #88]	; (80a11a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a114e:	681a      	ldr	r2, [r3, #0]
 80a1150:	07d2      	lsls	r2, r2, #31
 80a1152:	bf5c      	itt	pl
 80a1154:	2201      	movpl	r2, #1
 80a1156:	601a      	strpl	r2, [r3, #0]
 80a1158:	4b14      	ldr	r3, [pc, #80]	; (80a11ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a115a:	681a      	ldr	r2, [r3, #0]
 80a115c:	07d0      	lsls	r0, r2, #31
 80a115e:	bf5c      	itt	pl
 80a1160:	2201      	movpl	r2, #1
 80a1162:	601a      	strpl	r2, [r3, #0]
 80a1164:	4b12      	ldr	r3, [pc, #72]	; (80a11b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1166:	681a      	ldr	r2, [r3, #0]
 80a1168:	07d1      	lsls	r1, r2, #31
 80a116a:	bf5c      	itt	pl
 80a116c:	2201      	movpl	r2, #1
 80a116e:	601a      	strpl	r2, [r3, #0]
 80a1170:	4b10      	ldr	r3, [pc, #64]	; (80a11b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1172:	681a      	ldr	r2, [r3, #0]
 80a1174:	07d2      	lsls	r2, r2, #31
 80a1176:	bf5c      	itt	pl
 80a1178:	2201      	movpl	r2, #1
 80a117a:	601a      	strpl	r2, [r3, #0]
 80a117c:	4b0e      	ldr	r3, [pc, #56]	; (80a11b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a117e:	681a      	ldr	r2, [r3, #0]
 80a1180:	07d0      	lsls	r0, r2, #31
 80a1182:	bf5c      	itt	pl
 80a1184:	2201      	movpl	r2, #1
 80a1186:	601a      	strpl	r2, [r3, #0]
 80a1188:	4b0c      	ldr	r3, [pc, #48]	; (80a11bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a118a:	681a      	ldr	r2, [r3, #0]
 80a118c:	07d1      	lsls	r1, r2, #31
 80a118e:	bf5c      	itt	pl
 80a1190:	2201      	movpl	r2, #1
 80a1192:	601a      	strpl	r2, [r3, #0]
 80a1194:	4b0a      	ldr	r3, [pc, #40]	; (80a11c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1196:	681a      	ldr	r2, [r3, #0]
 80a1198:	07d2      	lsls	r2, r2, #31
 80a119a:	bf5c      	itt	pl
 80a119c:	2201      	movpl	r2, #1
 80a119e:	601a      	strpl	r2, [r3, #0]
 80a11a0:	4770      	bx	lr
 80a11a2:	bf00      	nop
 80a11a4:	2000023c 	.word	0x2000023c
 80a11a8:	20000238 	.word	0x20000238
 80a11ac:	20000234 	.word	0x20000234
 80a11b0:	20000230 	.word	0x20000230
 80a11b4:	2000022c 	.word	0x2000022c
 80a11b8:	20000228 	.word	0x20000228
 80a11bc:	20000224 	.word	0x20000224
 80a11c0:	20000220 	.word	0x20000220

080a11c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a11c4:	4b24      	ldr	r3, [pc, #144]	; (80a1258 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a11c6:	681a      	ldr	r2, [r3, #0]
 80a11c8:	07d0      	lsls	r0, r2, #31
 80a11ca:	bf5c      	itt	pl
 80a11cc:	2201      	movpl	r2, #1
 80a11ce:	601a      	strpl	r2, [r3, #0]
 80a11d0:	4b22      	ldr	r3, [pc, #136]	; (80a125c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a11d2:	681a      	ldr	r2, [r3, #0]
 80a11d4:	07d1      	lsls	r1, r2, #31
 80a11d6:	bf5c      	itt	pl
 80a11d8:	2201      	movpl	r2, #1
 80a11da:	601a      	strpl	r2, [r3, #0]
 80a11dc:	4b20      	ldr	r3, [pc, #128]	; (80a1260 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a11de:	681a      	ldr	r2, [r3, #0]
 80a11e0:	07d2      	lsls	r2, r2, #31
 80a11e2:	bf5c      	itt	pl
 80a11e4:	2201      	movpl	r2, #1
 80a11e6:	601a      	strpl	r2, [r3, #0]
 80a11e8:	4b1e      	ldr	r3, [pc, #120]	; (80a1264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a11ea:	681a      	ldr	r2, [r3, #0]
 80a11ec:	07d0      	lsls	r0, r2, #31
 80a11ee:	bf5c      	itt	pl
 80a11f0:	2201      	movpl	r2, #1
 80a11f2:	601a      	strpl	r2, [r3, #0]
 80a11f4:	4b1c      	ldr	r3, [pc, #112]	; (80a1268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a11f6:	681a      	ldr	r2, [r3, #0]
 80a11f8:	07d1      	lsls	r1, r2, #31
 80a11fa:	bf5c      	itt	pl
 80a11fc:	2201      	movpl	r2, #1
 80a11fe:	601a      	strpl	r2, [r3, #0]
 80a1200:	4b1a      	ldr	r3, [pc, #104]	; (80a126c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1202:	681a      	ldr	r2, [r3, #0]
 80a1204:	07d2      	lsls	r2, r2, #31
 80a1206:	bf5c      	itt	pl
 80a1208:	2201      	movpl	r2, #1
 80a120a:	601a      	strpl	r2, [r3, #0]
 80a120c:	4b18      	ldr	r3, [pc, #96]	; (80a1270 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a120e:	681a      	ldr	r2, [r3, #0]
 80a1210:	07d0      	lsls	r0, r2, #31
 80a1212:	bf5c      	itt	pl
 80a1214:	2201      	movpl	r2, #1
 80a1216:	601a      	strpl	r2, [r3, #0]
 80a1218:	4b16      	ldr	r3, [pc, #88]	; (80a1274 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a121a:	681a      	ldr	r2, [r3, #0]
 80a121c:	07d1      	lsls	r1, r2, #31
 80a121e:	bf5c      	itt	pl
 80a1220:	2201      	movpl	r2, #1
 80a1222:	601a      	strpl	r2, [r3, #0]
 80a1224:	4b14      	ldr	r3, [pc, #80]	; (80a1278 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1226:	681a      	ldr	r2, [r3, #0]
 80a1228:	07d2      	lsls	r2, r2, #31
 80a122a:	bf5c      	itt	pl
 80a122c:	2201      	movpl	r2, #1
 80a122e:	601a      	strpl	r2, [r3, #0]
 80a1230:	4b12      	ldr	r3, [pc, #72]	; (80a127c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1232:	681a      	ldr	r2, [r3, #0]
 80a1234:	07d0      	lsls	r0, r2, #31
 80a1236:	bf5c      	itt	pl
 80a1238:	2201      	movpl	r2, #1
 80a123a:	601a      	strpl	r2, [r3, #0]
 80a123c:	4b10      	ldr	r3, [pc, #64]	; (80a1280 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a123e:	681a      	ldr	r2, [r3, #0]
 80a1240:	07d1      	lsls	r1, r2, #31
 80a1242:	bf5c      	itt	pl
 80a1244:	2201      	movpl	r2, #1
 80a1246:	601a      	strpl	r2, [r3, #0]
 80a1248:	4b0e      	ldr	r3, [pc, #56]	; (80a1284 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a124a:	681a      	ldr	r2, [r3, #0]
 80a124c:	07d2      	lsls	r2, r2, #31
 80a124e:	bf5c      	itt	pl
 80a1250:	2201      	movpl	r2, #1
 80a1252:	601a      	strpl	r2, [r3, #0]
 80a1254:	4770      	bx	lr
 80a1256:	bf00      	nop
 80a1258:	2000026c 	.word	0x2000026c
 80a125c:	20000268 	.word	0x20000268
 80a1260:	20000264 	.word	0x20000264
 80a1264:	20000260 	.word	0x20000260
 80a1268:	2000025c 	.word	0x2000025c
 80a126c:	20000258 	.word	0x20000258
 80a1270:	20000254 	.word	0x20000254
 80a1274:	20000250 	.word	0x20000250
 80a1278:	2000024c 	.word	0x2000024c
 80a127c:	20000248 	.word	0x20000248
 80a1280:	20000244 	.word	0x20000244
 80a1284:	20000240 	.word	0x20000240

080a1288 <__cxa_atexit>:
 80a1288:	b510      	push	{r4, lr}
 80a128a:	4c05      	ldr	r4, [pc, #20]	; (80a12a0 <__cxa_atexit+0x18>)
 80a128c:	4613      	mov	r3, r2
 80a128e:	b12c      	cbz	r4, 80a129c <__cxa_atexit+0x14>
 80a1290:	460a      	mov	r2, r1
 80a1292:	4601      	mov	r1, r0
 80a1294:	2002      	movs	r0, #2
 80a1296:	f3af 8000 	nop.w
 80a129a:	bd10      	pop	{r4, pc}
 80a129c:	4620      	mov	r0, r4
 80a129e:	bd10      	pop	{r4, pc}
 80a12a0:	00000000 	.word	0x00000000

080a12a4 <memcpy>:
 80a12a4:	b510      	push	{r4, lr}
 80a12a6:	1e43      	subs	r3, r0, #1
 80a12a8:	440a      	add	r2, r1
 80a12aa:	4291      	cmp	r1, r2
 80a12ac:	d004      	beq.n	80a12b8 <memcpy+0x14>
 80a12ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a12b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a12b6:	e7f8      	b.n	80a12aa <memcpy+0x6>
 80a12b8:	bd10      	pop	{r4, pc}

080a12ba <memset>:
 80a12ba:	4603      	mov	r3, r0
 80a12bc:	4402      	add	r2, r0
 80a12be:	4293      	cmp	r3, r2
 80a12c0:	d002      	beq.n	80a12c8 <memset+0xe>
 80a12c2:	f803 1b01 	strb.w	r1, [r3], #1
 80a12c6:	e7fa      	b.n	80a12be <memset+0x4>
 80a12c8:	4770      	bx	lr
	...

080a12cc <srand>:
 80a12cc:	b538      	push	{r3, r4, r5, lr}
 80a12ce:	4b12      	ldr	r3, [pc, #72]	; (80a1318 <srand+0x4c>)
 80a12d0:	4605      	mov	r5, r0
 80a12d2:	681c      	ldr	r4, [r3, #0]
 80a12d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a12d6:	b9d3      	cbnz	r3, 80a130e <srand+0x42>
 80a12d8:	2018      	movs	r0, #24
 80a12da:	f7ff f967 	bl	80a05ac <malloc>
 80a12de:	f243 330e 	movw	r3, #13070	; 0x330e
 80a12e2:	63a0      	str	r0, [r4, #56]	; 0x38
 80a12e4:	8003      	strh	r3, [r0, #0]
 80a12e6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a12ea:	8043      	strh	r3, [r0, #2]
 80a12ec:	f241 2334 	movw	r3, #4660	; 0x1234
 80a12f0:	8083      	strh	r3, [r0, #4]
 80a12f2:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a12f6:	80c3      	strh	r3, [r0, #6]
 80a12f8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a12fc:	8103      	strh	r3, [r0, #8]
 80a12fe:	2305      	movs	r3, #5
 80a1300:	8143      	strh	r3, [r0, #10]
 80a1302:	230b      	movs	r3, #11
 80a1304:	8183      	strh	r3, [r0, #12]
 80a1306:	2201      	movs	r2, #1
 80a1308:	2300      	movs	r3, #0
 80a130a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a130e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1310:	2200      	movs	r2, #0
 80a1312:	611d      	str	r5, [r3, #16]
 80a1314:	615a      	str	r2, [r3, #20]
 80a1316:	bd38      	pop	{r3, r4, r5, pc}
 80a1318:	20000070 	.word	0x20000070

080a131c <strlen>:
 80a131c:	4603      	mov	r3, r0
 80a131e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1322:	2a00      	cmp	r2, #0
 80a1324:	d1fb      	bne.n	80a131e <strlen+0x2>
 80a1326:	1a18      	subs	r0, r3, r0
 80a1328:	3801      	subs	r0, #1
 80a132a:	4770      	bx	lr

080a132c <dynalib_user>:
 80a132c:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a133c:	0000 0000                                   ....

080a1340 <_ZTV7TwoWire>:
	...
 80a1348:	05e5 080a 062f 080a 0607 080a 05e7 080a     ..../...........
 80a1358:	060f 080a 0617 080a 061f 080a 0627 080a     ............'...

080a1368 <_ZTV9IPAddress>:
	...
 80a1370:	0701 080a 06f1 080a 06f3 080a 6162 6475     ............baud
 80a1380:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a1390:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a13a0:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a13b0:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a13c0:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a13d0:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a13e0:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a13f0:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a1400:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a1410:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a1420:	3d20 0020 0a0d 6600 6c00 006e 6e66 6300      = ....f.ln.fn.c
 80a1430:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a1440:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a1450:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a1460 <_ZTVN5spark12NetworkClassE>:
	...
 80a1468:	07c9 080a 07d3 080a 07dd 080a 07e7 080a     ................
 80a1478:	07f1 080a 07fd 080a 0809 080a 0815 080a     ................
 80a1488:	081d 080a 0827 080a 0831 080a 005a 2b25     ....'...1...Z.%+
 80a1498:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
 80a14a8:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
 80a14b8:	6974 656d 0000 0000                         time....

080a14c0 <_ZTV11USARTSerial>:
	...
 80a14c8:	09b9 080a 0a09 080a 0a17 080a 0895 080a     ................
 80a14d8:	09cd 080a 09ef 080a 09db 080a 0a03 080a     ................
 80a14e8:	09bb 080a 09bf 080a                         ........

080a14f0 <_ZTV9USBSerial>:
	...
 80a14f8:	0af5 080a 0b45 080a 0b53 080a 0895 080a     ....E...S.......
 80a1508:	0b31 080a 0af7 080a 0b0d 080a 0b3f 080a     1...........?...
 80a1518:	0b23 080a 0af1 080a                         #.......

080a1520 <_ZTVN5spark9WiFiClassE>:
	...
 80a1528:	0cff 080a 0cf5 080a 0ceb 080a 0c5d 080a     ............]...
 80a1538:	0cdf 080a 0cd3 080a 0cc7 080a 0cbf 080a     ................
 80a1548:	0cb5 080a 0cab 080a 0c67 080a               ........g...

080a1554 <_ZSt7nothrow>:
 80a1554:	0000 0000                                   ....

080a1558 <__sf_fake_stdin>:
	...

080a1578 <__sf_fake_stdout>:
	...

080a1598 <__sf_fake_stderr>:
	...
 80a15b8:	0043                                        C.

080a15ba <link_const_variable_data_end>:
	...

080a15bc <link_constructors_location>:
 80a15bc:	080a0219 	.word	0x080a0219
 80a15c0:	080a07b9 	.word	0x080a07b9
 80a15c4:	080a0881 	.word	0x080a0881
 80a15c8:	080a0931 	.word	0x080a0931
 80a15cc:	080a0971 	.word	0x080a0971
 80a15d0:	080a09a5 	.word	0x080a09a5
 80a15d4:	080a0d09 	.word	0x080a0d09
 80a15d8:	080a0f85 	.word	0x080a0f85
 80a15dc:	080a0ff9 	.word	0x080a0ff9
 80a15e0:	080a10bd 	.word	0x080a10bd
 80a15e4:	080a1141 	.word	0x080a1141
 80a15e8:	080a11c5 	.word	0x080a11c5

080a15ec <link_constructors_end>:
 80a15ec:	00000000 	.word	0x00000000
